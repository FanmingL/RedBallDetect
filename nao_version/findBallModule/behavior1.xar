<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="getStick" id="2" localization="8" tooltip="" x="263" y="230">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="lift" id="1" localization="8" tooltip="" x="268" y="147">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="125">
                                                    <ActuatorList model="nao">
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="35" value="-36.209" />
                                                            <Key frame="55" value="-64.5101" />
                                                            <Key frame="75" value="-64.5101" />
                                                            <Key frame="99" value="-83.8463" />
                                                            <Key frame="125" value="-86.0436" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="35" value="-66.5365" />
                                                            <Key frame="55" value="-67.1517" />
                                                            <Key frame="75" value="-67.1517" />
                                                            <Key frame="99" value="-100.551" />
                                                            <Key frame="125" value="-94.1344" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="35" value="0.4044" />
                                                            <Key frame="55" value="0.4044" />
                                                            <Key frame="75" value="0.4044" />
                                                            <Key frame="99" value="0.984" />
                                                            <Key frame="125" value="0.9868" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="35" value="89.6472" />
                                                            <Key frame="55" value="77.2544" />
                                                            <Key frame="75" value="77.2544" />
                                                            <Key frame="99" value="84.2858" />
                                                            <Key frame="125" value="119.267" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="35" value="8.96255" />
                                                            <Key frame="55" value="-3.07861" />
                                                            <Key frame="75" value="-3.07861" />
                                                            <Key frame="99" value="6.32579" />
                                                            <Key frame="125" value="-0.793436" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="35" value="5.97423" />
                                                            <Key frame="55" value="-25.5789" />
                                                            <Key frame="75" value="-25.5789" />
                                                            <Key frame="99" value="-103.715" />
                                                            <Key frame="125" value="-92.904" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="35" value="69.5248" />
                                                            <Key frame="55" value="69.5248" />
                                                            <Key frame="75" value="73.1283" />
                                                            <Key frame="99" value="72.8646" />
                                                            <Key frame="125" value="86.4879" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="35" value="81.4732" />
                                                            <Key frame="55" value="81.4732" />
                                                            <Key frame="75" value="84.9889" />
                                                            <Key frame="99" value="81.0338" />
                                                            <Key frame="125" value="88.3288" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="35" value="0.186" />
                                                            <Key frame="55" value="0.186" />
                                                            <Key frame="75" value="0.186" />
                                                            <Key frame="99" value="0.3352" />
                                                            <Key frame="125" value="0.4372" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="35" value="72.6889" />
                                                            <Key frame="55" value="72.6889" />
                                                            <Key frame="75" value="73.392" />
                                                            <Key frame="99" value="71.4584" />
                                                            <Key frame="125" value="119.5" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="35" value="-4.39699" />
                                                            <Key frame="55" value="-4.39699" />
                                                            <Key frame="75" value="-2.63916" />
                                                            <Key frame="99" value="4.48007" />
                                                            <Key frame="125" value="0.876518" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="35" value="11.5993" />
                                                            <Key frame="55" value="11.5993" />
                                                            <Key frame="75" value="88.2409" />
                                                            <Key frame="99" value="87.8014" />
                                                            <Key frame="125" value="90.9655" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="99" value="-10.9889" />
                                                            <Key frame="125" value="-9.84628" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="99" value="0.349159" />
                                                            <Key frame="125" value="1.66754" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="99" value="-28.1278" />
                                                            <Key frame="125" value="-28.3035" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="99" value="-1.22808" />
                                                            <Key frame="125" value="-1.31597" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="99" value="-25.9256" />
                                                            <Key frame="125" value="-25.9256" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="99" value="0.61764" />
                                                            <Key frame="125" value="0.881327" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="99" value="-0.0854867" />
                                                            <Key frame="125" value="-0.261268" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="99" value="53.6115" />
                                                            <Key frame="125" value="53.4358" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="99" value="-35.7695" />
                                                            <Key frame="125" value="-35.7695" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="99" value="-0.173378" />
                                                            <Key frame="125" value="-0.43705" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="99" value="-12.483" />
                                                            <Key frame="125" value="-12.5709" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="99" value="0.793436" />
                                                            <Key frame="125" value="0.969218" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="99" value="-0.0854867" />
                                                            <Key frame="125" value="-0.261268" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="99" value="48.7823" />
                                                            <Key frame="125" value="48.6065" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="Tactile Head" id="2" localization="8" tooltip="Detect touch on head tactile sensor." x="468" y="535">
                                                <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                                <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                                <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                                                <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                                                <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                                <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="Head-sequence" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Hands" id="3" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="364" y="322">
                                                <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Open the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                    <Choice value="Open the hand" />
                                                    <Choice value="Close the hand" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Hands (1)" id="4" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="735" y="407">
                                                <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Close the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                    <Choice value="Open the hand" />
                                                    <Choice value="Close the hand" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Stand Up" id="5" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="108" y="108">
                                                <bitmap>media/images/box/movement/stand.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="StandUpBehavior">
                                                        <BehaviorKeyframe name="DetectRobotPose" index="1">
                                                            <Diagram>
                                                                <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                                    <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                                        <Choice value="Crouch" />
                                                                        <Choice value="LyingBack" />
                                                                        <Choice value="LyingBelly" />
                                                                        <Choice value="Sit" />
                                                                        <Choice value="SitRelax" />
                                                                        <Choice value="StandInit" />
                                                                        <Choice value="Stand" />
                                                                        <Choice value="StandZero" />
                                                                    </Parameter>
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                                    <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                                    <Resource name="All motors" type="Lock" timeout="0" />
                                                                    <Resource name="Stiffness" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="8" />
                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="9" />
                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="10" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="right" id="5" localization="8" tooltip="" x="882" y="502">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="shoot (1)" id="3" localization="8" tooltip="" x="520" y="243">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="145">
                                                    <ActuatorList model="">
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="-62.8402" />
                                                            <Key frame="40" value="-26.8046" />
                                                            <Key frame="61" value="-25.5741" />
                                                            <Key frame="77" value="-27.0682" />
                                                            <Key frame="135" value="-26.7167" />
                                                            <Key frame="145" value="-79.6275" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="-99.4958" />
                                                            <Key frame="40" value="-99.4958" />
                                                            <Key frame="61" value="-98.7048" />
                                                            <Key frame="77" value="-98.529" />
                                                            <Key frame="135" value="-98.6169" />
                                                            <Key frame="145" value="-102.836" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="25" value="0.9896" />
                                                            <Key frame="40" value="0.9896" />
                                                            <Key frame="61" value="0.9896" />
                                                            <Key frame="77" value="0.9896" />
                                                            <Key frame="135" value="0.9896" />
                                                            <Key frame="145" value="0.9896" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="77.4302" />
                                                            <Key frame="40" value="89.7351" />
                                                            <Key frame="61" value="88.5925" />
                                                            <Key frame="77" value="89.3835" />
                                                            <Key frame="135" value="88.8561" />
                                                            <Key frame="145" value="85.2526" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="-2.99072" />
                                                            <Key frame="40" value="-3.60597" />
                                                            <Key frame="61" value="-4.39699" />
                                                            <Key frame="77" value="-3.95753" />
                                                            <Key frame="135" value="-3.78175" />
                                                            <Key frame="145" value="-8.00056" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="-89.2125" />
                                                            <Key frame="40" value="-87.5426" />
                                                            <Key frame="61" value="-88.0699" />
                                                            <Key frame="77" value="-87.982" />
                                                            <Key frame="135" value="-88.0699" />
                                                            <Key frame="145" value="-87.7183" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="66.4486" />
                                                            <Key frame="40" value="66.6243" />
                                                            <Key frame="61" value="71.6" />
                                                            <Key frame="77" value="72.8646" />
                                                            <Key frame="135" value="73.8315" />
                                                            <Key frame="145" value="73.8315" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="95.3601" />
                                                            <Key frame="40" value="94.2175" />
                                                            <Key frame="61" value="94.3054" />
                                                            <Key frame="77" value="84.2858" />
                                                            <Key frame="135" value="83.7584" />
                                                            <Key frame="145" value="83.7584" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="25" value="0.25" />
                                                            <Key frame="40" value="0.25" />
                                                            <Key frame="61" value="0.25" />
                                                            <Key frame="77" value="0.25" />
                                                            <Key frame="135" value="0.25" />
                                                            <Key frame="145" value="0.31" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="71.0189" />
                                                            <Key frame="40" value="63.7" />
                                                            <Key frame="61" value="73.8315" />
                                                            <Key frame="77" value="63.8118" />
                                                            <Key frame="135" value="68.0306" />
                                                            <Key frame="145" value="68.0306" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="12.1267" />
                                                            <Key frame="40" value="11.3356" />
                                                            <Key frame="61" value="-3.1665" />
                                                            <Key frame="77" value="-49.3976" />
                                                            <Key frame="135" value="-10.1978" />
                                                            <Key frame="145" value="-10.1978" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="69.52" />
                                                            <Key frame="40" value="71.4536" />
                                                            <Key frame="61" value="21.0037" />
                                                            <Key frame="77" value="18.367" />
                                                            <Key frame="135" value="103.358" />
                                                            <Key frame="145" value="103.974" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="-10.6373" />
                                                            <Key frame="40" value="-10.6373" />
                                                            <Key frame="61" value="-10.6373" />
                                                            <Key frame="77" value="-10.6373" />
                                                            <Key frame="135" value="-10.6373" />
                                                            <Key frame="145" value="-10.6373" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="0.0854867" />
                                                            <Key frame="40" value="0.0854867" />
                                                            <Key frame="61" value="0.0854867" />
                                                            <Key frame="77" value="0.0854867" />
                                                            <Key frame="135" value="0.0854867" />
                                                            <Key frame="145" value="0.0854867" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="-38.0595" />
                                                            <Key frame="40" value="-38.0595" />
                                                            <Key frame="61" value="-38.0595" />
                                                            <Key frame="77" value="-38.0595" />
                                                            <Key frame="135" value="-38.0595" />
                                                            <Key frame="145" value="-38.0595" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="0.441859" />
                                                            <Key frame="40" value="0.441859" />
                                                            <Key frame="61" value="0.441859" />
                                                            <Key frame="77" value="0.441859" />
                                                            <Key frame="135" value="0.441859" />
                                                            <Key frame="145" value="0.441859" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="-10.6325" />
                                                            <Key frame="40" value="-10.6325" />
                                                            <Key frame="61" value="-10.6325" />
                                                            <Key frame="77" value="-10.6325" />
                                                            <Key frame="135" value="-10.6325" />
                                                            <Key frame="145" value="-10.6325" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="-0.788627" />
                                                            <Key frame="40" value="-0.788627" />
                                                            <Key frame="61" value="-0.788627" />
                                                            <Key frame="77" value="-0.788627" />
                                                            <Key frame="135" value="-0.788627" />
                                                            <Key frame="145" value="-0.788627" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="0.178186" />
                                                            <Key frame="40" value="0.178186" />
                                                            <Key frame="61" value="0.178186" />
                                                            <Key frame="77" value="0.178186" />
                                                            <Key frame="135" value="0.178186" />
                                                            <Key frame="145" value="0.178186" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="48.0744" />
                                                            <Key frame="40" value="48.0744" />
                                                            <Key frame="61" value="48.0744" />
                                                            <Key frame="77" value="48.0744" />
                                                            <Key frame="135" value="48.0744" />
                                                            <Key frame="145" value="48.0744" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="-29.1777" />
                                                            <Key frame="40" value="-29.1777" />
                                                            <Key frame="61" value="-29.7929" />
                                                            <Key frame="77" value="-29.1777" />
                                                            <Key frame="135" value="-29.1777" />
                                                            <Key frame="145" value="-29.1777" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="0.705531" />
                                                            <Key frame="40" value="0.705531" />
                                                            <Key frame="61" value="0.705531" />
                                                            <Key frame="77" value="0.705531" />
                                                            <Key frame="135" value="0.705531" />
                                                            <Key frame="145" value="0.705531" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="-26.4578" />
                                                            <Key frame="40" value="-26.4578" />
                                                            <Key frame="61" value="-26.5457" />
                                                            <Key frame="77" value="-26.4578" />
                                                            <Key frame="135" value="-26.4578" />
                                                            <Key frame="145" value="-26.4578" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="-0.173378" />
                                                            <Key frame="40" value="-0.173378" />
                                                            <Key frame="61" value="-0.173378" />
                                                            <Key frame="77" value="-0.173378" />
                                                            <Key frame="135" value="-0.173378" />
                                                            <Key frame="145" value="-0.173378" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="0.178186" />
                                                            <Key frame="40" value="0.178186" />
                                                            <Key frame="61" value="0.178186" />
                                                            <Key frame="77" value="0.178186" />
                                                            <Key frame="135" value="0.178186" />
                                                            <Key frame="145" value="0.178186" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="25" value="55.4621" />
                                                            <Key frame="40" value="55.4621" />
                                                            <Key frame="61" value="55.4621" />
                                                            <Key frame="77" value="55.4621" />
                                                            <Key frame="135" value="55.4621" />
                                                            <Key frame="145" value="55.4621" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="finish" id="1" localization="8" tooltip="" x="553" y="739">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="104">
                                                    <ActuatorList model="nao">
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="-8.08845" />
                                                            <Key frame="84" value="-8.08845" />
                                                            <Key frame="104" value="-8.08845" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="0.612832" />
                                                            <Key frame="84" value="0.612832" />
                                                            <Key frame="104" value="0.612832" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="5.09532" />
                                                            <Key frame="84" value="5.09532" />
                                                            <Key frame="104" value="5.09532" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="-7.46839" />
                                                            <Key frame="84" value="-7.46839" />
                                                            <Key frame="104" value="-7.46839" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="-22.5858" />
                                                            <Key frame="84" value="-22.5858" />
                                                            <Key frame="104" value="-22.5858" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="-68.8216" />
                                                            <Key frame="84" value="-68.8216" />
                                                            <Key frame="104" value="-68.8216" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="39" value="0.2856" />
                                                            <Key frame="84" value="0.2856" />
                                                            <Key frame="104" value="0.2856" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="7.4732" />
                                                            <Key frame="84" value="7.4732" />
                                                            <Key frame="104" value="7.4732" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="5.89115" />
                                                            <Key frame="84" value="5.89115" />
                                                            <Key frame="104" value="5.89115" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="-9.66569" />
                                                            <Key frame="84" value="-9.66569" />
                                                            <Key frame="104" value="-9.66569" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="-5.01224" />
                                                            <Key frame="84" value="-5.01224" />
                                                            <Key frame="104" value="-5.01224" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="85.692" />
                                                            <Key frame="84" value="85.692" />
                                                            <Key frame="104" value="85.692" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="10.193" />
                                                            <Key frame="84" value="10.193" />
                                                            <Key frame="104" value="10.193" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="4.04062" />
                                                            <Key frame="84" value="4.04062" />
                                                            <Key frame="104" value="4.04062" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="5.01224" />
                                                            <Key frame="84" value="5.01224" />
                                                            <Key frame="104" value="5.01224" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="7.38531" />
                                                            <Key frame="84" value="7.38531" />
                                                            <Key frame="104" value="7.38531" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="73.2162" />
                                                            <Key frame="84" value="73.2162" />
                                                            <Key frame="104" value="73.2162" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="80.3306" />
                                                            <Key frame="84" value="80.3306" />
                                                            <Key frame="104" value="80.3306" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="39" value="0.2892" />
                                                            <Key frame="84" value="0.2892" />
                                                            <Key frame="104" value="0.96" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="7.46839" />
                                                            <Key frame="84" value="7.46839" />
                                                            <Key frame="104" value="7.46839" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="-5.97423" />
                                                            <Key frame="84" value="-5.97423" />
                                                            <Key frame="104" value="-5.97423" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="-9.66569" />
                                                            <Key frame="84" value="-9.66569" />
                                                            <Key frame="104" value="-9.66569" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="-4.83163" />
                                                            <Key frame="84" value="-4.83163" />
                                                            <Key frame="104" value="-4.83163" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="50.7159" />
                                                            <Key frame="84" value="50.7159" />
                                                            <Key frame="104" value="50.7159" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="-14.0651" />
                                                            <Key frame="84" value="-14.0651" />
                                                            <Key frame="104" value="-14.0651" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="39" value="25.7499" />
                                                            <Key frame="84" value="25.7499" />
                                                            <Key frame="104" value="25.7499" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="shootbig" id="4" localization="8" tooltip="" x="324" y="506">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="87">
                                                    <ActuatorList model="nao">
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="58" value="-22.5858" />
                                                            <Key frame="87" value="-22.5858" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="58" value="-68.9974" />
                                                            <Key frame="87" value="-68.9974" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="58" value="0.2928" />
                                                            <Key frame="87" value="0.2928" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="58" value="86.2194" />
                                                            <Key frame="87" value="86.2194" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="58" value="3.60116" />
                                                            <Key frame="87" value="3.60116" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="58" value="4.04062" />
                                                            <Key frame="87" value="4.04062" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="58" value="67.0638" />
                                                            <Key frame="87" value="67.8548" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="58" value="90.5261" />
                                                            <Key frame="87" value="90.8776" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="58" value="0.14" />
                                                            <Key frame="87" value="0.2392" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="58" value="27.0731" />
                                                            <Key frame="87" value="45.6" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="58" value="-8.35212" />
                                                            <Key frame="87" value="12.5661" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="58" value="3.60116" />
                                                            <Key frame="87" value="-18.4597" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="shoot (2)" id="5" localization="8" tooltip="" x="619" y="650">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="94">
                                                    <ActuatorList model="">
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="54" value="-45.7892" />
                                                            <Key frame="83" value="-45.7892" />
                                                            <Key frame="94" value="-38.4063" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="54" value="-71.9857" />
                                                            <Key frame="83" value="-71.9857" />
                                                            <Key frame="94" value="-71.9857" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="54" value="0.3012" />
                                                            <Key frame="83" value="0.3012" />
                                                            <Key frame="94" value="0.3012" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="54" value="118.124" />
                                                            <Key frame="83" value="118.124" />
                                                            <Key frame="94" value="118.827" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="54" value="22.4979" />
                                                            <Key frame="83" value="22.4979" />
                                                            <Key frame="94" value="32.5175" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="54" value="-8.70368" />
                                                            <Key frame="83" value="-8.70368" />
                                                            <Key frame="94" value="-23.8211" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="54" value="77.1713" />
                                                            <Key frame="83" value="77.1713" />
                                                            <Key frame="94" value="63.8997" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="54" value="82.7916" />
                                                            <Key frame="83" value="82.7916" />
                                                            <Key frame="94" value="90.3503" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="54" value="0.13" />
                                                            <Key frame="83" value="0.12" />
                                                            <Key frame="94" value="0.07" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="54" value="46.585" />
                                                            <Key frame="83" value="46.585" />
                                                            <Key frame="94" value="43.8" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="54" value="-19.2507" />
                                                            <Key frame="83" value="-19.2507" />
                                                            <Key frame="94" value="18" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="54" value="-10.0221" />
                                                            <Key frame="83" value="-10.0221" />
                                                            <Key frame="94" value="34.2" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="55" value="4.56796" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="55" value="-7.46839" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="55" value="-33.9238" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="55" value="4.3091" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="55" value="-14.9392" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="55" value="16.3455" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="55" value="4.13332" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="55" value="6.85796" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="55" value="-34.6318" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="55" value="-1.75543" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="55" value="-14.9392" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="55" value="15.9108" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="Hands" id="6" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="195" y="251">
                                                <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Close the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                    <Choice value="Open the hand" />
                                                    <Choice value="Close the hand" />
                                                </Parameter>
                                            </Box>
                                            <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="roundOne (1)" id="6" localization="8" tooltip="" x="809" y="351">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram scale="59.4604">
                                            <Box name="move left" id="2" localization="8" tooltip="" x="1083" y="142">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram scale="84.0896">
                                                                <Box name="Move To" id="1" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="381" y="76">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0.15" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Move To (1)" id="5" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="152" y="74">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.15" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="646" y="317">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("move left around 30 degrees")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[move left around 30 degrees]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                </Box>
                                                                <Box name="search" id="15" localization="8" tooltip="" x="651" y="77">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                        <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                        <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="745" y="62">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.2, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                        <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                        <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                        <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                        <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.08" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                        <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                        <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                    </Box>
                                                                                    <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                        <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                        <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                        <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="94.3874">
                                                                                                        <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                            <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                            <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-0.0902951" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="20.9158" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="0.788627" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-11.5162" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="39.9004" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-36.5654" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="837" y="461">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="575" y="63">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                        <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                        <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="778" y="243">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.5512)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="445" y="414">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="position adj" id="9" localization="8" tooltip="" x="735" y="450">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        import almath
        import time
        #self.onStopped() #activate the output of the box

        #while(True):
        self.angleToFlag = self.memory.getData("Device/SubDeviceList/HeadYaw/Position/Sensor/Value")
        self.angleToFlag = self.angleToFlag / almath.PI * 180
        self.logger.info(self.angleToFlag)

        if (self.angleToFlag>-118 and self.angleToFlag<-78) or (self.angleToFlag>50 and self.angleToFlag<60):
            self.log("Left10");
            self.left10()
        elif (self.angleToFlag>-78 and self.angleToFlag<-60):
            self.onStopped()
        elif (self.angleToFlag>-60 and self.angleToFlag<-50) or (self.angleToFlag>78 and self.angleToFlag<118):
            self.log("Right10");
            self.right10()
        elif (self.angleToFlag>-50 and self.angleToFlag<-10):
            self.log("Right30");
            self.right30()
        elif (self.angleToFlag>-10 and self.angleToFlag<0):
            self.log("Right60");
            self.right60()
        elif (self.angleToFlag>0 and self.angleToFlag<10):
            self.log("Left10");
            self.left60()
        elif (self.angleToFlag>10 and self.angleToFlag<50):
            self.log("Left30");
            self.left30()
        else:
            self.log("enter positionadj")
            self.stopRight()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="stopRight" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Output name="right30" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="left30" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                <Output name="left10" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" />
                                                <Output name="left60" type="1" type_size="1" nature="1" inner="0" tooltip="" id="9" />
                                                <Output name="right60" type="1" type_size="1" nature="1" inner="0" tooltip="" id="10" />
                                                <Output name="right10" type="1" type_size="1" nature="1" inner="0" tooltip="" id="11" />
                                            </Box>
                                            <Box name="Stand Up" id="12" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="2172" y="483">
                                                <bitmap>media/images/box/movement/stand.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="StandUpBehavior">
                                                        <BehaviorKeyframe name="DetectRobotPose" index="1">
                                                            <Diagram>
                                                                <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                                    <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                                        <Choice value="Crouch" />
                                                                        <Choice value="LyingBack" />
                                                                        <Choice value="LyingBelly" />
                                                                        <Choice value="Sit" />
                                                                        <Choice value="SitRelax" />
                                                                        <Choice value="StandInit" />
                                                                        <Choice value="Stand" />
                                                                        <Choice value="StandZero" />
                                                                    </Parameter>
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                                    <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                                    <Resource name="All motors" type="Lock" timeout="0" />
                                                                    <Resource name="Stiffness" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Stand Up (1)" id="14" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="2178" y="816">
                                                <bitmap>media/images/box/movement/stand.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="StandUpBehavior">
                                                        <BehaviorKeyframe name="DetectRobotPose" index="1">
                                                            <Diagram>
                                                                <Link inputowner="0" indexofinput="4" outputowner="0" indexofoutput="2" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="findball" id="3" localization="8" tooltip="Enter description here" x="256" y="410">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="search" id="15" localization="8" tooltip="" x="246" y="88">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="70.7107">
                                                                                    <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="921" y="113">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):
        self.motion.setMoveArmsEnabled(False, False)
        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.2, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                        <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                        <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                        <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                        <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.075" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                        <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                        <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                    </Box>
                                                                                    <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                        <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                        <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                        <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="94.3874">
                                                                                                        <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="597" y="364">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="272" y="168">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                            <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                            <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-0.0902951" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="20.9158" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="0.788627" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-11.5162" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="39.9004" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-36.5654" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="714" y="683">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="540" y="0">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                        <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                        <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="778" y="243">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.46875" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="338" y="511">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="switch camera" id="8" localization="8" tooltip="" x="203" y="63">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                    </Box>
                                                                                    <Box name="Insert Data (1)" id="4" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="62" y="268">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.3012)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                    <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="636" y="138">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="3" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="15" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="naomark" id="20" localization="8" tooltip="Enter description here" x="604" y="435">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Input name="LandmarkDetected" type="0" type_size="1" nature="4" stm_value_name="LandmarkDetected" inner="1" tooltip="LandmarkDetected desc" id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="NoNaoMark" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="findNaoMark" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="114" y="20">
                                                                    <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.kCameraSelectID = 18
        self.cameraModule = ALProxy( "ALVideoDevice" )

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 1 )
        self.onReady()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                    <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                    <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                                    <Resource name="Camera setting" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="195" y="192">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if len(p) != 0 :
            #self.Value.append(p)
            markInfoArray = p[1]
            for markInfo in markInfoArray:
                self.log(markInfo[1]);
                if (markInfo[1][0] == 64) :
                    moreInfo = markInfo[0]
                    self.Value.append(moreInfo)
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="TrackNaoMark" id="4" localization="8" tooltip="Enter tooltip here" x="331" y="192">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!= None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            #p= [balls[0][1],balls[0][2]]
            p=[balls[1],balls[2]]
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                </Box>
                                                                <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="37" y="191">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                    <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="562" y="336">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="4" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="HeadMove (1)" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="34">
                                                                    <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                    <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Output name="find" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="74.9154">
                                                                                    <Box name="headlow" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="443" y="121">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="34">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="34" value="-0.0902951" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="34" value="20.9158" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="headup" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="444" y="223">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="44">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="44" value="0.788627" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="44" value="-11.5162" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="turnleft" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="446" y="320">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="104">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="104" value="90.8776" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="104" value="-0.705531" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="turnright" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="448" y="420">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="137">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="137" value="-90.7067" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="137" value="0.964409" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="66" y="236">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(5)
            if self.counter2 == 2:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                    </Box>
                                                                                    <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="436" y="13">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)


            if angleHead[0] < -0.7 and angles[0] < 0:   #-40  0
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:   #40  0
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:   #14.3 0
                angles[1] = 0


            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
            self.find()
        self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="find" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                    </Box>
                                                                                    <Box name="Counter-find" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="681" y="187">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="15" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="5" indexofoutput="5" />
                                                                                    <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                                    <Link inputowner="0" indexofinput="7" outputowner="7" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="10" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="3" indexofinput="3" outputowner="4" indexofoutput="5" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="7" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="5" />
                                                                <Link inputowner="3" indexofinput="4" outputowner="7" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="Wait" id="17" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="1308" y="309">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Wait (1)" id="18" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="1330" y="878">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="naomark (1)" id="15" localization="8" tooltip="Enter description here" x="1520" y="270">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Input name="LandmarkDetected" type="0" type_size="1" nature="4" stm_value_name="LandmarkDetected" inner="1" tooltip="LandmarkDetected desc" id="3" />
                                                <Output name="find" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="NoNaoMark" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="findNaoMark" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="114" y="20">
                                                                    <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.kCameraSelectID = 18
        self.cameraModule = ALProxy( "ALVideoDevice" )

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 1 )
        self.onReady()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                    <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                    <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                                    <Resource name="Camera setting" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="195" y="192">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if len(p) != 0 :
            #self.Value.append(p)
            markInfoArray = p[1]
            for markInfo in markInfoArray:
                self.log(markInfo[1]);
                if (markInfo[1][0] == 64) :
                    moreInfo = markInfo[0]
                    self.Value.append(moreInfo)
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="TrackNaoMark" id="4" localization="8" tooltip="Enter tooltip here" x="331" y="192">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!= None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            #p= [balls[0][1],balls[0][2]]
            p=[balls[1],balls[2]]
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                </Box>
                                                                <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="37" y="191">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                    <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="478" y="199">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="HeadMove (1)" id="3" localization="8" tooltip="Enter tooltip here" x="491" y="44">
                                                                    <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                    <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Output name="find" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="74.9154">
                                                                                    <Box name="headlow" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="443" y="121">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="34">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="34" value="-0.0902951" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="34" value="20.9158" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="headup" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="537" y="224">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="44">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="44" value="0.788627" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="44" value="-11.5162" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="turnleft" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="467" y="318">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="114">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="114" value="90.8776" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="114" value="-0.705531" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="turnright" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="448" y="420">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="137">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="137" value="-90.7067" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="137" value="0.964409" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="66" y="236">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(5)
            if self.counter2 == 2:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                    </Box>
                                                                                    <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="436" y="13">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            '''
            if angleHead[0] < -0.7 and angles[0] < 0:   #-40  0
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:   #40  0
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:   #14.3 0
                angles[1] = 0
            '''

            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
            self.find()
        self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="find" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                    </Box>
                                                                                    <Box name="Counter-find" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="681" y="187">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="15" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="5" indexofoutput="5" />
                                                                                    <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                                    <Link inputowner="0" indexofinput="7" outputowner="7" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="10" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="3" indexofinput="3" outputowner="4" indexofoutput="5" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="4" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="7" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="naomark (2)" id="19" localization="8" tooltip="Enter description here" x="1531" y="775">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Input name="LandmarkDetected" type="0" type_size="1" nature="4" stm_value_name="LandmarkDetected" inner="1" tooltip="LandmarkDetected desc" id="3" />
                                                <Output name="find" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="NoNaoMark" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="findNaoMark" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="114" y="20">
                                                                    <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.kCameraSelectID = 18
        self.cameraModule = ALProxy( "ALVideoDevice" )

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 1 )
        self.onReady()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                    <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                    <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                                    <Resource name="Camera setting" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="195" y="192">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if len(p) != 0 :
            #self.Value.append(p)
            markInfoArray = p[1]
            for markInfo in markInfoArray:
                self.log(markInfo[1]);
                if (markInfo[1][0] == 64) :
                    moreInfo = markInfo[0]
                    self.Value.append(moreInfo)
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="TrackNaoMark" id="4" localization="8" tooltip="Enter tooltip here" x="331" y="192">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!= None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            #p= [balls[0][1],balls[0][2]]
            p=[balls[1],balls[2]]
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                </Box>
                                                                <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="37" y="191">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                    <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="478" y="199">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="HeadMove (1)" id="3" localization="8" tooltip="Enter tooltip here" x="491" y="44">
                                                                    <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                    <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Output name="find" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="74.9154">
                                                                                    <Box name="headlow" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="443" y="121">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="34">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="34" value="-0.0902951" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="34" value="20.9158" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="headup" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="444" y="223">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="44">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="44" value="0.788627" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="44" value="-11.5162" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="turnleft" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="446" y="320">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="114">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="114" value="90.8776" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="114" value="-0.705531" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="turnright" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="448" y="420">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="137">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="137" value="-90.7067" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="137" value="0.964409" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="74" y="238">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(5)
            if self.counter2 == 2:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                    </Box>
                                                                                    <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="436" y="13">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            '''
            if angleHead[0] < -0.7 and angles[0] < 0:   #-40  0
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:   #40  0
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:   #14.3 0
                angles[1] = 0
            '''

            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
            self.find()
        self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="find" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                    </Box>
                                                                                    <Box name="Counter-find" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="681" y="187">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="15" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="5" indexofoutput="5" />
                                                                                    <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                                    <Link inputowner="0" indexofinput="7" outputowner="7" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="10" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="3" indexofinput="3" outputowner="4" indexofoutput="5" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="4" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="7" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="findballleft" id="1" localization="8" tooltip="Enter description here" x="815" y="1202">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Input name="SonarLateralRightDetected" type="0" type_size="1" nature="4" stm_value_name="SonarLateralRightDetected" inner="1" tooltip="SonarLateralRightDetected desc" id="3" />
                                                <Input name="SonarMiddleDetected" type="0" type_size="1" nature="4" stm_value_name="SonarMiddleDetected" inner="1" tooltip="SonarMiddleDetected desc" id="4" />
                                                <Input name="SonarLateralLeftDetected" type="0" type_size="1" nature="4" stm_value_name="SonarLateralLeftDetected" inner="1" tooltip="SonarLateralLeftDetected desc" id="5" />
                                                <Input name="SonarLeftDetected" type="0" type_size="1" nature="4" stm_value_name="SonarLeftDetected" inner="1" tooltip="SonarLeftDetected desc" id="6" />
                                                <Input name="SonarRightDetected" type="0" type_size="1" nature="4" stm_value_name="SonarRightDetected" inner="1" tooltip="SonarRightDetected desc" id="7" />
                                                <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="606" y="71">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="search" id="15" localization="8" tooltip="" x="194" y="63">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                        <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                        <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="745" y="62">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.2, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                        <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                        <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                        <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                        <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.075" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                        <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                        <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                    </Box>
                                                                                    <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                        <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                        <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                        <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="94.3874">
                                                                                                        <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                            <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                            <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="657" y="293">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-0.0902951" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="20.9158" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="0.788627" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-11.5162" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="39.9004" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-36.5654" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="807" y="597">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="575" y="63">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                        <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                        <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="445" y="414">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                    </Box>
                                                                                    <Box name="Move To (2)" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="913" y="305">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        #if (abs(positionError.x) < self.positionErrorThresholdPos
            #and abs(positionError.y) < self.positionErrorThresholdPos
            #and abs(positionError.theta) < self.positionErrorThresholdAng):
        self.onArrivedAtDestination()
        #else:
            #self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="-85" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="8" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="139" y="290">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.3012)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Move To (3)" id="11" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="1098" y="315">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                    <Link inputowner="11" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="rightdec" id="2" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="158" y="243">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0.207246" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="rightdec (1)" id="3" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="190" y="387">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0.207246" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="8" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="15" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="findballRight" id="21" localization="8" tooltip="Enter description here" x="644" y="961">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="636" y="138">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="search (1)" id="2" localization="8" tooltip="" x="178" y="139">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="92" y="431">
                                                                                        <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                        <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="745" y="62">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.2, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                        <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                        <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                        <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                        <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.075" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                        <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                        <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                    </Box>
                                                                                    <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                        <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                        <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                        <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="94.3874">
                                                                                                        <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                            <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                            <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="657" y="293">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-0.0902951" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="20.9158" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="0.788627" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-11.5162" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="39.9004" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-36.5654" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="801" y="591">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="575" y="63">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                        <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                        <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="445" y="414">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                    </Box>
                                                                                    <Box name="Move To (2)" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="906" y="284">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        #if (abs(positionError.x) < self.positionErrorThresholdPos
            #and abs(positionError.y) < self.positionErrorThresholdPos
            #and abs(positionError.theta) < self.positionErrorThresholdAng):
        self.onArrivedAtDestination()
        #else:
            #self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="85" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="8" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="52" y="301">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.3012)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Move To (3)" id="11" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="1098" y="315">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                    <Link inputowner="11" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="3" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="move right" id="6" localization="8" tooltip="" x="1088" y="585">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Move To" id="1" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="359" y="112">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="-0.15" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Move To (1)" id="5" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="200" y="95">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.15" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="646" y="317">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("move left around 30 degrees")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[move left around 30 degrees]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                </Box>
                                                                <Box name="search" id="15" localization="8" tooltip="" x="580" y="109">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                        <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                        <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="948" y="135">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.2, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                        <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                        <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                        <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                        <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.08" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                        <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                        <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                    </Box>
                                                                                    <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                        <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                        <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                        <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="94.3874">
                                                                                                        <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                            <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                            <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="653" y="241">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-0.0902951" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="20.9158" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="642" y="361">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="0.788627" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-11.5162" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="680" y="480">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="39.9004" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-36.5654" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="1024" y="301">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="651" y="61">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                        <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                        <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="793" y="252">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.5512)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="724" y="584">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="ifNoMark" id="16" localization="8" tooltip="Enter description here" x="601" y="172">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Move To (1)" id="8" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="124" y="51">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Move To (2)" id="10" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="305" y="67">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="-0.5" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="search" id="15" localization="8" tooltip="" x="466" y="67">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                        <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                        <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="948" y="135">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.2, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                        <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                        <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                        <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                        <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.08" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                        <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                        <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                    </Box>
                                                                                    <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                        <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                        <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                        <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="94.3874">
                                                                                                        <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                            <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                            <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="653" y="241">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-0.0902951" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="20.9158" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="642" y="361">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="0.788627" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-11.5162" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="680" y="480">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="39.9004" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-36.5654" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="1024" y="301">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="651" y="61">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                        <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                        <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="793" y="252">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.5512)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="724" y="584">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="move right60" id="7" localization="8" tooltip="" x="1123" y="980">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Move To" id="1" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="359" y="112">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="-0.25" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Move To (1)" id="5" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="200" y="95">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.15" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="646" y="317">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("move left around 30 degrees")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[move left around 30 degrees]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                </Box>
                                                                <Box name="search" id="15" localization="8" tooltip="" x="580" y="109">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                        <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                        <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="948" y="135">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.2, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                        <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                        <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                        <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                        <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.08" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                        <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                        <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                    </Box>
                                                                                    <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                        <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                        <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                        <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="94.3874">
                                                                                                        <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                            <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                            <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="653" y="241">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-0.0902951" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="20.9158" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="642" y="361">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="0.788627" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-11.5162" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="680" y="480">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="39.9004" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-36.5654" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="1024" y="301">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="651" y="61">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                        <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                        <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="793" y="252">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.5512)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="724" y="584">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="move right10" id="8" localization="8" tooltip="" x="1104" y="800">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Move To" id="1" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="359" y="112">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Move To (1)" id="5" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="200" y="95">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.2" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="646" y="317">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("move left around 30 degrees")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[move left around 30 degrees]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                </Box>
                                                                <Box name="search" id="15" localization="8" tooltip="" x="580" y="109">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                        <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                        <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="948" y="135">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.2, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                        <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                        <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                        <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                        <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.08" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                        <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                        <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                    </Box>
                                                                                    <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                        <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                        <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                        <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="94.3874">
                                                                                                        <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                            <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                            <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="653" y="241">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-0.0902951" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="20.9158" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="642" y="361">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="0.788627" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-11.5162" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="680" y="480">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="39.9004" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-36.5654" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="1024" y="301">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="651" y="61">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                        <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                        <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="793" y="252">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.5512)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="724" y="584">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="move left10" id="10" localization="8" tooltip="" x="1078" y="255">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram scale="84.0896">
                                                                <Box name="Move To" id="1" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="381" y="76">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Move To (1)" id="5" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="152" y="74">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.2" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="646" y="317">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("move left around 30 degrees")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[move left around 30 degrees]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                </Box>
                                                                <Box name="search" id="15" localization="8" tooltip="" x="651" y="77">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                        <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                        <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="745" y="62">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.2, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                        <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                        <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                        <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                        <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.08" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                        <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                        <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                    </Box>
                                                                                    <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                        <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                        <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                        <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="94.3874">
                                                                                                        <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                            <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                            <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-0.0902951" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="20.9158" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="0.788627" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-11.5162" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="39.9004" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-36.5654" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="837" y="461">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="575" y="63">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                        <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                        <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="778" y="243">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.5512)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="445" y="414">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="move left60" id="22" localization="8" tooltip="" x="1087" y="412">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram scale="84.0896">
                                                                <Box name="Move To" id="1" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="381" y="76">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0.25" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Move To (1)" id="5" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="152" y="74">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.15" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="646" y="317">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("move left around 30 degrees")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[move left around 30 degrees]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                </Box>
                                                                <Box name="search" id="15" localization="8" tooltip="" x="651" y="77">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                        <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                        <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="745" y="62">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.2, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                        <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                        <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                        <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                        <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.08" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                        <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                        <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                    </Box>
                                                                                    <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                        <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                        <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                        <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="94.3874">
                                                                                                        <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                            <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                            <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-0.0902951" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="20.9158" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="0.788627" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-11.5162" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="39.9004" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-36.5654" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="2.54646" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="837" y="461">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="575" y="63">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                        <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                        <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="778" y="243">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                        <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                        <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.5512)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="445" y="414">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="position adj (1)" id="23" localization="8" tooltip="" x="1761" y="824">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        import almath
        import time
        #self.onStopped() #activate the output of the box

        #while(True):
        self.angleToFlag = self.memory.getData("Device/SubDeviceList/HeadYaw/Position/Sensor/Value")
        self.angleToFlag = self.angleToFlag / almath.PI * 180
        self.logger.info(self.angleToFlag)

        if (self.angleToFlag>-118 and self.angleToFlag<-78) or (self.angleToFlag>50 and self.angleToFlag<60):
            self.log("Left10");
            self.left10()
        elif (self.angleToFlag>-78 and self.angleToFlag<-60):
            self.onStopped()
        elif (self.angleToFlag>-60 and self.angleToFlag<-50) or (self.angleToFlag>78 and self.angleToFlag<118):
            self.log("Right10");
            self.right10()
        elif (self.angleToFlag>-50 and self.angleToFlag<-10):
            self.log("Right30");
            self.right30()
        elif (self.angleToFlag>-10 and self.angleToFlag<0):
            self.log("Right60");
            self.right60()
        elif (self.angleToFlag>0 and self.angleToFlag<10):
            self.log("Left10");
            self.left60()
        elif (self.angleToFlag>10 and self.angleToFlag<50):
            self.log("Left30");
            self.left30()
        else:
            self.log("enter positionadj")
            self.stopRight()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Output name="right30" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="left30" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Output name="stopRight" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                <Output name="left10" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" />
                                                <Output name="left60" type="1" type_size="1" nature="1" inner="0" tooltip="" id="9" />
                                                <Output name="right60" type="1" type_size="1" nature="1" inner="0" tooltip="" id="10" />
                                                <Output name="right10" type="1" type_size="1" nature="1" inner="0" tooltip="" id="11" />
                                            </Box>
                                            <Box name="position adj (2)" id="24" localization="8" tooltip="" x="1813" y="202">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        import almath
        import time
        #self.onStopped() #activate the output of the box

        #while(True):
        self.angleToFlag = self.memory.getData("Device/SubDeviceList/HeadYaw/Position/Sensor/Value")
        self.angleToFlag = self.angleToFlag / almath.PI * 180
        self.logger.info(self.angleToFlag)

        if (self.angleToFlag>-118 and self.angleToFlag<-78) or (self.angleToFlag>50 and self.angleToFlag<60):
            self.log("Left10");
            self.left10()
        elif (self.angleToFlag>-78 and self.angleToFlag<-60):
            self.onStopped()
        elif (self.angleToFlag>-60 and self.angleToFlag<-50) or (self.angleToFlag>78 and self.angleToFlag<118):
            self.log("Right10");
            self.right10()
        elif (self.angleToFlag>-50 and self.angleToFlag<-10):
            self.log("Right30");
            self.right30()
        elif (self.angleToFlag>-10 and self.angleToFlag<0):
            self.log("Right60");
            self.right60()
        elif (self.angleToFlag>0 and self.angleToFlag<10):
            self.log("Left10");
            self.left60()
        elif (self.angleToFlag>10 and self.angleToFlag<50):
            self.log("Left30");
            self.left30()
        else:
            self.log("enter positionadj")
            self.stopRight()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Output name="right30" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="left30" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Output name="stopRight" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                <Output name="left10" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" />
                                                <Output name="left60" type="1" type_size="1" nature="1" inner="0" tooltip="" id="9" />
                                                <Output name="right60" type="1" type_size="1" nature="1" inner="0" tooltip="" id="10" />
                                                <Output name="right10" type="1" type_size="1" nature="1" inner="0" tooltip="" id="11" />
                                            </Box>
                                            <Box name="right +" id="27" localization="8" tooltip="" x="2450" y="439">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="shoot" id="6" localization="8" tooltip="" x="382" y="95">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="87">
                                                                        <ActuatorList model="nao">
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="-22.5858" />
                                                                                <Key frame="87" value="-22.5858" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="-68.9974" />
                                                                                <Key frame="87" value="-68.9974" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="58" value="0.2928" />
                                                                                <Key frame="87" value="0.2928" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="86.2194" />
                                                                                <Key frame="87" value="86.2194" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="3.60116" />
                                                                                <Key frame="87" value="3.60116" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="4.04062" />
                                                                                <Key frame="87" value="4.04062" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="67.0638" />
                                                                                <Key frame="87" value="67.8548" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="90.5261" />
                                                                                <Key frame="87" value="90.8776" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="58" value="0.14" />
                                                                                <Key frame="87" value="0.2392" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="27.0731" />
                                                                                <Key frame="87" value="45.6" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="-8.35212" />
                                                                                <Key frame="87" value="12.5661" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="3.60116" />
                                                                                <Key frame="87" value="-18.4597" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="shoot (1)" id="3" localization="8" tooltip="" x="411" y="233">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="87">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-44.1192" />
                                                                                <Key frame="81" value="-45.7892" />
                                                                                <Key frame="87" value="-43.6798" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-73.0404" />
                                                                                <Key frame="81" value="-71.9857" />
                                                                                <Key frame="87" value="-72.4252" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="55" value="0.3012" />
                                                                                <Key frame="81" value="0.3012" />
                                                                                <Key frame="87" value="0.3032" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="115.487" />
                                                                                <Key frame="81" value="118.124" />
                                                                                <Key frame="87" value="114.081" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="23.7284" />
                                                                                <Key frame="81" value="22.4979" />
                                                                                <Key frame="87" value="22.2342" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-8.79157" />
                                                                                <Key frame="81" value="-8.70368" />
                                                                                <Key frame="87" value="-9.84628" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="74.183" />
                                                                                <Key frame="81" value="77.1713" />
                                                                                <Key frame="87" value="72.0736" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="83.0553" />
                                                                                <Key frame="81" value="82.7916" />
                                                                                <Key frame="87" value="85.5163" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="55" value="0.2272" />
                                                                                <Key frame="81" value="0.12" />
                                                                                <Key frame="87" value="0.1152" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="51.7706" />
                                                                                <Key frame="81" value="46.585" />
                                                                                <Key frame="87" value="49.837" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="0.964409" />
                                                                                <Key frame="81" value="-19.2507" />
                                                                                <Key frame="87" value="9.92936" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-21.0085" />
                                                                                <Key frame="81" value="-10.0221" />
                                                                                <Key frame="87" value="49.3049" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="4.30429" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-7.29261" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-34.6269" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="4.22121" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-15.2029" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="16.2576" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="4.04543" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="6.85796" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-34.9833" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-1.40386" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-15.2029" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="15.9987" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-7.73688" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="0.0854867" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="finish" id="1" localization="8" tooltip="" x="553" y="739">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="104">
                                                                        <ActuatorList model="nao">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-8.08845" />
                                                                                <Key frame="84" value="-8.08845" />
                                                                                <Key frame="104" value="-8.08845" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="0.612832" />
                                                                                <Key frame="84" value="0.612832" />
                                                                                <Key frame="104" value="0.612832" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="5.09532" />
                                                                                <Key frame="84" value="5.09532" />
                                                                                <Key frame="104" value="5.09532" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-7.46839" />
                                                                                <Key frame="84" value="-7.46839" />
                                                                                <Key frame="104" value="-7.46839" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-22.5858" />
                                                                                <Key frame="84" value="-22.5858" />
                                                                                <Key frame="104" value="-22.5858" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-68.8216" />
                                                                                <Key frame="84" value="-68.8216" />
                                                                                <Key frame="104" value="-68.8216" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="39" value="0.2856" />
                                                                                <Key frame="84" value="0.2856" />
                                                                                <Key frame="104" value="0.2856" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="7.4732" />
                                                                                <Key frame="84" value="7.4732" />
                                                                                <Key frame="104" value="7.4732" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="5.89115" />
                                                                                <Key frame="84" value="5.89115" />
                                                                                <Key frame="104" value="5.89115" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-9.66569" />
                                                                                <Key frame="84" value="-9.66569" />
                                                                                <Key frame="104" value="-9.66569" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-5.01224" />
                                                                                <Key frame="84" value="-5.01224" />
                                                                                <Key frame="104" value="-5.01224" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="85.692" />
                                                                                <Key frame="84" value="85.692" />
                                                                                <Key frame="104" value="85.692" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="10.193" />
                                                                                <Key frame="84" value="10.193" />
                                                                                <Key frame="104" value="10.193" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="4.04062" />
                                                                                <Key frame="84" value="4.04062" />
                                                                                <Key frame="104" value="4.04062" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="5.01224" />
                                                                                <Key frame="84" value="5.01224" />
                                                                                <Key frame="104" value="5.01224" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="7.38531" />
                                                                                <Key frame="84" value="7.38531" />
                                                                                <Key frame="104" value="7.38531" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="73.2162" />
                                                                                <Key frame="84" value="73.2162" />
                                                                                <Key frame="104" value="73.2162" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="80.3306" />
                                                                                <Key frame="84" value="80.3306" />
                                                                                <Key frame="104" value="80.3306" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="39" value="0.2892" />
                                                                                <Key frame="84" value="0.2892" />
                                                                                <Key frame="104" value="0.96" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="7.46839" />
                                                                                <Key frame="84" value="7.46839" />
                                                                                <Key frame="104" value="7.46839" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-5.97423" />
                                                                                <Key frame="84" value="-5.97423" />
                                                                                <Key frame="104" value="-5.97423" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-9.66569" />
                                                                                <Key frame="84" value="-9.66569" />
                                                                                <Key frame="104" value="-9.66569" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-4.83163" />
                                                                                <Key frame="84" value="-4.83163" />
                                                                                <Key frame="104" value="-4.83163" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="50.7159" />
                                                                                <Key frame="84" value="50.7159" />
                                                                                <Key frame="104" value="50.7159" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-14.0651" />
                                                                                <Key frame="84" value="-14.0651" />
                                                                                <Key frame="104" value="-14.0651" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="25.7499" />
                                                                                <Key frame="84" value="25.7499" />
                                                                                <Key frame="104" value="25.7499" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Stand Up" id="2" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="954" y="238">
                                                                    <bitmap>media/images/box/movement/stand.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                                                                    <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                                                                    <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="StandUpBehavior">
                                                                            <BehaviorKeyframe name="DetectRobotPose" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                                                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                                                            <Choice value="Crouch" />
                                                                                            <Choice value="LyingBack" />
                                                                                            <Choice value="LyingBelly" />
                                                                                            <Choice value="Sit" />
                                                                                            <Choice value="SitRelax" />
                                                                                            <Choice value="StandInit" />
                                                                                            <Choice value="Stand" />
                                                                                            <Choice value="StandZero" />
                                                                                        </Parameter>
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                                                        <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                                                        <Resource name="All motors" type="Lock" timeout="0" />
                                                                                        <Resource name="Stiffness" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="All motors" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="shootbig" id="4" localization="8" tooltip="" x="239" y="359">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="87">
                                                                        <ActuatorList model="nao">
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="-22.5858" />
                                                                                <Key frame="87" value="-22.5858" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="-68.9974" />
                                                                                <Key frame="87" value="-68.9974" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="58" value="0.2928" />
                                                                                <Key frame="87" value="0.2928" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="86.2194" />
                                                                                <Key frame="87" value="86.2194" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="3.60116" />
                                                                                <Key frame="87" value="3.60116" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="4.04062" />
                                                                                <Key frame="87" value="4.04062" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="67.0638" />
                                                                                <Key frame="87" value="67.8548" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="90.5261" />
                                                                                <Key frame="87" value="90.8776" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="58" value="0.14" />
                                                                                <Key frame="87" value="0.2392" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="27.0731" />
                                                                                <Key frame="87" value="45.6" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="-8.35212" />
                                                                                <Key frame="87" value="12.5661" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="3.60116" />
                                                                                <Key frame="87" value="-18.4597" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="shoot (2)" id="5" localization="8" tooltip="" x="473" y="353">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="94">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-45.7892" />
                                                                                <Key frame="83" value="-45.7892" />
                                                                                <Key frame="94" value="-38.4063" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-71.9857" />
                                                                                <Key frame="83" value="-71.9857" />
                                                                                <Key frame="94" value="-71.9857" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="54" value="0.3012" />
                                                                                <Key frame="83" value="0.3012" />
                                                                                <Key frame="94" value="0.3012" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="118.124" />
                                                                                <Key frame="83" value="118.124" />
                                                                                <Key frame="94" value="118.827" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="22.4979" />
                                                                                <Key frame="83" value="22.4979" />
                                                                                <Key frame="94" value="32.5175" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-8.70368" />
                                                                                <Key frame="83" value="-8.70368" />
                                                                                <Key frame="94" value="-23.8211" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="77.1713" />
                                                                                <Key frame="83" value="77.1713" />
                                                                                <Key frame="94" value="63.8997" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="82.7916" />
                                                                                <Key frame="83" value="82.7916" />
                                                                                <Key frame="94" value="90.3503" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="54" value="0.13" />
                                                                                <Key frame="83" value="0.12" />
                                                                                <Key frame="94" value="0.07" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="46.585" />
                                                                                <Key frame="83" value="46.585" />
                                                                                <Key frame="94" value="43.8" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-19.2507" />
                                                                                <Key frame="83" value="-19.2507" />
                                                                                <Key frame="94" value="18" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-10.0221" />
                                                                                <Key frame="83" value="-10.0221" />
                                                                                <Key frame="94" value="34.2" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="4.56796" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-7.46839" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-33.9238" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="4.3091" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-14.9392" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="16.3455" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="4.13332" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="6.85796" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-34.6318" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-1.75543" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-14.9392" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="15.9108" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Move To" id="7" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="98" y="136">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        self.log("startShooting")
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0.03" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Stand Up (1)" id="8" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="265" y="212">
                                                                    <bitmap>media/images/box/movement/stand.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                                                                    <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                                                                    <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="StandUpBehavior">
                                                                            <BehaviorKeyframe name="DetectRobotPose" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                                                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                                                            <Choice value="Crouch" />
                                                                                            <Choice value="LyingBack" />
                                                                                            <Choice value="LyingBelly" />
                                                                                            <Choice value="Sit" />
                                                                                            <Choice value="SitRelax" />
                                                                                            <Choice value="StandInit" />
                                                                                            <Choice value="Stand" />
                                                                                            <Choice value="StandZero" />
                                                                                        </Parameter>
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                                                        <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                                                        <Resource name="All motors" type="Lock" timeout="0" />
                                                                                        <Resource name="Stiffness" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="All motors" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="right (1)" id="4" localization="8" tooltip="" x="332" y="580">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="shoot" id="6" localization="8" tooltip="" x="382" y="95">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="87">
                                                                        <ActuatorList model="nao">
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="-22.5858" />
                                                                                <Key frame="87" value="-22.5858" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="-68.9974" />
                                                                                <Key frame="87" value="-68.9974" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="58" value="0.2928" />
                                                                                <Key frame="87" value="0.2928" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="86.2194" />
                                                                                <Key frame="87" value="86.2194" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="3.60116" />
                                                                                <Key frame="87" value="3.60116" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="4.04062" />
                                                                                <Key frame="87" value="4.04062" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="67.0638" />
                                                                                <Key frame="87" value="67.8548" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="90.5261" />
                                                                                <Key frame="87" value="90.8776" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="58" value="0.14" />
                                                                                <Key frame="87" value="0.2392" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="27.0731" />
                                                                                <Key frame="87" value="45.6" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="-8.35212" />
                                                                                <Key frame="87" value="12.5661" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="3.60116" />
                                                                                <Key frame="87" value="-18.4597" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="shoot (1)" id="3" localization="8" tooltip="" x="411" y="233">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="89">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-44.295" />
                                                                                <Key frame="81" value="-43.6798" />
                                                                                <Key frame="89" value="-45.7892" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-72.601" />
                                                                                <Key frame="81" value="-72.4252" />
                                                                                <Key frame="89" value="-71.9857" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="54" value="0.3032" />
                                                                                <Key frame="81" value="0.3032" />
                                                                                <Key frame="89" value="0.3012" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="115.927" />
                                                                                <Key frame="81" value="114.081" />
                                                                                <Key frame="89" value="118.124" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="23.992" />
                                                                                <Key frame="81" value="22.2342" />
                                                                                <Key frame="89" value="22.4979" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-9.40682" />
                                                                                <Key frame="81" value="-9.84628" />
                                                                                <Key frame="89" value="-8.70368" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="75.5014" />
                                                                                <Key frame="81" value="72.0736" />
                                                                                <Key frame="89" value="77.1713" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="83.5826" />
                                                                                <Key frame="81" value="85.5163" />
                                                                                <Key frame="89" value="82.7916" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="54" value="0.122" />
                                                                                <Key frame="81" value="0.1152" />
                                                                                <Key frame="89" value="0.12" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="47.8155" />
                                                                                <Key frame="81" value="49.837" />
                                                                                <Key frame="89" value="46.585" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="6.4137" />
                                                                                <Key frame="81" value="9.92936" />
                                                                                <Key frame="89" value="-19.2507" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="1.40386" />
                                                                                <Key frame="81" value="49.3049" />
                                                                                <Key frame="89" value="-10.0221" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="4.48007" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-7.64417" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-34.4511" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="4.39699" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-15.2029" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="16.1697" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="4.3091" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="7.03374" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-34.7196" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-1.40386" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-15.2029" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="15.9108" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-8.79157" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-0.353968" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="finish" id="1" localization="8" tooltip="" x="553" y="739">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="104">
                                                                        <ActuatorList model="nao">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-8.08845" />
                                                                                <Key frame="84" value="-8.08845" />
                                                                                <Key frame="104" value="-8.08845" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="0.612832" />
                                                                                <Key frame="84" value="0.612832" />
                                                                                <Key frame="104" value="0.612832" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="5.09532" />
                                                                                <Key frame="84" value="5.09532" />
                                                                                <Key frame="104" value="5.09532" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-7.46839" />
                                                                                <Key frame="84" value="-7.46839" />
                                                                                <Key frame="104" value="-7.46839" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-22.5858" />
                                                                                <Key frame="84" value="-22.5858" />
                                                                                <Key frame="104" value="-22.5858" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-68.8216" />
                                                                                <Key frame="84" value="-68.8216" />
                                                                                <Key frame="104" value="-68.8216" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="39" value="0.2856" />
                                                                                <Key frame="84" value="0.2856" />
                                                                                <Key frame="104" value="0.2856" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="7.4732" />
                                                                                <Key frame="84" value="7.4732" />
                                                                                <Key frame="104" value="7.4732" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="5.89115" />
                                                                                <Key frame="84" value="5.89115" />
                                                                                <Key frame="104" value="5.89115" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-9.66569" />
                                                                                <Key frame="84" value="-9.66569" />
                                                                                <Key frame="104" value="-9.66569" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-5.01224" />
                                                                                <Key frame="84" value="-5.01224" />
                                                                                <Key frame="104" value="-5.01224" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="85.692" />
                                                                                <Key frame="84" value="85.692" />
                                                                                <Key frame="104" value="85.692" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="10.193" />
                                                                                <Key frame="84" value="10.193" />
                                                                                <Key frame="104" value="10.193" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="4.04062" />
                                                                                <Key frame="84" value="4.04062" />
                                                                                <Key frame="104" value="4.04062" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="5.01224" />
                                                                                <Key frame="84" value="5.01224" />
                                                                                <Key frame="104" value="5.01224" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="7.38531" />
                                                                                <Key frame="84" value="7.38531" />
                                                                                <Key frame="104" value="7.38531" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="73.2162" />
                                                                                <Key frame="84" value="73.2162" />
                                                                                <Key frame="104" value="73.2162" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="80.3306" />
                                                                                <Key frame="84" value="80.3306" />
                                                                                <Key frame="104" value="80.3306" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="39" value="0.2892" />
                                                                                <Key frame="84" value="0.2892" />
                                                                                <Key frame="104" value="0.96" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="7.46839" />
                                                                                <Key frame="84" value="7.46839" />
                                                                                <Key frame="104" value="7.46839" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-5.97423" />
                                                                                <Key frame="84" value="-5.97423" />
                                                                                <Key frame="104" value="-5.97423" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-9.66569" />
                                                                                <Key frame="84" value="-9.66569" />
                                                                                <Key frame="104" value="-9.66569" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-4.83163" />
                                                                                <Key frame="84" value="-4.83163" />
                                                                                <Key frame="104" value="-4.83163" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="50.7159" />
                                                                                <Key frame="84" value="50.7159" />
                                                                                <Key frame="104" value="50.7159" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="-14.0651" />
                                                                                <Key frame="84" value="-14.0651" />
                                                                                <Key frame="104" value="-14.0651" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="39" value="25.7499" />
                                                                                <Key frame="84" value="25.7499" />
                                                                                <Key frame="104" value="25.7499" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Stand Up" id="2" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="954" y="238">
                                                                    <bitmap>media/images/box/movement/stand.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                                                                    <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                                                                    <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="StandUpBehavior">
                                                                            <BehaviorKeyframe name="DetectRobotPose" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                                                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                                                            <Choice value="Crouch" />
                                                                                            <Choice value="LyingBack" />
                                                                                            <Choice value="LyingBelly" />
                                                                                            <Choice value="Sit" />
                                                                                            <Choice value="SitRelax" />
                                                                                            <Choice value="StandInit" />
                                                                                            <Choice value="Stand" />
                                                                                            <Choice value="StandZero" />
                                                                                        </Parameter>
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                                                        <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                                                        <Resource name="All motors" type="Lock" timeout="0" />
                                                                                        <Resource name="Stiffness" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="All motors" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="shootbig" id="4" localization="8" tooltip="" x="239" y="359">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="87">
                                                                        <ActuatorList model="nao">
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="-22.5858" />
                                                                                <Key frame="87" value="-22.5858" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="-68.9974" />
                                                                                <Key frame="87" value="-68.9974" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="58" value="0.2928" />
                                                                                <Key frame="87" value="0.2928" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="86.2194" />
                                                                                <Key frame="87" value="86.2194" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="3.60116" />
                                                                                <Key frame="87" value="3.60116" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="4.04062" />
                                                                                <Key frame="87" value="4.04062" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="67.0638" />
                                                                                <Key frame="87" value="67.8548" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="90.5261" />
                                                                                <Key frame="87" value="90.8776" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="58" value="0.14" />
                                                                                <Key frame="87" value="0.2392" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="27.0731" />
                                                                                <Key frame="87" value="45.6" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="-8.35212" />
                                                                                <Key frame="87" value="12.5661" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="58" value="3.60116" />
                                                                                <Key frame="87" value="-18.4597" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="shoot (2)" id="5" localization="8" tooltip="" x="473" y="353">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="94">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-45.7892" />
                                                                                <Key frame="83" value="-45.7892" />
                                                                                <Key frame="94" value="-38.4063" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-71.9857" />
                                                                                <Key frame="83" value="-71.9857" />
                                                                                <Key frame="94" value="-71.9857" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="54" value="0.3012" />
                                                                                <Key frame="83" value="0.3012" />
                                                                                <Key frame="94" value="0.3012" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="118.124" />
                                                                                <Key frame="83" value="118.124" />
                                                                                <Key frame="94" value="118.827" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="22.4979" />
                                                                                <Key frame="83" value="22.4979" />
                                                                                <Key frame="94" value="32.5175" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-8.70368" />
                                                                                <Key frame="83" value="-8.70368" />
                                                                                <Key frame="94" value="-23.8211" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="77.1713" />
                                                                                <Key frame="83" value="77.1713" />
                                                                                <Key frame="94" value="63.8997" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="82.7916" />
                                                                                <Key frame="83" value="82.7916" />
                                                                                <Key frame="94" value="90.3503" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="54" value="0.13" />
                                                                                <Key frame="83" value="0.12" />
                                                                                <Key frame="94" value="0.07" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="46.585" />
                                                                                <Key frame="83" value="46.585" />
                                                                                <Key frame="94" value="43.8" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-19.2507" />
                                                                                <Key frame="83" value="-19.2507" />
                                                                                <Key frame="94" value="18" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="54" value="-10.0221" />
                                                                                <Key frame="83" value="-10.0221" />
                                                                                <Key frame="94" value="34.2" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="4.56796" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-7.46839" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-33.9238" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="4.3091" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-14.9392" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="16.3455" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="4.13332" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="6.85796" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-34.6318" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-1.75543" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="-14.9392" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="55" value="15.9108" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="Stand Up (2)" id="5" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="101" y="593">
                                                <bitmap>media/images/box/movement/stand.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="StandUpBehavior">
                                                        <BehaviorKeyframe name="DetectRobotPose" index="1">
                                                            <Diagram>
                                                                <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                                    <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                                        <Choice value="Crouch" />
                                                                        <Choice value="LyingBack" />
                                                                        <Choice value="LyingBelly" />
                                                                        <Choice value="Sit" />
                                                                        <Choice value="SitRelax" />
                                                                        <Choice value="StandInit" />
                                                                        <Choice value="Stand" />
                                                                        <Choice value="StandZero" />
                                                                    </Parameter>
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                                    <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                                    <Resource name="All motors" type="Lock" timeout="0" />
                                                                    <Resource name="Stiffness" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="right" id="11" localization="8" tooltip="" x="2454" y="875">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="shoot (1)" id="3" localization="8" tooltip="" x="571" y="241">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="61">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="-62.8402" />
                                                                                <Key frame="40" value="-26.8046" />
                                                                                <Key frame="61" value="-25.5741" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="-99.4958" />
                                                                                <Key frame="40" value="-99.4958" />
                                                                                <Key frame="61" value="-98.7048" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="25" value="0.9896" />
                                                                                <Key frame="40" value="0.9896" />
                                                                                <Key frame="61" value="0.9896" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="77.4302" />
                                                                                <Key frame="40" value="89.7351" />
                                                                                <Key frame="61" value="88.5925" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="-2.99072" />
                                                                                <Key frame="40" value="-3.60597" />
                                                                                <Key frame="61" value="-4.39699" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="-89.2125" />
                                                                                <Key frame="40" value="-87.5426" />
                                                                                <Key frame="61" value="-88.0699" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="66.4486" />
                                                                                <Key frame="40" value="66.6243" />
                                                                                <Key frame="61" value="71.6" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="95.3601" />
                                                                                <Key frame="40" value="94.2175" />
                                                                                <Key frame="61" value="94.3054" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="25" value="0.25" />
                                                                                <Key frame="40" value="0.25" />
                                                                                <Key frame="61" value="0.25" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="71.0189" />
                                                                                <Key frame="40" value="63.7" />
                                                                                <Key frame="61" value="73.8315" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="12.1267" />
                                                                                <Key frame="40" value="11.3356" />
                                                                                <Key frame="61" value="-3.1665" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="69.52" />
                                                                                <Key frame="40" value="71.4536" />
                                                                                <Key frame="61" value="10" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="-10.6373" />
                                                                                <Key frame="40" value="-10.6373" />
                                                                                <Key frame="61" value="-10.6373" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="0.0854867" />
                                                                                <Key frame="40" value="0.0854867" />
                                                                                <Key frame="61" value="0.0854867" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="-38.0595" />
                                                                                <Key frame="40" value="-38.0595" />
                                                                                <Key frame="61" value="-38.0595" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="0.441859" />
                                                                                <Key frame="40" value="0.441859" />
                                                                                <Key frame="61" value="0.441859" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="-10.6325" />
                                                                                <Key frame="40" value="-10.6325" />
                                                                                <Key frame="61" value="-10.6325" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="-0.788627" />
                                                                                <Key frame="40" value="-0.788627" />
                                                                                <Key frame="61" value="-0.788627" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="0.178186" />
                                                                                <Key frame="40" value="0.178186" />
                                                                                <Key frame="61" value="0.178186" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="48.0744" />
                                                                                <Key frame="40" value="48.0744" />
                                                                                <Key frame="61" value="48.0744" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="-29.1777" />
                                                                                <Key frame="40" value="-29.1777" />
                                                                                <Key frame="61" value="-29.7929" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="0.705531" />
                                                                                <Key frame="40" value="0.705531" />
                                                                                <Key frame="61" value="0.705531" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="-26.4578" />
                                                                                <Key frame="40" value="-26.4578" />
                                                                                <Key frame="61" value="-26.5457" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="-0.173378" />
                                                                                <Key frame="40" value="-0.173378" />
                                                                                <Key frame="61" value="-0.173378" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="0.178186" />
                                                                                <Key frame="40" value="0.178186" />
                                                                                <Key frame="61" value="0.178186" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="25" value="55.4621" />
                                                                                <Key frame="40" value="55.4621" />
                                                                                <Key frame="61" value="55.4621" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Hands" id="6" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="297" y="207">
                                                                    <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                                        <Choice value="Both" />
                                                                        <Choice value="Left" />
                                                                        <Choice value="Right" />
                                                                    </Parameter>
                                                                    <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Close the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                                        <Choice value="Open the hand" />
                                                                        <Choice value="Close the hand" />
                                                                    </Parameter>
                                                                </Box>
                                                                <Box name="Hands (1)" id="1" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="145" y="352">
                                                                    <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                                        <Choice value="Both" />
                                                                        <Choice value="Left" />
                                                                        <Choice value="Right" />
                                                                    </Parameter>
                                                                    <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Open the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                                        <Choice value="Open the hand" />
                                                                        <Choice value="Close the hand" />
                                                                    </Parameter>
                                                                </Box>
                                                                <Box name="recover" id="2" localization="8" tooltip="" x="877" y="339">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="31">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="-10.6373" />
                                                                                <Key frame="31" value="-10.6373" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="0.0854867" />
                                                                                <Key frame="31" value="0.0854867" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="-38.0595" />
                                                                                <Key frame="31" value="-38.0595" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="0.441859" />
                                                                                <Key frame="31" value="0.441859" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="-26.7167" />
                                                                                <Key frame="31" value="-79.6275" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="-98.6169" />
                                                                                <Key frame="31" value="-102.836" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="0.9896" />
                                                                                <Key frame="31" value="0.9896" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="-10.6325" />
                                                                                <Key frame="31" value="-10.6325" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="-0.788627" />
                                                                                <Key frame="31" value="-0.788627" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="0.178186" />
                                                                                <Key frame="31" value="0.178186" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="48.0744" />
                                                                                <Key frame="31" value="48.0744" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="88.8561" />
                                                                                <Key frame="31" value="85.2526" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="-3.78175" />
                                                                                <Key frame="31" value="-8.00056" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="-88.0699" />
                                                                                <Key frame="31" value="-87.7183" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="-29.1777" />
                                                                                <Key frame="31" value="-29.1777" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="0.705531" />
                                                                                <Key frame="31" value="0.705531" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="73.8315" />
                                                                                <Key frame="31" value="73.8315" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="83.7584" />
                                                                                <Key frame="31" value="83.7584" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="0.25" />
                                                                                <Key frame="31" value="0.31" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="-26.4578" />
                                                                                <Key frame="31" value="-26.4578" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="-0.173378" />
                                                                                <Key frame="31" value="-0.173378" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="0.178186" />
                                                                                <Key frame="31" value="0.178186" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="55.4621" />
                                                                                <Key frame="31" value="55.4621" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="68.0306" />
                                                                                <Key frame="31" value="68.0306" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="-10.1978" />
                                                                                <Key frame="31" value="-10.1978" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="-1">
                                                                                <Key frame="21" value="103.358" />
                                                                                <Key frame="31" value="103.974" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="3" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="Move To" id="13" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="143" y="94">
                                                <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                <Resource name="Legs" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Move To (1)" id="25" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="295" y="133">
                                                <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="-0.2" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="1.57" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                <Resource name="Legs" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="9" indexofoutput="6" />
                                            <Link inputowner="17" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="20" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="9" indexofinput="2" outputowner="20" indexofoutput="6" />
                                            <Link inputowner="15" indexofinput="2" outputowner="17" indexofoutput="4" />
                                            <Link inputowner="19" indexofinput="2" outputowner="18" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="9" indexofoutput="5" />
                                            <Link inputowner="18" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="16" indexofinput="2" outputowner="20" indexofoutput="5" />
                                            <Link inputowner="20" indexofinput="2" outputowner="16" indexofoutput="3" />
                                            <Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="8" />
                                            <Link inputowner="22" indexofinput="2" outputowner="9" indexofoutput="9" />
                                            <Link inputowner="7" indexofinput="2" outputowner="9" indexofoutput="10" />
                                            <Link inputowner="8" indexofinput="2" outputowner="9" indexofoutput="11" />
                                            <Link inputowner="18" indexofinput="2" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="18" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="17" indexofinput="2" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="17" indexofinput="2" outputowner="22" indexofoutput="4" />
                                            <Link inputowner="23" indexofinput="2" outputowner="19" indexofoutput="6" />
                                            <Link inputowner="14" indexofinput="2" outputowner="23" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="23" indexofoutput="5" />
                                            <Link inputowner="2" indexofinput="2" outputowner="23" indexofoutput="6" />
                                            <Link inputowner="10" indexofinput="2" outputowner="23" indexofoutput="8" />
                                            <Link inputowner="22" indexofinput="2" outputowner="23" indexofoutput="9" />
                                            <Link inputowner="7" indexofinput="2" outputowner="23" indexofoutput="10" />
                                            <Link inputowner="8" indexofinput="2" outputowner="23" indexofoutput="11" />
                                            <Link inputowner="24" indexofinput="2" outputowner="15" indexofoutput="6" />
                                            <Link inputowner="14" indexofinput="2" outputowner="24" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="24" indexofoutput="5" />
                                            <Link inputowner="2" indexofinput="2" outputowner="24" indexofoutput="6" />
                                            <Link inputowner="12" indexofinput="2" outputowner="24" indexofoutput="7" />
                                            <Link inputowner="10" indexofinput="2" outputowner="24" indexofoutput="8" />
                                            <Link inputowner="22" indexofinput="2" outputowner="24" indexofoutput="9" />
                                            <Link inputowner="7" indexofinput="2" outputowner="24" indexofoutput="10" />
                                            <Link inputowner="8" indexofinput="2" outputowner="24" indexofoutput="11" />
                                            <Link inputowner="12" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="14" indexofinput="2" outputowner="9" indexofoutput="7" />
                                            <Link inputowner="12" indexofinput="2" outputowner="23" indexofoutput="7" />
                                            <Link inputowner="20" indexofinput="2" outputowner="1" indexofoutput="8" />
                                            <Link inputowner="20" indexofinput="2" outputowner="21" indexofoutput="3" />
                                            <Link inputowner="27" indexofinput="2" outputowner="12" indexofoutput="4" />
                                            <Link inputowner="21" indexofinput="2" outputowner="27" indexofoutput="5" />
                                            <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="11" indexofinput="2" outputowner="14" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="11" indexofoutput="5" />
                                            <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="25" indexofinput="2" outputowner="13" indexofoutput="4" />
                                            <Link inputowner="25" indexofinput="2" outputowner="13" indexofoutput="5" />
                                            <Link inputowner="3" indexofinput="2" outputowner="25" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="25" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Bumpers (1)" id="7" localization="8" tooltip="Listen to bumpers sensors. Stimulate onLeft or onRight output depending on&#x0A;which bumper is stimulated." x="577" y="351">
                            <bitmap>media/images/box/movement/move_foot.png</bitmap>
                            <bitmap>media/images/box/movement/move_leftfoot.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="LeftBumperPressed" type="0" type_size="1" nature="4" stm_value_name="LeftBumperPressed" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Input name="RightBumperPressed" type="0" type_size="1" nature="4" stm_value_name="RightBumperPressed" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="6" />
                            <Output name="onLeft" type="1" type_size="1" nature="2" inner="0" tooltip="When left bumper is stimulated." id="7" />
                            <Output name="onRight" type="1" type_size="1" nature="2" inner="0" tooltip="When right bumper is stimulated." id="8" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="196" y="61">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="If &gt; 0" id="4" localization="8" tooltip="Transmit only if value is &gt; 0." x="197" y="165">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="7" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="8" outputowner="4" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="7" />
                        <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
