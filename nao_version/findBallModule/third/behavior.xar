<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="turn to ball" id="18" localization="8" tooltip="" x="558" y="527">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="njuFindBall" type="0" type_size="1" nature="4" stm_value_name="njuFindBall" inner="1" tooltip="njuFindBall desc" id="4" />
                            <Input name="njuFindPole" type="0" type_size="1" nature="4" stm_value_name="njuFindPole" inner="1" tooltip="njuFindPole desc" id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="endFind" id="3" localization="8" tooltip="" x="1249" y="541">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                            </Box>
                                            <Box name="selectcam" id="16" localization="8" tooltip="" x="357" y="99">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="cam_up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="selectcam" id="3" localization="8" tooltip="" x="202" y="33">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
        self.njuModule=ALProxy("njunaoModule");
    def onUnload(self):
        #put clean-up code here

        pass

    def onInput_camup(self):
        #self.onStopped() #activate the output of     the box
        self.njuModule.ChangeCamera(0)
        self.onStopped()
        pass

    def onInput_camdown(self):
        self.njuModule.ChangeCamera(1)
        self.onStopped()
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="camup" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="findBallNew (2)" id="4" localization="8" tooltip="" x="406" y="27">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.njuModule=ALProxy("njunaoModule");
        self.Mem=ALProxy("ALMemory")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.njuModule.registerToVideoDevice(vision_definitions.kVGA, vision_definitions.kBGRColorSpace)
        self.njuModule.post.ContinuousRefreshCam()
        self.njuModule.post.ContinuousFindBall()
        self.njuModule.post.ContinuousFindPole()
        #self.njuModule.ChangeCamera(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="move_head" id="10" localization="8" tooltip="" x="862" y="358">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")
        self.y=[0,0]
        self.num=0
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        #self.motionProxy.setStiffnesses("Head", 0.7);
        self.num=self.num+1
        if (self.num==4):
            self.num=0;
        self.names = ["HeadYaw", "HeadPitch"]
        self.timeLists  = [0.5, 0.5]
        self.PID_P=1
        self.isAbsolute = True
        self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
        self.num=4
        if (self.num==0):
            self.angles[0]=self.angles[0]+0.2;
            self.angles[1]=self.angles[1]+0.2;
        elif(self.num==1):
            self.angles[0]=self.angles[0]-0.2;
            self.angles[1]=self.angles[1]+0.2;
        elif(self.num==2):
            self.angles[0]=self.angles[0]-0.2;
            self.angles[1]=self.angles[1]-0.2;
        elif(self.num==3):
            self.angles[0]=self.angles[0]+0.2;
            self.angles[1]=self.angles[1]-0.2;

        if (self.angles[1]>0.28):
            self.angles[1]=0.28
        if (self.angles[1]<-0.44):
            self.angles[1]=-0.44
        if (self.angles[0]>0.70):
            self.angles[0]=0.70
        if (self.angles[0]<-0.40):
            self.angles[0]=-0.40
        #self.log(" exp_yaw "+str(self.angles[0])+" now_pitch "+str(p[14]))
        #self.log(" now_pitch "+str(p[9])+" now_yaw "+str(str(p[8])))
        self.fractionMaxSpeed  = 0.3
        #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
        #self.motionProxy.setStiffnesses("Head", 0.3);
        self.onStopped(p)
        #self.onStopped(p) #activate the output of the box
        pass
    def onInput_input():
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                            </Box>
                                            <Box name="Wait For Signals" id="17" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="821" y="222">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Box name="walk2ballnew" id="5" localization="8" tooltip="" x="749" y="725">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def interval_theta(self,theta):
        if (((theta/2.0>0.05) ) or (theta/2.0<-0.05)):
            if ((theta/2.0>0.3)):
                return(0.3)
            elif((theta>0)):
                return(theta/2.0)
            elif((theta/2.0<-0.3)):
                return(-0.3)
            elif((theta<0)):
                return(theta/2.0)
        elif(theta>0):
            return(0.05)
        elif(theta<0):
            return(-0.05)
        else:
            return 0
        pass
    def interval_dis(self,dis):
        if(dis>self.getParameter("exp_x")):
            return 0.5
        else:
            return -0.5
    def onLoad(self):
        self.moveflag=0;
        self.motion = ALProxy("ALMotion")
        self.stopflag=0
        maxstepx = 0.02 #default 0.04
        maxstepy = 0.11 #default 0.14
        maxsteptheta = 0.3490 #default 0.349
        maxstepfrequency = 1.0 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        self.moveflag=1
        if(self.stopflag==0):
            x=p[10]
            y=p[11]
            theta=math.atan(y/x)
            self.motion.moveToward(0, 0.0, self.interval_theta(theta),self.moveConfig)
            self.onStopped() #activate the output of the box
        pass
    def onInput_signalLost(self):
        if (self.moveflag==1):
            self.motion.stopMove()
            self.moveflag=0
        pass
    def onInput_onStop(self):
        self.stopflag=1
        self.motion.moveToward(0, 0, 0)

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="signalLost" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                <Parameter name="exp_y" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="" id="6" />
                                                <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.15" min="0" max="3" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Counter" id="6" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="322" y="352">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="4" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                            </Box>
                                            <Box name="Wait For Signals (1)" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="662" y="454">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="414" y="450">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                            </Box>
                                            <Box name="serch" id="21" localization="8" tooltip="" x="407" y="735">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="HeadMove (1)" id="1" localization="8" tooltip="Enter tooltip here" x="113" y="117">
                                                                    <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="74.9154">
                                                                                    <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="776" y="351">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="21">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="-0.00240423" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="16.2576" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="16">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="0.612832" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="-26.1941" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="-35.7743" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="7.64417" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="26.7167" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="5.62267" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                    </Box>
                                                                                    <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="hgj" id="7" localization="8" tooltip="" x="914" y="327">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move" id="10" localization="8" tooltip="" x="298" y="361">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")

    def onLoad(self):
        maxstepx = 0.02 #default 0.04
        maxstepy = 0.11 #default 0.14
        maxsteptheta = 0.020 #default 0.349
        maxstepfrequency = 1.0 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        self.onrun=0
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.onrun=1
        #self.motionProxy.setStiffnesses("Head", 0.7);
        self.motionProxy.moveToward(0,0,-0.6,self.moveConfig)
        #time.sleep(1)
        #self.motionProxy.setStiffnesses("Head", 0.3);

        self.onStopped()
        #self.onStopped(p) #activate the output of the box
        pass
    def onInput_input(self):
        if (self.onrun==1):
            self.motionProxy.stopMove()
            self.onrun=0
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="10" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="Wait For Signals (2)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="414" y="568">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Box name="Only Once (1)" id="12" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="503" y="323">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                            </Box>
                                            <Box name="Counter (1)" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="214" y="593">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                            </Box>
                                            <Box name="if" id="13" localization="8" tooltip="" x="890" y="476">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        x=p[10]
        y=p[11]
        theta=math.atan(y/x)
        if ((theta<0.02)and(theta>-0.02)):
            self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.15" min="0" max="3" tooltip="" id="5" />
                                            </Box>
                                            <Box name="judge" id="11" localization="8" tooltip="" x="136" y="255">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):


        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if ((p[0]>0)and(p[10]>0)and(p[10]<10)):
            Ballx=p[10]
            Bally=p[11]
            self.onStopped(p)

            self.log(["Ballx "+str(p[10])+" Bally "+str(p[11])])
        pass
    def onInput_input2(self, p):
        if ((p[0]>0)and(p[11]>0)and(p[11]<10)):
            Polex=p[11]
            Poley=p[12]
            self.output(p)

            self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Counter (2)" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="182" y="708">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                            </Box>
                                            <Box name="Counter (3)" id="15" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1126" y="395">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="3" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                            </Box>
                                            <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="3" />
                                            <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="5" />
                                            <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="5" />
                                            <Link inputowner="21" indexofinput="2" outputowner="14" indexofoutput="4" />
                                            <Link inputowner="17" indexofinput="3" outputowner="12" indexofoutput="3" />
                                            <Link inputowner="14" indexofinput="3" outputowner="21" indexofoutput="4" />
                                            <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="5" indexofinput="4" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="13" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="17" indexofoutput="4" />
                                            <Link inputowner="17" indexofinput="3" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="12" indexofinput="2" outputowner="6" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="3" outputowner="11" indexofoutput="5" />
                                            <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="5" />
                                            <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="5" />
                                            <Link inputowner="21" indexofinput="3" outputowner="11" indexofoutput="5" />
                                            <Link inputowner="17" indexofinput="2" outputowner="11" indexofoutput="5" />
                                            <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="6" />
                                            <Link inputowner="15" indexofinput="2" outputowner="13" indexofoutput="4" />
                                            <Link inputowner="15" indexofinput="3" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="3" indexofinput="1" outputowner="15" indexofoutput="5" />
                                            <Link inputowner="5" indexofinput="3" outputowner="15" indexofoutput="5" />
                                            <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="11" indexofinput="4" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="14" indexofinput="3" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Rest" id="3" localization="0" tooltip="Call a Rest process.&#x0A;Apply crouch posture if the robot is Stand then unStiff all joints" x="742" y="47">
                            <bitmap>media/images/box/movement/stiffness.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.motion.rest()
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Resource name="All motors" type="Lock" timeout="0" />
                            <Resource name="Stiffness" type="Lock" timeout="0" />
                        </Box>
                        <Box name="endFind" id="2" localization="8" tooltip="" x="795" y="414">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                        </Box>
                        <Box name="secondHit " id="15" localization="8" tooltip="" x="419" y="542">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="60" size="60">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="50" value="13.0056" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="0" />
                                        <Key frame="24" value="0" />
                                        <Key frame="50" value="0" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="50" value="-19.778" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="50" value="-0.524941" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="-57.8135" />
                                        <Key frame="24" value="-57.8135" />
                                        <Key frame="50" value="-56.4241" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="-79.1085" />
                                        <Key frame="24" value="-79.1085" />
                                        <Key frame="50" value="-77.5229" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="13" value="0.0037582" />
                                        <Key frame="24" value="0.257813" />
                                        <Key frame="50" value="0.2288" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="50" value="-25.3104" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="50" value="0.353968" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="50" value="-0.261268" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="50" value="39.5489" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="80.7271" />
                                        <Key frame="24" value="80.7271" />
                                        <Key frame="50" value="82.7037" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="17.031" />
                                        <Key frame="50" value="15.2908" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="0.228838" />
                                        <Key frame="24" value="0.228838" />
                                        <Key frame="50" value="1.75543" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="50" value="-19.6853" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="50" value="0.529749" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="2.12968" />
                                        <Key frame="24" value="47.7646" />
                                        <Key frame="50" value="23.9968" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="119.393" />
                                        <Key frame="24" value="116.9" />
                                        <Key frame="50" value="117.773" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="13" value="0" />
                                        <Key frame="24" value="0" />
                                        <Key frame="50" value="0" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="50" value="-25.5789" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="50" value="-0.0854867" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="50" value="-0.261268" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="50" value="39.6416" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="118.82" />
                                        <Key frame="24" value="69.6" />
                                        <Key frame="50" value="119.5" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="-3.8" />
                                        <Key frame="24" value="-3" />
                                        <Key frame="50" value="-5.9" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="-34.5" />
                                        <Key frame="24" value="-32.4" />
                                        <Key frame="50" value="-19.8659" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="firstHit" id="20" localization="8" tooltip="" x="308" y="531">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="60" size="61">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="61" value="13.0056" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="0" />
                                        <Key frame="44" value="0" />
                                        <Key frame="61" value="0" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="61" value="-19.778" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="61" value="-0.524941" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="-57.8135" />
                                        <Key frame="44" value="-57.8135" />
                                        <Key frame="61" value="-56.4241" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="-79.1085" />
                                        <Key frame="44" value="-79.1085" />
                                        <Key frame="61" value="-77.5229" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="13" value="0.0037582" />
                                        <Key frame="44" value="0.257813" />
                                        <Key frame="61" value="0.2288" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="61" value="-25.3104" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="61" value="0.353968" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="61" value="-0.261268" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="61" value="39.5489" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="80.7271" />
                                        <Key frame="44" value="80.7271" />
                                        <Key frame="61" value="82.7037" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="17.031" />
                                        <Key frame="61" value="15.2908" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="0.228838" />
                                        <Key frame="44" value="0.228838" />
                                        <Key frame="61" value="1.75543" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="61" value="-19.6853" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="61" value="0.529749" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="2.12968" />
                                        <Key frame="44" value="47.7646" />
                                        <Key frame="61" value="23.9968" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="119.393" />
                                        <Key frame="44" value="116.9" />
                                        <Key frame="61" value="117.773" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="13" value="0" />
                                        <Key frame="44" value="0" />
                                        <Key frame="61" value="0" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="61" value="-25.5789" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="61" value="-0.0854867" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="61" value="-0.261268" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="61" value="39.6416" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="118.82" />
                                        <Key frame="44" value="69.6" />
                                        <Key frame="61" value="119.5" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="-3.8" />
                                        <Key frame="44" value="-3" />
                                        <Key frame="61" value="-5.9" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="13" value="-34.5" />
                                        <Key frame="44" value="-32.4" />
                                        <Key frame="61" value="-19.8659" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="Bumpers_third" id="17" localization="8" tooltip="Listen to bumpers sensors. Stimulate onLeft or onRight output depending on&#x0A;which bumper is stimulated." x="68" y="37">
                            <bitmap>media/images/box/movement/move_foot.png</bitmap>
                            <bitmap>media/images/box/movement/move_leftfoot.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="LeftBumperPressed" type="0" type_size="1" nature="4" stm_value_name="LeftBumperPressed" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
                            <Output name="onLeft" type="1" type_size="1" nature="2" inner="0" tooltip="When left bumper is stimulated." id="6" />
                            <Output name="onRight" type="1" type_size="1" nature="2" inner="0" tooltip="When right bumper is stimulated." id="7" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="196" y="61">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="If &gt; 0" id="4" localization="8" tooltip="Transmit only if value is &gt; 0." x="197" y="165">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="6" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="0" indexofinput="7" outputowner="4" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="hit3_1" id="1" localization="8" tooltip="" x="137" y="151">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="110" size="110">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="29.3891" />
                                        <Key frame="34" value="29.3891" />
                                        <Key frame="41" value="29.3891" />
                                        <Key frame="100" value="29.3891" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-0.529749" />
                                        <Key frame="34" value="-0.529749" />
                                        <Key frame="41" value="-0.529749" />
                                        <Key frame="100" value="-0.529749" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-19.6023" />
                                        <Key frame="34" value="-19.6023" />
                                        <Key frame="41" value="-19.778" />
                                        <Key frame="100" value="-19.6023" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.00240423" />
                                        <Key frame="34" value="0.00240423" />
                                        <Key frame="41" value="0.00240423" />
                                        <Key frame="100" value="0.00240423" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-39.1973" />
                                        <Key frame="34" value="-39.1973" />
                                        <Key frame="41" value="-39.1973" />
                                        <Key frame="100" value="-39.1973" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-70.7552" />
                                        <Key frame="34" value="-70.7552" />
                                        <Key frame="41" value="-70.7552" />
                                        <Key frame="100" value="-70.7552" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="27" value="0.13" />
                                        <Key frame="34" value="0.13" />
                                        <Key frame="41" value="0.13" />
                                        <Key frame="100" value="0.13" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-25.1346" />
                                        <Key frame="34" value="-25.1346" />
                                        <Key frame="41" value="-25.2225" />
                                        <Key frame="100" value="-25.1346" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.441859" />
                                        <Key frame="34" value="0.441859" />
                                        <Key frame="41" value="0.441859" />
                                        <Key frame="100" value="0.441859" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.266077" />
                                        <Key frame="34" value="0.266077" />
                                        <Key frame="41" value="0.266077" />
                                        <Key frame="100" value="0.266077" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="40.252" />
                                        <Key frame="34" value="40.252" />
                                        <Key frame="41" value="40.6036" />
                                        <Key frame="100" value="40.252" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="89.4714" />
                                        <Key frame="34" value="89.4714" />
                                        <Key frame="41" value="89.4714" />
                                        <Key frame="100" value="89.4714" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="19.4217" />
                                        <Key frame="34" value="19.4217" />
                                        <Key frame="41" value="19.4217" />
                                        <Key frame="100" value="19.4217" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="3.77694" />
                                        <Key frame="34" value="3.77694" />
                                        <Key frame="41" value="3.77694" />
                                        <Key frame="100" value="3.77694" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-20.2127" />
                                        <Key frame="34" value="-20.2127" />
                                        <Key frame="41" value="-19.8611" />
                                        <Key frame="100" value="-20.2127" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.353968" />
                                        <Key frame="34" value="0.353968" />
                                        <Key frame="41" value="0.353968" />
                                        <Key frame="100" value="0.353968" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="21.9753" />
                                        <Key frame="34" value="21.9753" />
                                        <Key frame="41" value="21.7996" />
                                        <Key frame="100" value="21.9753" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="19.2459" />
                                        <Key frame="34" value="17.5759" />
                                        <Key frame="41" value="16.7849" />
                                        <Key frame="100" value="19.2459" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="27" value="0.298" />
                                        <Key frame="34" value="0.298" />
                                        <Key frame="41" value="0.298" />
                                        <Key frame="100" value="0.298" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-25.8426" />
                                        <Key frame="34" value="-25.8426" />
                                        <Key frame="41" value="-25.8426" />
                                        <Key frame="100" value="-25.8426" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.969218" />
                                        <Key frame="34" value="0.969218" />
                                        <Key frame="41" value="0.969218" />
                                        <Key frame="100" value="0.969218" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.266077" />
                                        <Key frame="34" value="0.266077" />
                                        <Key frame="41" value="0.266077" />
                                        <Key frame="100" value="0.266077" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="41.3115" />
                                        <Key frame="34" value="41.3115" />
                                        <Key frame="41" value="41.1357" />
                                        <Key frame="100" value="41.3115" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="115.58" />
                                        <Key frame="34" value="69.9642" />
                                        <Key frame="41" value="45" />
                                        <Key frame="100" value="115.58" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-22.5027" />
                                        <Key frame="34" value="-21.1843" />
                                        <Key frame="41" value="-19.6023" />
                                        <Key frame="100" value="-22.5027" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="75" />
                                        <Key frame="34" value="75" />
                                        <Key frame="41" value="76.9029" />
                                        <Key frame="100" value="75" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="hit3_2" id="4" localization="8" tooltip="" x="511" y="222">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="110" size="110">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="29.3891" />
                                        <Key frame="32" value="29.3891" />
                                        <Key frame="41" value="29.3891" />
                                        <Key frame="104" value="29.3891" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-0.529749" />
                                        <Key frame="32" value="-0.529749" />
                                        <Key frame="41" value="-0.529749" />
                                        <Key frame="104" value="-0.529749" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-19.6023" />
                                        <Key frame="32" value="-19.6023" />
                                        <Key frame="41" value="-19.778" />
                                        <Key frame="104" value="-19.6023" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.00240423" />
                                        <Key frame="32" value="0.00240423" />
                                        <Key frame="41" value="0.00240423" />
                                        <Key frame="104" value="0.00240423" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-39.1973" />
                                        <Key frame="32" value="-39.1973" />
                                        <Key frame="41" value="-39.1973" />
                                        <Key frame="104" value="-39.1973" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-70.7552" />
                                        <Key frame="32" value="-70.7552" />
                                        <Key frame="41" value="-70.7552" />
                                        <Key frame="104" value="-70.7552" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="27" value="0.13" />
                                        <Key frame="32" value="0.13" />
                                        <Key frame="41" value="0.13" />
                                        <Key frame="104" value="0.13" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-25.1346" />
                                        <Key frame="32" value="-25.1346" />
                                        <Key frame="41" value="-25.2225" />
                                        <Key frame="104" value="-25.1346" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.441859" />
                                        <Key frame="32" value="0.441859" />
                                        <Key frame="41" value="0.441859" />
                                        <Key frame="104" value="0.441859" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.266077" />
                                        <Key frame="32" value="0.266077" />
                                        <Key frame="41" value="0.266077" />
                                        <Key frame="104" value="0.266077" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="40.252" />
                                        <Key frame="32" value="40.252" />
                                        <Key frame="41" value="40.6036" />
                                        <Key frame="104" value="40.252" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="89.4714" />
                                        <Key frame="32" value="89.4714" />
                                        <Key frame="41" value="89.4714" />
                                        <Key frame="104" value="89.4714" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="19.4217" />
                                        <Key frame="32" value="19.4217" />
                                        <Key frame="41" value="19.4217" />
                                        <Key frame="104" value="19.4217" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="3.77694" />
                                        <Key frame="32" value="3.77694" />
                                        <Key frame="41" value="3.77694" />
                                        <Key frame="104" value="3.77694" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-20.2127" />
                                        <Key frame="32" value="-20.2127" />
                                        <Key frame="41" value="-19.8611" />
                                        <Key frame="104" value="-20.2127" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.353968" />
                                        <Key frame="32" value="0.353968" />
                                        <Key frame="41" value="0.353968" />
                                        <Key frame="104" value="0.353968" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="21.9753" />
                                        <Key frame="32" value="21.9753" />
                                        <Key frame="41" value="21.7996" />
                                        <Key frame="104" value="21.9753" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="19.2459" />
                                        <Key frame="32" value="17.5759" />
                                        <Key frame="41" value="16.7849" />
                                        <Key frame="104" value="19.2459" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="27" value="0.298" />
                                        <Key frame="32" value="0.298" />
                                        <Key frame="41" value="0.298" />
                                        <Key frame="104" value="0.298" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-25.8426" />
                                        <Key frame="32" value="-25.8426" />
                                        <Key frame="41" value="-25.8426" />
                                        <Key frame="104" value="-25.8426" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.969218" />
                                        <Key frame="32" value="0.969218" />
                                        <Key frame="41" value="0.969218" />
                                        <Key frame="104" value="0.969218" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.266077" />
                                        <Key frame="32" value="0.266077" />
                                        <Key frame="41" value="0.266077" />
                                        <Key frame="104" value="0.266077" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="41.3115" />
                                        <Key frame="32" value="41.3115" />
                                        <Key frame="41" value="41.1357" />
                                        <Key frame="104" value="41.3115" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="115.58" />
                                        <Key frame="32" value="69.9642" />
                                        <Key frame="41" value="45" />
                                        <Key frame="104" value="115.58" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-22.5027" />
                                        <Key frame="32" value="-21.1843" />
                                        <Key frame="41" value="-19.6023" />
                                        <Key frame="104" value="-22.5027" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="75" />
                                        <Key frame="32" value="75" />
                                        <Key frame="41" value="76.9029" />
                                        <Key frame="104" value="75" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="hit3_3" id="7" localization="8" tooltip="" x="557" y="302">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="110" size="110">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="29.3891" />
                                        <Key frame="34" value="29.3891" />
                                        <Key frame="49" value="29.3891" />
                                        <Key frame="102" value="29.3891" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-0.529749" />
                                        <Key frame="34" value="-0.529749" />
                                        <Key frame="49" value="-0.529749" />
                                        <Key frame="102" value="-0.529749" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-19.6023" />
                                        <Key frame="34" value="-19.6023" />
                                        <Key frame="49" value="-19.778" />
                                        <Key frame="102" value="-19.6023" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.00240423" />
                                        <Key frame="34" value="0.00240423" />
                                        <Key frame="49" value="0.00240423" />
                                        <Key frame="102" value="0.00240423" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-39.1973" />
                                        <Key frame="34" value="-39.1973" />
                                        <Key frame="49" value="-39.1973" />
                                        <Key frame="102" value="-39.1973" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-70.7552" />
                                        <Key frame="34" value="-70.7552" />
                                        <Key frame="49" value="-70.7552" />
                                        <Key frame="102" value="-70.7552" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="27" value="0.13" />
                                        <Key frame="34" value="0.13" />
                                        <Key frame="49" value="0.13" />
                                        <Key frame="102" value="0.13" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-25.1346" />
                                        <Key frame="34" value="-25.1346" />
                                        <Key frame="49" value="-25.2225" />
                                        <Key frame="102" value="-25.1346" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.441859" />
                                        <Key frame="34" value="0.441859" />
                                        <Key frame="49" value="0.441859" />
                                        <Key frame="102" value="0.441859" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.266077" />
                                        <Key frame="34" value="0.266077" />
                                        <Key frame="49" value="0.266077" />
                                        <Key frame="102" value="0.266077" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="40.252" />
                                        <Key frame="34" value="40.252" />
                                        <Key frame="49" value="40.6036" />
                                        <Key frame="102" value="40.252" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="89.4714" />
                                        <Key frame="34" value="89.4714" />
                                        <Key frame="49" value="89.4714" />
                                        <Key frame="102" value="89.4714" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="19.4217" />
                                        <Key frame="34" value="19.4217" />
                                        <Key frame="49" value="19.4217" />
                                        <Key frame="102" value="19.4217" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="3.77694" />
                                        <Key frame="34" value="3.77694" />
                                        <Key frame="49" value="3.77694" />
                                        <Key frame="102" value="3.77694" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-20.2127" />
                                        <Key frame="34" value="-20.2127" />
                                        <Key frame="49" value="-19.8611" />
                                        <Key frame="102" value="-20.2127" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.353968" />
                                        <Key frame="34" value="0.353968" />
                                        <Key frame="49" value="0.353968" />
                                        <Key frame="102" value="0.353968" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="21.9753" />
                                        <Key frame="34" value="21.9753" />
                                        <Key frame="49" value="21.7996" />
                                        <Key frame="102" value="21.9753" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="19.2459" />
                                        <Key frame="34" value="17.5759" />
                                        <Key frame="49" value="16.7849" />
                                        <Key frame="102" value="19.2459" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="27" value="0.298" />
                                        <Key frame="34" value="0.298" />
                                        <Key frame="49" value="0.298" />
                                        <Key frame="102" value="0.298" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-25.8426" />
                                        <Key frame="34" value="-25.8426" />
                                        <Key frame="49" value="-25.8426" />
                                        <Key frame="102" value="-25.8426" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.969218" />
                                        <Key frame="34" value="0.969218" />
                                        <Key frame="49" value="0.969218" />
                                        <Key frame="102" value="0.969218" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="0.266077" />
                                        <Key frame="34" value="0.266077" />
                                        <Key frame="49" value="0.266077" />
                                        <Key frame="102" value="0.266077" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="41.3115" />
                                        <Key frame="34" value="41.3115" />
                                        <Key frame="49" value="41.1357" />
                                        <Key frame="102" value="41.3115" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="115.58" />
                                        <Key frame="34" value="69.9642" />
                                        <Key frame="49" value="45" />
                                        <Key frame="102" value="115.58" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="-22.5027" />
                                        <Key frame="34" value="-21.1843" />
                                        <Key frame="49" value="-19.6023" />
                                        <Key frame="102" value="-22.5027" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="27" value="75" />
                                        <Key frame="34" value="75" />
                                        <Key frame="49" value="76.9029" />
                                        <Key frame="102" value="75" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="Move To" id="8" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="101" y="442">
                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                            <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                            <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                            <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                            <Resource name="Legs" type="Lock" timeout="0" />
                        </Box>
                        <Box name="gotolin (2)" id="9" localization="8" tooltip="" x="381" y="120">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="turn to ball" id="18" localization="8" tooltip="" x="1019" y="547">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="njuFindBall" type="0" type_size="1" nature="4" stm_value_name="njuFindBall" inner="1" tooltip="njuFindBall desc" id="4" />
                                                <Input name="njuFindPole" type="0" type_size="1" nature="4" stm_value_name="njuFindPole" inner="1" tooltip="njuFindPole desc" id="5" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="endFind" id="3" localization="8" tooltip="" x="1249" y="541">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="selectcam" id="16" localization="8" tooltip="" x="357" y="99">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="cam_up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="selectcam" id="3" localization="8" tooltip="" x="202" y="33">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
        self.njuModule=ALProxy("njunaoModule");
    def onUnload(self):
        #put clean-up code here

        pass

    def onInput_camup(self):
        #self.onStopped() #activate the output of     the box
        self.njuModule.ChangeCamera(0)
        self.onStopped()
        pass

    def onInput_camdown(self):
        self.njuModule.ChangeCamera(1)
        self.onStopped()
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="camup" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Box name="findBallNew (2)" id="4" localization="8" tooltip="" x="406" y="27">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.njuModule=ALProxy("njunaoModule");
        self.Mem=ALProxy("ALMemory")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.njuModule.registerToVideoDevice(vision_definitions.kVGA, vision_definitions.kBGRColorSpace)
        self.njuModule.post.ContinuousRefreshCam()
        self.njuModule.post.ContinuousFindBall()
        self.njuModule.post.ContinuousFindPole()
        #self.njuModule.ChangeCamera(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move_head" id="10" localization="8" tooltip="" x="862" y="358">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")
        self.y=[0,0]
        self.num=0
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        #self.motionProxy.setStiffnesses("Head", 0.7);
        self.num=self.num+1
        if (self.num==4):
            self.num=0;
        self.names = ["HeadYaw", "HeadPitch"]
        self.timeLists  = [0.5, 0.5]
        self.PID_P=1
        self.isAbsolute = True
        self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
        self.num=4
        if (self.num==0):
            self.angles[0]=self.angles[0]+0.2;
            self.angles[1]=self.angles[1]+0.2;
        elif(self.num==1):
            self.angles[0]=self.angles[0]-0.2;
            self.angles[1]=self.angles[1]+0.2;
        elif(self.num==2):
            self.angles[0]=self.angles[0]-0.2;
            self.angles[1]=self.angles[1]-0.2;
        elif(self.num==3):
            self.angles[0]=self.angles[0]+0.2;
            self.angles[1]=self.angles[1]-0.2;

        if (self.angles[1]>0.28):
            self.angles[1]=0.28
        if (self.angles[1]<-0.44):
            self.angles[1]=-0.44
        if (self.angles[0]>0.70):
            self.angles[0]=0.70
        if (self.angles[0]<-0.40):
            self.angles[0]=-0.40
        #self.log(" exp_yaw "+str(self.angles[0])+" now_pitch "+str(p[14]))
        #self.log(" now_pitch "+str(p[9])+" now_yaw "+str(str(p[8])))
        self.fractionMaxSpeed  = 0.3
        #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
        #self.motionProxy.setStiffnesses("Head", 0.3);
        self.onStopped(p)
        #self.onStopped(p) #activate the output of the box
        pass
    def onInput_input():
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="17" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="821" y="222">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="walk2ballnew" id="5" localization="8" tooltip="" x="749" y="725">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def interval_theta(self,theta):
        if (((theta/2.0>0.05) ) or (theta/2.0<-0.05)):
            if ((theta/2.0>0.3)):
                return(0.3)
            elif((theta>0)):
                return(theta/2.0)
            elif((theta/2.0<-0.3)):
                return(-0.3)
            elif((theta<0)):
                return(theta/2.0)
        elif(theta>0):
            return(0.05)
        elif(theta<0):
            return(-0.05)
        else:
            return 0
        pass
    def interval_dis(self,dis):
        if(dis>self.getParameter("exp_x")):
            return 0.5
        else:
            return -0.5
    def onLoad(self):
        self.moveflag=0;
        self.motion = ALProxy("ALMotion")
        self.stopflag=0
        maxstepx = 0.02 #default 0.04
        maxstepy = 0.11 #default 0.14
        maxsteptheta = 0.3490 #default 0.349
        maxstepfrequency = 1.0 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        self.moveflag=1
        if(self.stopflag==0):
            x=p[10]
            y=p[11]
            theta=math.atan(y/x)
            self.motion.moveToward(0, 0.0, self.interval_theta(theta),self.moveConfig)
            self.onStopped() #activate the output of the box
        pass
    def onInput_signalLost(self):
        if (self.moveflag==1):
            self.motion.stopMove()
            self.moveflag=0
        pass
    def onInput_onStop(self):
        self.stopflag=1
        self.motion.moveToward(0, 0, 0)

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="signalLost" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Parameter name="exp_y" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="" id="6" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.15" min="0" max="3" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Counter" id="6" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="322" y="352">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="4" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="662" y="454">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="414" y="450">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="serch" id="21" localization="8" tooltip="" x="407" y="735">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="HeadMove (1)" id="1" localization="8" tooltip="Enter tooltip here" x="113" y="117">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="776" y="351">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="21">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="21" value="-0.00240423" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="21" value="16.2576" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="16">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="0.612832" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="-26.1941" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-35.7743" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="7.64417" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="26.7167" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="5.62267" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="hgj" id="7" localization="8" tooltip="" x="914" y="327">
                                                                                                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="move" id="10" localization="8" tooltip="" x="298" y="361">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")

    def onLoad(self):
        maxstepx = 0.02 #default 0.04
        maxstepy = 0.11 #default 0.14
        maxsteptheta = 0.020 #default 0.349
        maxstepfrequency = 1.0 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        self.onrun=0
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.onrun=1
        #self.motionProxy.setStiffnesses("Head", 0.7);
        self.motionProxy.moveToward(0,0,-0.6,self.moveConfig)
        #time.sleep(1)
        #self.motionProxy.setStiffnesses("Head", 0.3);

        self.onStopped()
        #self.onStopped(p) #activate the output of the box
        pass
    def onInput_input(self):
        if (self.onrun==1):
            self.motionProxy.stopMove()
            self.onrun=0
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="414" y="568">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once (1)" id="12" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="503" y="323">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="Counter (1)" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="214" y="593">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="if" id="13" localization="8" tooltip="" x="890" y="476">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        x=p[10]
        y=p[11]
        theta=math.atan(y/x)
        if ((theta<0.02)and(theta>-0.02)):
            self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.15" min="0" max="3" tooltip="" id="5" />
                                                                </Box>
                                                                <Box name="judge" id="11" localization="8" tooltip="" x="136" y="255">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):


        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if ((p[0]>0)and(p[10]>0)and(p[10]<10)):
            Ballx=p[10]
            Bally=p[11]
            self.onStopped(p)

            self.log(["Ballx "+str(p[10])+" Bally "+str(p[11])])
        pass
    def onInput_input2(self, p):
        if ((p[0]>0)and(p[11]>0)and(p[11]<10)):
            Polex=p[11]
            Poley=p[12]
            self.output(p)

            self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Counter (2)" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="182" y="708">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Counter (3)" id="15" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1126" y="395">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="3" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="3" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="12" indexofoutput="3" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="17" indexofoutput="4" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="3" indexofinput="1" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="4" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="go to shoot point" id="2" localization="8" tooltip="" x="898" y="659">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="njuFindBall" type="0" type_size="1" nature="4" stm_value_name="njuFindBall" inner="1" tooltip="njuFindBall desc" id="4" />
                                                <Input name="njuFindPole" type="0" type_size="1" nature="4" stm_value_name="njuFindPole" inner="1" tooltip="njuFindPole desc" id="5" />
                                                <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="7" />
                                                <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Output name="output2" type="0" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="endFind" id="3" localization="8" tooltip="" x="1386" y="249">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="selectcam" id="16" localization="8" tooltip="" x="448" y="17">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="cam_up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="selectcam" id="3" localization="8" tooltip="" x="202" y="33">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
        self.njuModule=ALProxy("njunaoModule");
    def onUnload(self):
        #put clean-up code here

        pass

    def onInput_camup(self):
        #self.onStopped() #activate the output of     the box
        self.njuModule.ChangeCamera(0)
        self.onStopped()
        pass

    def onInput_camdown(self):
        self.njuModule.ChangeCamera(1)
        self.onStopped()
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="camup" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Box name="findBallNew (2)" id="4" localization="8" tooltip="" x="406" y="27">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.njuModule=ALProxy("njunaoModule");
        self.Mem=ALProxy("ALMemory")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.njuModule.registerToVideoDevice(vision_definitions.kVGA, vision_definitions.kBGRColorSpace)
        self.njuModule.post.ContinuousRefreshCam()
        time.sleep(0.5)
        self.njuModule.post.ContinuousFindBall()
        self.njuModule.post.ContinuousFindPole()
        #self.njuModule.ChangeCamera(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="walk2ballnew" id="5" localization="8" tooltip="" x="992" y="572">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def interval_theta(self,theta):
        if (((theta/2.0>0.05) ) or (theta/2.0<-0.05)):
            if ((theta/2.0>0.15)):
                return(0.15)
            elif((theta>0)):
                return(theta/2.0)
            elif((theta/2.0<-0.15)):
                return(-0.15)
            elif((theta<0)):
                return(theta/2.0)
        elif(theta>0):
            return(0.05)
        elif(theta<0):
            return(-0.05)
        else:
            return 0
        pass

    def interval_dis(self,dis):
        exp_x=self.getParameter("exp_x")
        error=dis-exp_x

        if(error>0.005):
            if (error>0.5):
                return 0.5
            elif (error<0.08):
                return 0.08
            else:
                return error
        elif(error<-0.005):
            if (error<-0.5):
                return -0.5
            elif (error>-0.02):
                return -0.02
            else:
                return error*1.3
        else:
            return 0
    def interval_y(self,dis):
        exp_y=self.getParameter("exp_y")
        error=dis-exp_y
        if(error>0.02):
            if (error>0.7):
                return 0.7
            elif (error<0.08):
                return 0.08
            else:
                return error

        elif(error<-0.02):
            if (error<-0.7):
                return -0.7
            elif (error<-0.08):
                return -0.08
            else:
                return error
        else:
            return 0
    def onLoad(self):
        self.moveflag=0;
        self.motion = ALProxy("ALMotion")
        self.stopflag=0
        maxstepx = 0.02 #default 0.04
        maxstepy = 0.11 #default 0.14
        maxsteptheta = 0.3490 #default 0.349
        maxstepfrequency = 1.0 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        import math
        self.PoleLostFlag=True
        self.PoleInfo=[]
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        self.motion.setMoveArmsEnabled(False,False)
        if(self.stopflag==0):
            self.moveflag=1
            if ((self.PoleLostFlag==False)):
                x=(p[10]+self.PoleInfo[11])/2.0
                y=(p[11]+self.PoleInfo[12])/2.0
                theta=math.atan(y/x)
                theta2=math.atan((self.PoleInfo[12]-p[11])/(self.PoleInfo[11]-p[10]))
                self.motion.moveToward(self.interval_dis(p[10])*1.2, self.interval_y(p[11])*1.2, self.interval_theta(theta2)/3.0,self.moveConfig)
                self.log("move at  "+str(self.interval_dis(p[10]))+str(self.interval_y(p[11]))+str(self.interval_theta(theta2)/3.0))
                self.output([p[10],p[11],self.PoleInfo[11],self.PoleInfo[12],self.getParameter("exp_x"),self.getParameter("exp_y")])
            self.onStopped() #activate the output of the box
        else:
            self.motion.stopMove()
    def onInput_signalLost(self):
        if (self.moveflag==1):
            self.motion.stopMove()
            self.moveflag=0
        pass
    def onInput_onStop(self):
        self.stopflag=1
        self.motion.stopMove()

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box
    def onInput_input_pole(self,p):
        self.PoleLostFlag=False
        self.PoleInfo=p
        pass
    def onInput_input_PoleLost(self):
        self.PoleLostFlag=True
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="signalLost" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Input name="input_pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="input_PoleLost" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="7" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Parameter name="exp_y" inherits_from_parent="0" content_type="2" value="-0.14" default_value="0" min="-1" max="1" tooltip="" id="9" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.15" min="0" max="3" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Counter" id="6" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="528" y="280">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        circleBallx=0
    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="753" y="372">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="505" y="368">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="serch" id="21" localization="8" tooltip="" x="513" y="704">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="HeadMove" id="2" localization="8" tooltip="Enter tooltip here" x="242" y="267">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="776" y="351">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="20">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="20" value="0.612832" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="20" value="23.3768" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="16">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="0.612832" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="-26.1941" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-41.0478" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-3.95753" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="49.5685" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-6.94585" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
                break
        pass

    def onInput_onStop(self):
        if (self.bMustStop==False):
            self.bMustStop==True
            self.Problem()
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="hgj" id="7" localization="8" tooltip="" x="914" y="327">
                                                                                                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="536" y="507">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Counter (1)" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="157" y="495">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="8" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="judge" id="11" localization="8" tooltip="" x="303" y="120">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):

        self.ballx_last=0
        self.bally_last=0
        self.polex_last=0
        self.poley_last=0

        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if ((p[0]>0)and(p[10]>0)and(p[10]<1.8)):
            if (not (abs(p[10]-self.ballx_last)>0.6 or abs(p[11]-self.bally_last)>0.6)):
                self.ballx_last=p[10]
                self.bally_last=p[11]

                Ballx=p[10]
                Bally=p[11]

                self.onStopped(p)
                self.log(["Ballx "+str(p[10])+" Bally "+str(p[11])])
            else:
                self.ballx_last=p[10]
                self.bally_last=p[11]

        pass
    def onInput_input2(self, p):
        if ((p[0]>0)and(p[11]>0)and(p[11]<4.5)):
            if (not (abs(p[11]-self.polex_last)>0.6 or abs(p[12]-self.poley_last)>0.6)):
                self.polex_last=p[11]
                self.poley_last=p[12]
                self.output(p)
            else:
                self.polex_last=p[11]
                self.poley_last=p[12]

        pass
            #self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Counter (2)" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="310" y="638">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="8" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Counter (3)" id="15" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1136" y="292">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="3" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="if" id="13" localization="8" tooltip="" x="1189" y="594">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        tan=(p[3]-p[1])/(p[2]-p[0])
        theta=math.atan(tan)
        errorx=p[0]-p[4]
        errory=p[1]-p[5]
        if ((errorx<0.1)and(errorx>-0.1)and(errory<0.1)and(errory>-0.1)):
            self.onStopped()
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="headmove" id="2" localization="8" tooltip="" x="1241" y="105">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")
        self.pole_info=[]
        self.pole_info_flag=False
        self.ball_info=[]
        self.ball_info_flag=False
        self.num=0
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.num=self.num+1;
        if (self.num==2):
            self.num=0
        self.names = ["HeadYaw", "HeadPitch"]
        self.timeLists  = [0.5, 0.5]
        self.PID_P=1
        self.isAbsolute = True
        if (self.num==0):
            self.angles  = [self.PID_P*self.ball_info[2]+self.ball_info[14],self.PID_P*self.ball_info[3]+self.ball_info[13]]
        elif (self.num==1):
            self.angles  = [self.PID_P*self.pole_info[13]+self.pole_info[10],self.PID_P*self.pole_info[14]+self.pole_info[9]]
        #yaw 0.5235
        #pitch 0.2268
        if (self.angles[1]>22.5):
            self.angles[1]=22.5
        if (self.angles[0]>0.80):
            self.angles[0]=0.80
        if (self.angles[0]<-0.50):
            self.angles[0]=-0.50
        self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
        time.sleep(1)

        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_input_Pole(self, p):
        self.pole_info=p
        self.pole_info_flag=True
        pass

    def onInput_input_Ball(self, p):
        self.ball_info=p
        self.ball_info_flag=True
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="input_Pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="input_Ball" type="0" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="6" />
                                                                </Box>
                                                                <Box name="Wait For Signals (3)" id="4" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="819" y="234">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once (2)" id="18" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="954" y="235">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="Delay" id="10" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="1079" y="192">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="3" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="7" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="1" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="5" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="5" indexofinput="6" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="4" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="4" indexofinput="3" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="5" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="4" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="18" indexofoutput="3" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="9" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="8" outputowner="11" indexofoutput="6" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="around ball to find pole (1)" id="1" localization="8" tooltip="" x="453" y="157">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="njuFindBall" type="0" type_size="1" nature="4" stm_value_name="njuFindBall" inner="1" tooltip="njuFindBall desc" id="4" />
                                                <Input name="njuFindPole" type="0" type_size="1" nature="4" stm_value_name="njuFindPole" inner="1" tooltip="njuFindPole desc" id="5" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="endFind" id="3" localization="8" tooltip="" x="1344" y="329">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="selectcam" id="16" localization="8" tooltip="" x="357" y="99">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="cam_up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="selectcam" id="3" localization="8" tooltip="" x="202" y="33">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
        self.njuModule=ALProxy("njunaoModule");
    def onUnload(self):
        #put clean-up code here

        pass

    def onInput_camup(self):
        #self.onStopped() #activate the output of     the box
        self.njuModule.ChangeCamera(0)
        self.onStopped()
        pass

    def onInput_camdown(self):
        self.njuModule.ChangeCamera(1)
        self.onStopped()
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="camup" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Box name="findBallNew (2)" id="4" localization="8" tooltip="" x="406" y="27">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.njuModule=ALProxy("njunaoModule");
        self.Mem=ALProxy("ALMemory")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.njuModule.registerToVideoDevice(vision_definitions.kVGA, vision_definitions.kBGRColorSpace)
        self.njuModule.post.ContinuousRefreshCam()
        time.sleep(0.5)
        self.njuModule.post.ContinuousFindBall()
        self.njuModule.post.ContinuousFindPole()
        #self.njuModule.ChangeCamera(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move_head" id="10" localization="8" tooltip="" x="928" y="341">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")
        self.y=[0,0]
        self.num=0
        self.pole_info=[]
        self.pole_info_flag=False
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        if (not self.pole_info_flag):
            #self.motionProxy.setStiffnesses("Head", 0.7);
            self.num=self.num+1
            if (self.num==4):
                self.num=0;
            self.names = ["HeadYaw", "HeadPitch"]
            self.timeLists  = [0.7, 0.7]
            self.PID_P=1
            self.isAbsolute = True
            self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
            if (self.num==0):
                self.angles[0]=self.angles[0]+0.25;
                self.angles[1]=self.angles[1]+0.25;
            elif(self.num==1):
                self.angles[0]=self.angles[0]-0.25;
                self.angles[1]=self.angles[1]+0.25;
            elif(self.num==2):
                self.angles[0]=self.angles[0]-0.25;
                self.angles[1]=self.angles[1]-0.25;
            elif(self.num==3):
                self.angles[0]=self.angles[0]+0.25;
                self.angles[1]=self.angles[1]-0.25;

            if (self.angles[1]>0.28):
                self.angles[1]=0.28
            if (self.angles[1]<-0.44):
                self.angles[1]=-0.44
            if (self.angles[0]>0.70):
                self.angles[0]=0.70
            if (self.angles[0]<-0.40):
                self.angles[0]=-0.40
            #self.log(" exp_yaw "+str(self.angles[0])+" now_pitch "+str(p[14]))
            #self.log(" now_pitch "+str(p[9])+" now_yaw "+str(str(p[8])))
            self.fractionMaxSpeed  = 0.3
            #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
            self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
            #self.motionProxy.setStiffnesses("Head", 0.3);
            self.onStopped(p)
            #self.onStopped(p) #activate the output of the box
        else:
            self.names = ["HeadYaw", "HeadPitch"]
            self.timeLists  = [0.5, 0.5]
            self.PID_P=1
            self.isAbsolute = True
            self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
            self.angles2 =[self.PID_P*self.pole_info[13]+self.pole_info[10],self.PID_P*self.pole_info[14]+self.pole_info[9]]
            self.angles[0]=(self.angles[0]+self.angles2[0])/2.0
            self.angles[1]=(self.angles[1]*0.5+self.angles2[1]*0.5)

            if (self.angles[1]>0.28):
                self.angles[1]=0.28
            if (self.angles[1]<-0.44):
                self.angles[1]=-0.44
            if (self.angles[0]>0.70):
                self.angles[0]=0.70
            if (self.angles[0]<-0.40):
                self.angles[0]=-0.40
            self.fractionMaxSpeed  = 0.3
            #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
            self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
            self.onStopped(p)

        pass
    def onInput_input(self):
        self.pole_info_flag=False
    def onInput_input_pole(self, p):
        self.pole_info=p
        self.pole_info_flag=True]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input_pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="17" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="868" y="168">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="walk2ballnew" id="5" localization="8" tooltip="" x="817" y="636">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def interval_theta(self,theta):
        if (((theta/2.0>0.05) ) or (theta/2.0<-0.05)):
            if ((theta/2.0>0.15)):
                return(0.15)
            elif((theta>0)):
                return(theta/2.0)
            elif((theta/2.0<-0.15)):
                return(-0.15)
            elif((theta<0)):
                return(theta/2.0)
        elif(theta>0):
            return(0.05)
        elif(theta<0):
            return(-0.05)
        else:
            return 0
        pass
    def interval_dis(self,dis):
        if(dis>self.getParameter("exp_x")):
            return 0.5
        else:
            return -0.5
    def onLoad(self):
        self.moveflag=0;
        self.motion = ALProxy("ALMotion")
        self.stopflag=0
        maxstepx = 0.015 #default 0.04
        maxstepy = 0.14 #default 0.14
        maxsteptheta = 0.17 #default 0.349
        maxstepfrequency = 0.5 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        self.motion.setMoveArmsEnabled(False,False)
        self.moveflag=1
        if(self.stopflag==0):
            x=p[10]
            y=p[11]
            theta=math.atan(y/x)
            self.motion.moveToward(0.0, 0.4, self.interval_theta(theta))#,self.moveConfig)
            self.onStopped() #activate the output of the box
        pass
    def onInput_signalLost(self):
        if (self.moveflag==1):
            self.motion.stopMove()
            self.moveflag=0
        pass
    def onInput_onStop(self):
        self.stopflag=1
        self.motion.moveToward(0, 0, 0)

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="signalLost" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Parameter name="exp_y" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="" id="6" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.15" min="0" max="3" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Counter" id="6" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="503" y="228">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        circleBallx=0
    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="1" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="662" y="454">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="414" y="450">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="414" y="568">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once (1)" id="12" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="640" y="246">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="Counter (1)" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="196" y="567">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="judge" id="11" localization="8" tooltip="" x="147" y="216">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):


        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if ((p[0]>0)and(p[10]>0)and(p[10]<10)):
            Ballx=p[10]
            Bally=p[11]
            self.onStopped(p)

            self.log(["Ballx "+str(p[10])+" Bally "+str(p[11])])
        pass
    def onInput_input2(self, p):
        if ((p[0]>0)and(p[11]>0)and(p[11]<10)):
            Polex=p[11]
            Poley=p[12]
            self.output(p)

            self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Counter (2)" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="206" y="778">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Counter (3)" id="15" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1066" y="444">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="8" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="serch (1)" id="2" localization="8" tooltip="" x="556" y="815">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="HeadMove (1)" id="1" localization="8" tooltip="Enter tooltip here" x="203" y="143">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="776" y="351">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="20">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="20" value="0.700723" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="20" value="22.0584" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="16">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="0.612832" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="-26.1941" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-41.0478" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-3.95753" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="49.5685" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-6.94585" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
                break
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="hgj" id="7" localization="8" tooltip="" x="914" y="327">
                                                                                                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="move" id="10" localization="8" tooltip="" x="298" y="361">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")

    def onLoad(self):
        maxstepx = 0.02 #default 0.04
        maxstepy = 0.11 #default 0.14
        maxsteptheta = 0.020 #default 0.349
        maxstepfrequency = 1.0 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        self.onrun=0
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.motionProxy.setMoveArmsEnabled(False,False)
        self.onrun=1
        #self.motionProxy.setStiffnesses("Head", 0.7);
        self.motionProxy.moveToward(0,0,-0.6,self.moveConfig)
        #time.sleep(1)
        #self.motionProxy.setStiffnesses("Head", 0.3);

        self.onStopped()
        #self.onStopped(p) #activate the output of the box
        pass
    def onInput_input(self):
        if (self.onrun==1):
            self.motionProxy.stopMove()
            self.onrun=0
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="3" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="12" indexofoutput="3" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="17" indexofoutput="4" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="10" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="3" indexofinput="1" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="4" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="10" indexofinput="4" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="10" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="go to ball (1)" id="3" localization="8" tooltip="" x="279" y="193">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="njuFindBall" type="0" type_size="1" nature="4" stm_value_name="njuFindBall" inner="1" tooltip="njuFindBall desc" id="4" />
                                                <Input name="njuFindPole" type="0" type_size="1" nature="4" stm_value_name="njuFindPole" inner="1" tooltip="njuFindPole desc" id="5" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="6" />
                                                <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                <Output name="output2" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="endFind" id="3" localization="8" tooltip="" x="1170" y="358">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="selectcam" id="16" localization="8" tooltip="" x="318" y="13">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="cam_up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="selectcam" id="3" localization="8" tooltip="" x="202" y="33">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
        self.njuModule=ALProxy("njunaoModule");
    def onUnload(self):
        #put clean-up code here

        pass

    def onInput_camup(self):
        #self.onStopped() #activate the output of     the box
        self.njuModule.ChangeCamera(0)
        self.onStopped()
        pass

    def onInput_camdown(self):
        self.njuModule.ChangeCamera(1)
        self.onStopped()
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="camup" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Box name="findBallNew (2)" id="4" localization="8" tooltip="" x="406" y="27">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.njuModule=ALProxy("njunaoModule");
        self.Mem=ALProxy("ALMemory")
        import time
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.njuModule.registerToVideoDevice(vision_definitions.kVGA, vision_definitions.kBGRColorSpace)
        self.njuModule.post.ContinuousRefreshCam()
        time.sleep(0.5)
        self.njuModule.post.ContinuousFindBall()
        self.njuModule.post.ContinuousFindPole()
        #self.njuModule.ChangeCamera(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait For Signals" id="17" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="861" y="176">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="walk2ballnew" id="5" localization="8" tooltip="" x="788" y="730">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def interval_theta(self,theta):
        if (((theta/2.0>0.05) ) or (theta/2.0<-0.05)):
            if ((theta/2.0>0.2)):
                return(0.2)
            elif((theta>0)):
                return(theta/2.0)
            elif((theta/2.0<-0.2)):
                return(-0.2)
            elif((theta<0)):
                return(theta/2.0)
        elif(theta>0):
            return(0.03)
        elif(theta<0):
            return(-0.03)
        else:
            return 0
        pass
    def interval_dis(self,dis):
        if(dis>self.getParameter("exp_x")):
            return 0.5
        else:
            return -0.5
    def onLoad(self):
        self.moveflag=0;
        self.motion = ALProxy("ALMotion")
        self.stopflag=0
        maxstepx = 0.015 #default 0.04
        maxstepy = 0.14 #default 0.14
        maxsteptheta = 0.17 #default 0.349
        maxstepfrequency = 0.5 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        self.motion.setMoveArmsEnabled(False,False)
        self.moveflag=1
        if(self.stopflag==0):
            x=p[10]
            y=p[11]+self.getParameter("exp_y")
            theta=math.atan(y/x)
            if (x>(self.getParameter("exp_x")+0.15)):
                self.motion.moveToward(self.interval_dis(x)/2.0, 0.0, self.interval_theta(theta))#,self.moveConfig)
            else:
                self.motion.moveToward(self.interval_dis(x)/6.0, 0.0, self.interval_theta(theta))#,self.moveConfig)
            self.onStopped() #activate the output of the box
        pass
    def onInput_signalLost(self):
        if (self.moveflag==1):
            self.motion.stopMove()
            self.moveflag=0
        pass
    def onInput_onStop(self):
        self.stopflag=1
        self.motion.moveToward(0, 0, 0)

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="signalLost" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Parameter name="exp_y" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="" id="6" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.7" default_value="0.15" min="0" max="3" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Counter" id="6" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="311" y="299">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="586" y="384">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="403" y="397">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="serch" id="21" localization="8" tooltip="" x="512" y="747">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="HeadMove (1)" id="1" localization="8" tooltip="Enter tooltip here" x="203" y="143">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="776" y="351">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="20">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="20" value="0.700723" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="20" value="22.0584" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="16">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="0.612832" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="-26.1941" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-41.0478" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-3.95753" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="49.5685" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-6.94585" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
                break
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="hgj" id="7" localization="8" tooltip="" x="914" y="327">
                                                                                                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="move" id="10" localization="8" tooltip="" x="298" y="361">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")

    def onLoad(self):
        maxstepx = 0.02 #default 0.04
        maxstepy = 0.11 #default 0.14
        maxsteptheta = 0.020 #default 0.349
        maxstepfrequency = 1.0 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        self.onrun=0
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.motionProxy.setMoveArmsEnabled(False,False)
        self.onrun=1
        #self.motionProxy.setStiffnesses("Head", 0.7);
        self.motionProxy.moveToward(0,0,-0.6,self.moveConfig)
        #time.sleep(1)
        #self.motionProxy.setStiffnesses("Head", 0.3);

        self.onStopped()
        #self.onStopped(p) #activate the output of the box
        pass
    def onInput_input(self):
        if (self.onrun==1):
            self.motionProxy.stopMove()
            self.onrun=0
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="505" y="500">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once (1)" id="12" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="492" y="270">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="Counter (1)" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="167" y="552">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="if" id="13" localization="8" tooltip="" x="801" y="438">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        if ((p[10]<self.getParameter("exp_x")+0.02)and(p[10]>self.getParameter("exp_x")-0.02)):
            self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.7" default_value="0.15" min="0" max="3" tooltip="" id="5" />
                                                                </Box>
                                                                <Box name="judge" id="11" localization="8" tooltip="" x="163" y="124">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):


        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if ((p[0]>0)and(p[10]>0)and(p[10]<10)):
            Ballx=p[10]
            Bally=p[11]
            self.onStopped(p)

            self.log(["Ballx "+str(p[10])+" Bally "+str(p[11])])
        pass
    def onInput_input2(self, p):
        if ((p[0]>0)and(p[11]>0)and(p[11]<10)):
            Polex=p[11]
            Poley=p[12]
            self.output(p)

            self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Counter (2)" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="193" y="703">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="move_head (1)" id="2" localization="8" tooltip="" x="903" y="347">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")
        self.y=[0,0]
        self.num=0
        self.pole_info=[]
        self.pole_info_flag=False
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        if (not self.pole_info_flag):
            #self.motionProxy.setStiffnesses("Head", 0.7);
            self.num=self.num+1
            if (self.num==4):
                self.num=0;
            self.names = ["HeadYaw", "HeadPitch"]
            self.timeLists  = [0.7, 0.7]
            self.PID_P=1
            self.isAbsolute = True
            self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
            if (self.num==0):
                self.angles[0]=self.angles[0]+0.25;
                self.angles[1]=self.angles[1]+0.25;
            elif(self.num==1):
                self.angles[0]=self.angles[0]-0.25;
                self.angles[1]=self.angles[1]+0.25;
            elif(self.num==2):
                self.angles[0]=self.angles[0]-0.25;
                self.angles[1]=self.angles[1]-0.25;
            elif(self.num==3):
                self.angles[0]=self.angles[0]+0.25;
                self.angles[1]=self.angles[1]-0.25;

            if (self.angles[1]>0.28):
                self.angles[1]=0.28
            if (self.angles[1]<-0.44):
                self.angles[1]=-0.44
            if (self.angles[0]>0.70):
                self.angles[0]=0.70
            if (self.angles[0]<-0.40):
                self.angles[0]=-0.40
            #self.log(" exp_yaw "+str(self.angles[0])+" now_pitch "+str(p[14]))
            #self.log(" now_pitch "+str(p[9])+" now_yaw "+str(str(p[8])))
            self.fractionMaxSpeed  = 0.3
            #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
            self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
            #self.motionProxy.setStiffnesses("Head", 0.3);
            self.onStopped(p)
            #self.onStopped(p) #activate the output of the box
        else:
            self.names = ["HeadYaw", "HeadPitch"]
            self.timeLists  = [0.5, 0.5]
            self.PID_P=1
            self.isAbsolute = True
            self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
            self.angles2 =[self.PID_P*self.pole_info[13]+self.pole_info[10],self.PID_P*self.pole_info[14]+self.pole_info[9]]
            self.angles[0]=(self.angles[0]+self.angles2[0])/2.0
            self.angles[1]=(self.angles[1]*0.5+self.angles2[1]*0.5)

            if (self.angles[1]>0.28):
                self.angles[1]=0.28
            if (self.angles[1]<-0.44):
                self.angles[1]=-0.44
            if (self.angles[0]>0.70):
                self.angles[0]=0.70
            if (self.angles[0]<-0.40):
                self.angles[0]=-0.40
            self.fractionMaxSpeed  = 0.3
            #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
            self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
            self.onStopped(p)
            if(((self.pole_info[11]*self.pole_info[11]+self.pole_info[12]*self.pole_info[12]<0.25)and(self.pole_info[11]*self.pole_info[11]+self.pole_info[12]*self.pole_info[12]<(p[10]*p[10]+p[11]*p[11])))):
                self.poleball()
            elif(((p[10]*p[10]+p[11]*p[11])<1.5)):
                self.output()

        pass
    def onInput_input(self):
        self.pole_info_flag=False
    def onInput_input_pole(self, p):
        self.pole_info=p
        self.pole_info_flag=True]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input_pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Output name="output" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Output name="poleball" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Counter (3)" id="4" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1062" y="544">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="endFind (1)" id="10" localization="8" tooltip="" x="1217" y="484">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="Counter (4)" id="15" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1120" y="719">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="endFind (2)" id="18" localization="8" tooltip="" x="1275" y="708">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="3" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="12" indexofoutput="3" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="1" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="4" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="17" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="4" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="4" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="4" indexofoutput="5" />
                                                                <Link inputowner="10" indexofinput="1" outputowner="4" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="7" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="8" outputowner="18" indexofoutput="4" />
                                                                <Link inputowner="18" indexofinput="1" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="2" indexofoutput="7" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="go to right position (1)" id="7" localization="8" tooltip="" x="539" y="297">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="njuFindBall" type="0" type_size="1" nature="4" stm_value_name="njuFindBall" inner="1" tooltip="njuFindBall desc" id="4" />
                                                <Input name="njuFindPole" type="0" type_size="1" nature="4" stm_value_name="njuFindPole" inner="1" tooltip="njuFindPole desc" id="5" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="endFind" id="3" localization="8" tooltip="" x="1406" y="287">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="selectcam" id="16" localization="8" tooltip="" x="419" y="57">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="cam_up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="selectcam" id="3" localization="8" tooltip="" x="202" y="33">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
        self.njuModule=ALProxy("njunaoModule");
    def onUnload(self):
        #put clean-up code here

        pass

    def onInput_camup(self):
        #self.onStopped() #activate the output of     the box
        self.njuModule.ChangeCamera(0)
        self.onStopped()
        pass

    def onInput_camdown(self):
        self.njuModule.ChangeCamera(1)
        self.onStopped()
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="camup" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Box name="findBallNew (2)" id="4" localization="8" tooltip="" x="406" y="27">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.njuModule=ALProxy("njunaoModule");
        self.Mem=ALProxy("ALMemory")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.njuModule.registerToVideoDevice(vision_definitions.kVGA, vision_definitions.kBGRColorSpace)
        self.njuModule.post.ContinuousRefreshCam()
        time.sleep(0.5)
        self.njuModule.post.ContinuousFindBall()
        self.njuModule.post.ContinuousFindPole()
        #self.njuModule.ChangeCamera(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move_head" id="10" localization="8" tooltip="" x="1059" y="220">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")
        self.y=[0,0]
        self.num=0
        self.pole_info=[]
        self.pole_info_flag=False
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        if (not self.pole_info_flag):
            #self.motionProxy.setStiffnesses("Head", 0.7);
            self.num=self.num+1
            if (self.num==4):
                self.num=0;
            self.names = ["HeadYaw", "HeadPitch"]
            self.timeLists  = [0.7, 0.7]
            self.PID_P=1
            self.isAbsolute = True
            self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
            if (self.num==0):
                self.angles[0]=self.angles[0]+0.25;
                self.angles[1]=self.angles[1]+0.25;
            elif(self.num==1):
                self.angles[0]=self.angles[0]-0.25;
                self.angles[1]=self.angles[1]+0.25;
            elif(self.num==2):
                self.angles[0]=self.angles[0]-0.25;
                self.angles[1]=self.angles[1]-0.25;
            elif(self.num==3):
                self.angles[0]=self.angles[0]+0.25;
                self.angles[1]=self.angles[1]-0.25;

            if (self.angles[1]>0.28):
                self.angles[1]=0.28
            if (self.angles[1]<-0.44):
                self.angles[1]=-0.44
            if (self.angles[0]>0.70):
                self.angles[0]=0.70
            if (self.angles[0]<-0.40):
                self.angles[0]=-0.40
            #self.log(" exp_yaw "+str(self.angles[0])+" now_pitch "+str(p[14]))
            #self.log(" now_pitch "+str(p[9])+" now_yaw "+str(str(p[8])))
            self.fractionMaxSpeed  = 0.3
            #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
            self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
            #self.motionProxy.setStiffnesses("Head", 0.3);
            self.onStopped(p)
            #self.onStopped(p) #activate the output of the box
        else:
            self.names = ["HeadYaw", "HeadPitch"]
            self.timeLists  = [0.5, 0.5]
            self.PID_P=1
            self.isAbsolute = True
            self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
            self.angles2 =[self.PID_P*self.pole_info[13]+self.pole_info[10],self.PID_P*self.pole_info[14]+self.pole_info[9]]
            self.angles[0]=(self.angles[0]+self.angles2[0])/2.0
            self.angles[1]=(self.angles[1]*0.5+self.angles2[1]*0.5)

            if (self.angles[1]>0.28):
                self.angles[1]=0.28
            if (self.angles[1]<-0.44):
                self.angles[1]=-0.44
            if (self.angles[0]>0.80):
                self.angles[0]=0.80
            if (self.angles[0]<-0.50):
                self.angles[0]=-0.50
            self.fractionMaxSpeed  = 0.3
            #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
            self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
            self.onStopped(p)

        pass
    def onInput_input(self):
        self.pole_info_flag=False
    def onInput_input_pole(self, p):
        self.pole_info=p
        self.pole_info_flag=True]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input_pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="17" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1036" y="86">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="walk2ballnew" id="5" localization="8" tooltip="" x="920" y="617">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def interval_theta(self,theta):
        if (((theta/2.0>0.05) ) or (theta/2.0<-0.05)):
            if ((theta/2.0>0.15)):
                return(0.15)
            elif((theta>0)):
                return(theta/2.0)
            elif((theta/2.0<-0.15)):
                return(-0.15)
            elif((theta<0)):
                return(theta/2.0)
        elif(theta>0):
            return(0.05)
        elif(theta<0):
            return(-0.05)
        else:
            return 0
        pass

    def interval_dis(self,dis):
        if(dis>self.getParameter("exp_x")):
            return 0.5
        else:
            return -0.5
    def onLoad(self):
        self.moveflag=0;
        self.motion = ALProxy("ALMotion")
        self.stopflag=0
        maxstepx = 0.015 #default 0.04
        maxstepy = 0.14 #default 0.14
        maxsteptheta = 0.17 #default 0.349
        maxstepfrequency = 0.5 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        import math
        self.PoleLostFlag=1
        self.PoleInfo=[]
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        self.motion.setMoveArmsEnabled(False,False)
        if(self.stopflag==0):
            self.moveflag=1
            if((self.PoleLostFlag==0)):
                x=(p[10]+self.PoleInfo[11])/2.0
                y=(p[11]+self.PoleInfo[12])/2.0
                theta=math.atan(y/x)
                theta2=math.atan((self.PoleInfo[12]-p[11])/(self.PoleInfo[11]-p[10]))
                beta=-math.atan(self.PoleInfo[12]/self.PoleInfo[11])
                s=p[10]*math.cos(beta)-p[11]*math.sin(beta)
                t=p[10]*math.sin(beta)+p[11]*math.cos(beta)
                if (t>0):
                    self.motion.moveToward(0, 0.3, (self.interval_theta(theta))/2.0)#,self.moveConfig)
                else:
                    self.motion.moveToward(0, -0.3, (self.interval_theta(theta))/2.0)#,self.moveConfig)
                self.output([p[10],p[11],self.PoleInfo[11],self.PoleInfo[12]])
            self.onStopped() #activate the output of the box
        pass
    def onInput_signalLost(self):
        if (self.moveflag==1):
            self.motion.stopMove()
            self.moveflag=0
        pass
    def onInput_onStop(self):
        self.stopflag=1
        self.motion.moveToward(0, 0, 0)

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box
    def onInput_input_pole(self,p):
        self.PoleLostFlag=0
        self.PoleInfo=p
        pass
    def onInput_input_PoleLost(self):
        self.PoleLostFlag=1
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="signalLost" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Input name="input_pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="input_PoleLost" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="7" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Parameter name="exp_y" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="" id="9" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.15" min="0" max="3" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Counter" id="6" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="501" y="280">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        circleBallx=0
    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="1" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="724" y="412">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="476" y="408">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="serch" id="21" localization="8" tooltip="" x="478" y="949">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="HeadMove (1)" id="1" localization="8" tooltip="Enter tooltip here" x="113" y="117">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="776" y="351">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="21">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="21" value="-0.00240423" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="21" value="16.2576" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="16">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="0.612832" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="-26.1941" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-35.7743" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="7.64417" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="26.7167" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="5.62267" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
                break
        pass

    def onInput_onStop(self):
        self.Problem()
        self.onUnload()


        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="hgj" id="7" localization="8" tooltip="" x="471" y="692">
                                                                                                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="645" y="732">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once (1)" id="12" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="702" y="204">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="Counter (1)" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="181" y="587">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="judge" id="11" localization="8" tooltip="" x="147" y="151">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):


        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if ((p[0]>0)and(p[10]>0)and(p[10]<10)):
            Ballx=p[10]
            Bally=p[11]
            self.onStopped(p)

            self.log(["Ballx "+str(p[10])+" Bally "+str(p[11])])
        pass
    def onInput_input2(self, p):
        if ((p[0]>0)and(p[11]>0)and(p[11]<10)):
            Polex=p[11]
            Poley=p[12]
            self.output(p)

            self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Counter (2)" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="146" y="769">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="8" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Counter (3)" id="15" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1186" y="306">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="1" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="if" id="13" localization="8" tooltip="" x="1110" y="564">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        tan=(p[3]-p[1])/(p[2]-p[0])
        theta=math.atan(tan)
        if ((theta<0.06)and(theta>-0.06)):
            self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="3" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="7" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="12" indexofoutput="3" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="17" indexofoutput="4" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="10" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="10" indexofinput="4" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="10" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="4" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="1" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="5" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="5" indexofinput="6" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="8" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="go to shoot point (2)" id="8" localization="8" tooltip="" x="763" y="246">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="njuFindBall" type="0" type_size="1" nature="4" stm_value_name="njuFindBall" inner="1" tooltip="njuFindBall desc" id="4" />
                                                <Input name="njuFindPole" type="0" type_size="1" nature="4" stm_value_name="njuFindPole" inner="1" tooltip="njuFindPole desc" id="5" />
                                                <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="8" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="endFind" id="3" localization="8" tooltip="" x="1386" y="249">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="selectcam" id="16" localization="8" tooltip="" x="372" y="27">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="cam_up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="selectcam" id="3" localization="8" tooltip="" x="202" y="33">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
        self.njuModule=ALProxy("njunaoModule");
    def onUnload(self):
        #put clean-up code here

        pass

    def onInput_camup(self):
        #self.onStopped() #activate the output of     the box
        self.njuModule.ChangeCamera(0)
        self.onStopped()
        pass

    def onInput_camdown(self):
        self.njuModule.ChangeCamera(1)
        self.onStopped()
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="camup" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Box name="findBallNew (2)" id="4" localization="8" tooltip="" x="406" y="27">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.njuModule=ALProxy("njunaoModule");
        self.Mem=ALProxy("ALMemory")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.njuModule.registerToVideoDevice(vision_definitions.kVGA, vision_definitions.kBGRColorSpace)
        self.njuModule.post.ContinuousRefreshCam()
        time.sleep(0.5)
        self.njuModule.post.ContinuousFindBall()
        self.njuModule.post.ContinuousFindPole()
        #self.njuModule.ChangeCamera(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="walk2ballnew" id="5" localization="8" tooltip="" x="1030" y="743">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def interval_theta(self,theta):
        if ((theta>0.15)):
            return(0.15)
        elif((theta>0)):
            return(theta)
        elif((theta<-0.15)):
            return(-0.15)
        elif((theta<0)):
            return(theta)
        else:
            return 0
        pass

    def interval_dis(self,dis):
        exp_x=self.getParameter("exp_x")
        error=dis-exp_x

        if(error/3.0>0.001):
            if (error/3.0>0.5):
                return 0.5
            else:
                return error/3.0
        elif(error/3.0<-0.001):
            if (error/3.0<-0.5):
                return -0.5
            else:
                return error/3.0
        else:
            return 0
    def interval_y(self,dis):
        exp_y=self.getParameter("exp_y")
        error=dis-exp_y
        if(error/1.4>0.001):
            if (error/1.4>0.7):
                return 0.7
            else:
                return error/1.4

        elif(error/1.4<-0.001):
            if (error/1.4<-0.7):
                return -0.7
            else:
                return error/1.4
        else:
            return 0
    def onLoad(self):
        self.moveflag=0;
        self.motion = ALProxy("ALMotion")
        self.stopflag=0
        maxstepx = 0.04 #default 0.04
        maxstepy = 0.14 #default 0.14
        maxsteptheta = 0.17 #default 0.349
        maxstepfrequency = 0.5 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepFrequency",maxstepfrequency],["MaxStepX",maxstepx]]
        import math
        self.PoleLostFlag=True
        self.PoleInfo=[]
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        self.motion.setMoveArmsEnabled(False,False)
        if(self.stopflag==0):
            self.moveflag=1
            if ((self.PoleLostFlag==False)):
                x=(p[10]+self.PoleInfo[11])/2.0
                y=(p[11]+self.PoleInfo[12])/2.0
                theta=math.atan(y/x)
                theta2=math.atan((self.PoleInfo[12]-p[11])/(self.PoleInfo[11]-p[10]))
                self.motion.moveTo(self.interval_dis(p[10]), self.interval_y(p[11]), self.interval_theta(theta2),self.moveConfig)
                self.log("theta = "+str(theta2))
                self.output([p[10],p[11],self.PoleInfo[11],self.PoleInfo[12],self.getParameter("exp_x"),self.getParameter("exp_y"),theta2])
            self.onStopped() #activate the output of the box
        else:
            self.motion.stopMove()
    def onInput_signalLost(self):
        if (self.moveflag==1):
            self.motion.stopMove()
            self.moveflag=0
        pass
    def onInput_onStop(self):
        self.stopflag=1
        self.motion.stopMove()

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box
    def onInput_input_pole(self,p):
        self.PoleLostFlag=False
        self.PoleInfo=p
        pass
    def onInput_input_PoleLost(self):
        self.PoleLostFlag=True
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="signalLost" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Input name="input_pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="input_PoleLost" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="7" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Parameter name="exp_y" inherits_from_parent="0" content_type="2" value="-0.2" default_value="0" min="-1" max="1" tooltip="" id="9" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.08" default_value="0.15" min="0" max="3" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Counter" id="6" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="419" y="273">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        circleBallx=0
    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="753" y="372">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="505" y="368">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="serch" id="21" localization="8" tooltip="" x="509" y="915">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="HeadMove" id="2" localization="8" tooltip="Enter tooltip here" x="242" y="267">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="776" y="351">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="18">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="18" value="-31.3797" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="18" value="19.3338" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="16">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="0.612832" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="-26.1941" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="374" y="381">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
            time.sleep(4)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
                break
        pass

    def onInput_onStop(self):
        if (self.bMustStop==False):
            self.bMustStop==True
            self.Problem()
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="hgj" id="7" localization="8" tooltip="" x="914" y="327">
                                                                                                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1" />
                                                                                                        </Box>
                                                                                                        <Box name="Animation (1)" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="790" y="589">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="21">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="21" value="-0.266077" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="21" value="8.25942" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation (2)" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="801" y="700">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="16">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="0.612832" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="-26.1941" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="561" y="571">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Counter (1)" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="160" y="574">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="8" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="judge" id="11" localization="8" tooltip="" x="358" y="125">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):

        self.ballx_last=0
        self.bally_last=0
        self.polex_last=0
        self.poley_last=0
        self.startmovingflag=True
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if ((p[0]>0)and(p[10]>0)and(p[10]<1.8)):
            if (not (abs(p[10]-self.ballx_last)>0.4 or abs(p[11]-self.bally_last)>0.4)):
                self.ballx_last=p[10]
                self.bally_last=p[11]

                Ballx=p[10]
                Bally=p[11]

                self.onStopped(p)
                self.log(["Ballx "+str(p[10])+" Bally "+str(p[11])])
            else:
                self.ballx_last=p[10]
                self.bally_last=p[11]
        pass
    def onInput_input2(self, p):
        if ((p[0]>0)and(p[11]>0)and(p[11]<2.5)):
            if (not (abs(p[11]-self.polex_last)>0.6 or abs(p[12]-self.poley_last)>0.6)):
                self.polex_last=p[11]
                self.poley_last=p[12]
                self.output(p)
            else:
                self.polex_last=p[11]
                self.poley_last=p[12]

        pass
            #self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])
    def onInput_startmoving(self):
        self.startmovingflag=True
    def onInput_endmoving(self):
        self.startmovingflag=False]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="startmoving" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="endmoving" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="7" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                </Box>
                                                                <Box name="Counter (2)" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="138" y="708">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="8" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Counter (3)" id="15" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1136" y="413">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="3" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="if" id="13" localization="8" tooltip="" x="1358" y="615">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        tan=(p[3]-p[1])/(p[2]-p[0])
        theta=math.atan(tan)
        errorx=p[0]-p[4]
        errory=p[1]-p[5]
        if ((abs(errorx)<0.02)and(abs(errory)<0.02)and(abs(p[6]<0.025))):
            self.onStopped()
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="headmove" id="2" localization="8" tooltip="" x="1255" y="142">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")
        self.pole_info=[]
        self.pole_info_flag=False
        self.ball_info=[]
        self.ball_info_flag=False
        self.num=0
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.num=self.num+1;
        if (self.num==2):
            self.num=0
        self.names = ["HeadYaw", "HeadPitch"]
        self.timeLists  = [0.5, 0.5]
        self.PID_P=1
        self.isAbsolute = True
        if (self.num==0):
            self.angles  = [self.PID_P*self.ball_info[2]+self.ball_info[14],self.PID_P*self.ball_info[3]+self.ball_info[13]-0.1]
        elif (self.num==1):
            self.angles  = [self.PID_P*self.pole_info[13]+self.pole_info[10],self.PID_P*self.pole_info[14]+self.pole_info[9]]
        #yaw 0.5235
        #pitch 0.2268
        if (self.angles[1]>0.29):
            self.angles[1]=0.29
        if (self.angles[0]>0.5235):
            self.angles[0]=0.5235
        if (self.angles[0]<-0.5235):
            self.angles[0]=-0.5235
        self.startmoving()
        time.sleep(1)
        self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
        time.sleep(1)
        self.endmoving()
        time.sleep(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_input_Pole(self, p):
        self.pole_info=p
        self.pole_info_flag=True
        pass

    def onInput_input_Ball(self, p):
        self.ball_info=p
        self.ball_info_flag=True
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="input_Pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="input_Ball" type="0" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="6" />
                                                                    <Output name="startmoving" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Output name="endmoving" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                </Box>
                                                                <Box name="Wait For Signals (3)" id="4" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="643" y="213">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once (2)" id="18" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="954" y="235">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="Delay" id="10" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="1079" y="192">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Delay (1)" id="12" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="949" y="456">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="7" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="17" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="368" y="922">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="judge (1)" id="19" localization="8" tooltip="" x="101" y="127">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):

        self.ballx_last=0
        self.bally_last=0
        self.polex_last=0
        self.poley_last=0
        self.startmovingflag=False
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if (not self.startmovingflag):
            self.onStopped(p)
        pass

    def onInput_input2(self, p):
        if (not self.startmovingflag):
            self.output(p)
        pass
            #self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])
    def onInput_startmoving(self):
        self.startmovingflag=True
    def onInput_endmoving(self):
        self.startmovingflag=False]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="startmoving" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="endmoving" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="7" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Output name="startmoving_ballout" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                    <Output name="startmoving_poleout" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Counter (4)" id="20" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="696" y="884">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="3" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="move" id="22" localization="8" tooltip="" x="895" y="890">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")

    def onLoad(self):
        maxstepx = 0.02 #default 0.04
        maxstepy = 0.11 #default 0.14
        maxsteptheta = 0.020 #default 0.349
        maxstepfrequency = 1.0 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        self.onrun=0
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.motionProxy.setMoveArmsEnabled(False,False)
        self.onrun=1
        #self.motionProxy.setStiffnesses("Head", 0.7);
        self.motionProxy.moveToward(-0.2,0,0,self.moveConfig)
        #time.sleep(1)
        #self.motionProxy.setStiffnesses("Head", 0.3);

        self.onStopped()
        #self.onStopped(p) #activate the output of the box
        pass
    def onInput_input(self):
        if (self.onrun==1):
            self.motionProxy.stopMove()
            self.onrun=0
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="3" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="11" indexofoutput="7" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="7" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="7" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="8" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="1" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="5" outputowner="11" indexofoutput="8" />
                                                                <Link inputowner="5" indexofinput="6" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="11" indexofoutput="7" />
                                                                <Link inputowner="4" indexofinput="3" outputowner="11" indexofoutput="8" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="5" outputowner="11" indexofoutput="7" />
                                                                <Link inputowner="2" indexofinput="4" outputowner="11" indexofoutput="8" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="18" indexofoutput="3" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="12" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="2" outputowner="11" indexofoutput="7" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="11" indexofoutput="8" />
                                                                <Link inputowner="21" indexofinput="3" outputowner="17" indexofoutput="4" />
                                                                <Link inputowner="19" indexofinput="5" outputowner="2" indexofoutput="7" />
                                                                <Link inputowner="19" indexofinput="6" outputowner="2" indexofoutput="8" />
                                                                <Link inputowner="19" indexofinput="3" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="19" indexofinput="4" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="19" indexofoutput="7" />
                                                                <Link inputowner="11" indexofinput="4" outputowner="19" indexofoutput="8" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="19" indexofoutput="7" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="19" indexofoutput="8" />
                                                                <Link inputowner="20" indexofinput="2" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="20" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="22" indexofinput="2" outputowner="20" indexofoutput="5" />
                                                                <Link inputowner="22" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="go to right position (2)" id="9" localization="8" tooltip="" x="531" y="414">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="njuFindBall" type="0" type_size="1" nature="4" stm_value_name="njuFindBall" inner="1" tooltip="njuFindBall desc" id="4" />
                                                <Input name="njuFindPole" type="0" type_size="1" nature="4" stm_value_name="njuFindPole" inner="1" tooltip="njuFindPole desc" id="5" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="endFind" id="3" localization="8" tooltip="" x="1406" y="287">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="selectcam" id="16" localization="8" tooltip="" x="419" y="57">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="cam_up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="selectcam" id="3" localization="8" tooltip="" x="202" y="33">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
        self.njuModule=ALProxy("njunaoModule");
    def onUnload(self):
        #put clean-up code here

        pass

    def onInput_camup(self):
        #self.onStopped() #activate the output of     the box
        self.njuModule.ChangeCamera(0)
        self.onStopped()
        pass

    def onInput_camdown(self):
        self.njuModule.ChangeCamera(1)
        self.onStopped()
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="camup" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Box name="findBallNew (2)" id="4" localization="8" tooltip="" x="406" y="27">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.njuModule=ALProxy("njunaoModule");
        self.Mem=ALProxy("ALMemory")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.njuModule.registerToVideoDevice(vision_definitions.kVGA, vision_definitions.kBGRColorSpace)
        self.njuModule.post.ContinuousRefreshCam()
        time.sleep(0.5)
        self.njuModule.post.ContinuousFindBall()
        self.njuModule.post.ContinuousFindPole()
        #self.njuModule.ChangeCamera(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move_head" id="10" localization="8" tooltip="" x="1059" y="220">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")
        self.y=[0,0]
        self.num=0
        self.pole_info=[]
        self.pole_info_flag=False
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        if (not self.pole_info_flag):
            #self.motionProxy.setStiffnesses("Head", 0.7);
            self.num=self.num+1
            if (self.num==4):
                self.num=0;
            self.names = ["HeadYaw", "HeadPitch"]
            self.timeLists  = [0.7, 0.7]
            self.PID_P=1
            self.isAbsolute = True
            self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
            if (self.num==0):
                self.angles[0]=self.angles[0]+0.25;
                self.angles[1]=self.angles[1]+0.25;
            elif(self.num==1):
                self.angles[0]=self.angles[0]-0.25;
                self.angles[1]=self.angles[1]+0.25;
            elif(self.num==2):
                self.angles[0]=self.angles[0]-0.25;
                self.angles[1]=self.angles[1]-0.25;
            elif(self.num==3):
                self.angles[0]=self.angles[0]+0.25;
                self.angles[1]=self.angles[1]-0.25;

            if (self.angles[1]>0.28):
                self.angles[1]=0.28
            if (self.angles[1]<-0.44):
                self.angles[1]=-0.44
            if (self.angles[0]>0.70):
                self.angles[0]=0.70
            if (self.angles[0]<-0.40):
                self.angles[0]=-0.40
            #self.log(" exp_yaw "+str(self.angles[0])+" now_pitch "+str(p[14]))
            #self.log(" now_pitch "+str(p[9])+" now_yaw "+str(str(p[8])))
            self.fractionMaxSpeed  = 0.3
            #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
            self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
            #self.motionProxy.setStiffnesses("Head", 0.3);
            self.onStopped(p)
            #self.onStopped(p) #activate the output of the box
        else:
            self.names = ["HeadYaw", "HeadPitch"]
            self.timeLists  = [0.5, 0.5]
            self.PID_P=1
            self.isAbsolute = True
            self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
            self.angles2 =[self.PID_P*self.pole_info[13]+self.pole_info[10],self.PID_P*self.pole_info[14]+self.pole_info[9]]
            self.angles[0]=(self.angles[0]+self.angles2[0])/2.0
            self.angles[1]=(self.angles[1]*0.5+self.angles2[1]*0.5)

            if (self.angles[1]>0.28):
                self.angles[1]=0.28
            if (self.angles[1]<-0.44):
                self.angles[1]=-0.44
            if (self.angles[0]>0.80):
                self.angles[0]=0.80
            if (self.angles[0]<-0.50):
                self.angles[0]=-0.50
            self.fractionMaxSpeed  = 0.3
            #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
            self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
            self.onStopped(p)

        pass
    def onInput_input(self):
        self.pole_info_flag=False
    def onInput_input_pole(self, p):
        self.pole_info=p
        self.pole_info_flag=True]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input_pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="17" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1036" y="86">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="walk2ballnew" id="5" localization="8" tooltip="" x="920" y="617">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def interval_theta(self,theta):
        if (((theta/2.0>0.05) ) or (theta/2.0<-0.05)):
            if ((theta/2.0>0.15)):
                return(0.15)
            elif((theta>0)):
                return(theta/2.0)
            elif((theta/2.0<-0.15)):
                return(-0.15)
            elif((theta<0)):
                return(theta/2.0)
        elif(theta>0):
            return(0.05)
        elif(theta<0):
            return(-0.05)
        else:
            return 0
        pass

    def interval_dis(self,dis):
        if(dis>self.getParameter("exp_x")):
            return 0.5
        else:
            return -0.5
    def onLoad(self):
        self.moveflag=0;
        self.motion = ALProxy("ALMotion")
        self.stopflag=0
        maxstepx = 0.015 #default 0.04
        maxstepy = 0.14 #default 0.14
        maxsteptheta = 0.17 #default 0.349
        maxstepfrequency = 0.5 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        import math
        self.PoleLostFlag=1
        self.PoleInfo=[]
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        self.motion.setMoveArmsEnabled(False,False)
        if(self.stopflag==0):
            self.moveflag=1
            if((self.PoleLostFlag==0)):
                x=(p[10]+self.PoleInfo[11])/2.0
                y=(p[11]+self.PoleInfo[12])/2.0
                theta=math.atan(y/x)
                theta2=math.atan((self.PoleInfo[12]-p[11])/(self.PoleInfo[11]-p[10]))
                beta=-math.atan(self.PoleInfo[12]/self.PoleInfo[11])
                s=p[10]*math.cos(beta)-p[11]*math.sin(beta)
                t=p[10]*math.sin(beta)+p[11]*math.cos(beta)
                if (t>0):
                    self.motion.moveToward((p[10]-1)/2.0, 0.3, (self.interval_theta(theta))/2.0)#,self.moveConfig)
                else:
                    self.motion.moveToward((p[10]-1)/2.0, -0.3, (self.interval_theta(theta))/2.0)#,self.moveConfig)
                self.output([p[10],p[11],self.PoleInfo[11],self.PoleInfo[12]])
            self.onStopped() #activate the output of the box
        pass
    def onInput_signalLost(self):
        if (self.moveflag==1):
            self.motion.stopMove()
            self.moveflag=0
        pass
    def onInput_onStop(self):
        self.stopflag=1
        self.motion.moveToward(0, 0, 0)

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box
    def onInput_input_pole(self,p):
        self.PoleLostFlag=0
        self.PoleInfo=p
        pass
    def onInput_input_PoleLost(self):
        self.PoleLostFlag=1
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="signalLost" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Input name="input_pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="input_PoleLost" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="7" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Parameter name="exp_y" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="" id="9" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.15" min="0" max="3" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Counter" id="6" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="501" y="280">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        circleBallx=0
    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="1" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="724" y="412">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="476" y="408">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="serch" id="21" localization="8" tooltip="" x="478" y="949">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="HeadMove (1)" id="1" localization="8" tooltip="Enter tooltip here" x="113" y="117">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="776" y="351">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="21">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="21" value="-0.00240423" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="21" value="16.2576" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="16">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="0.612832" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="-26.1941" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-35.7743" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="7.64417" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="26.7167" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="5.62267" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
                break
        pass

    def onInput_onStop(self):
        self.Problem()
        self.onUnload()


        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="hgj" id="7" localization="8" tooltip="" x="914" y="327">
                                                                                                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="645" y="732">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once (1)" id="12" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="702" y="204">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="Counter (1)" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="181" y="587">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="judge" id="11" localization="8" tooltip="" x="147" y="151">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):


        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if ((p[0]>0)and(p[10]>0)and(p[10]<10)):
            Ballx=p[10]
            Bally=p[11]
            self.onStopped(p)

            self.log(["Ballx "+str(p[10])+" Bally "+str(p[11])])
        pass
    def onInput_input2(self, p):
        if ((p[0]>0)and(p[11]>0)and(p[11]<10)):
            Polex=p[11]
            Poley=p[12]
            self.output(p)

            self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Counter (2)" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="146" y="769">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="8" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Counter (3)" id="15" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1186" y="306">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="1" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="if" id="13" localization="8" tooltip="" x="1110" y="564">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        tan=(p[3]-p[1])/(p[2]-p[0])
        theta=math.atan(tan)
        if ((theta<0.06)and(theta>-0.06)):
            self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="3" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="7" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="12" indexofoutput="3" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="17" indexofoutput="4" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="10" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="10" indexofinput="4" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="10" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="4" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="1" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="5" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="5" indexofinput="6" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="8" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="7" />
                                            <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="6" />
                                            <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="6" />
                                            <Link inputowner="9" indexofinput="2" outputowner="3" indexofoutput="8" />
                                            <Link inputowner="8" indexofinput="2" outputowner="9" indexofoutput="6" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="8" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="gotolin (1)" id="6" localization="8" tooltip="" x="593" y="422">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="turn to ball" id="18" localization="8" tooltip="" x="1019" y="547">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="njuFindBall" type="0" type_size="1" nature="4" stm_value_name="njuFindBall" inner="1" tooltip="njuFindBall desc" id="4" />
                                                <Input name="njuFindPole" type="0" type_size="1" nature="4" stm_value_name="njuFindPole" inner="1" tooltip="njuFindPole desc" id="5" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="endFind" id="3" localization="8" tooltip="" x="1249" y="541">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="selectcam" id="16" localization="8" tooltip="" x="357" y="99">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="cam_up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="selectcam" id="3" localization="8" tooltip="" x="202" y="33">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
        self.njuModule=ALProxy("njunaoModule");
    def onUnload(self):
        #put clean-up code here

        pass

    def onInput_camup(self):
        #self.onStopped() #activate the output of     the box
        self.njuModule.ChangeCamera(0)
        self.onStopped()
        pass

    def onInput_camdown(self):
        self.njuModule.ChangeCamera(1)
        self.onStopped()
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="camup" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Box name="findBallNew (2)" id="4" localization="8" tooltip="" x="406" y="27">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.njuModule=ALProxy("njunaoModule");
        self.Mem=ALProxy("ALMemory")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.njuModule.registerToVideoDevice(vision_definitions.kVGA, vision_definitions.kBGRColorSpace)
        self.njuModule.post.ContinuousRefreshCam()
        self.njuModule.post.ContinuousFindBall()
        self.njuModule.post.ContinuousFindPole()
        #self.njuModule.ChangeCamera(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move_head" id="10" localization="8" tooltip="" x="862" y="358">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")
        self.y=[0,0]
        self.num=0
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        #self.motionProxy.setStiffnesses("Head", 0.7);
        self.num=self.num+1
        if (self.num==4):
            self.num=0;
        self.names = ["HeadYaw", "HeadPitch"]
        self.timeLists  = [0.5, 0.5]
        self.PID_P=1
        self.isAbsolute = True
        self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
        self.num=4
        if (self.num==0):
            self.angles[0]=self.angles[0]+0.2;
            self.angles[1]=self.angles[1]+0.2;
        elif(self.num==1):
            self.angles[0]=self.angles[0]-0.2;
            self.angles[1]=self.angles[1]+0.2;
        elif(self.num==2):
            self.angles[0]=self.angles[0]-0.2;
            self.angles[1]=self.angles[1]-0.2;
        elif(self.num==3):
            self.angles[0]=self.angles[0]+0.2;
            self.angles[1]=self.angles[1]-0.2;

        if (self.angles[1]>0.28):
            self.angles[1]=0.28
        if (self.angles[1]<-0.44):
            self.angles[1]=-0.44
        if (self.angles[0]>0.70):
            self.angles[0]=0.70
        if (self.angles[0]<-0.40):
            self.angles[0]=-0.40
        #self.log(" exp_yaw "+str(self.angles[0])+" now_pitch "+str(p[14]))
        #self.log(" now_pitch "+str(p[9])+" now_yaw "+str(str(p[8])))
        self.fractionMaxSpeed  = 0.3
        #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
        #self.motionProxy.setStiffnesses("Head", 0.3);
        self.onStopped(p)
        #self.onStopped(p) #activate the output of the box
        pass
    def onInput_input():
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="17" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="821" y="222">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="walk2ballnew" id="5" localization="8" tooltip="" x="749" y="725">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def interval_theta(self,theta):
        if (((theta/2.0>0.05) ) or (theta/2.0<-0.05)):
            if ((theta/2.0>0.3)):
                return(0.3)
            elif((theta>0)):
                return(theta/2.0)
            elif((theta/2.0<-0.3)):
                return(-0.3)
            elif((theta<0)):
                return(theta/2.0)
        elif(theta>0):
            return(0.05)
        elif(theta<0):
            return(-0.05)
        else:
            return 0
        pass
    def interval_dis(self,dis):
        if(dis>self.getParameter("exp_x")):
            return 0.5
        else:
            return -0.5
    def onLoad(self):
        self.moveflag=0;
        self.motion = ALProxy("ALMotion")
        self.stopflag=0
        maxstepx = 0.02 #default 0.04
        maxstepy = 0.11 #default 0.14
        maxsteptheta = 0.3490 #default 0.349
        maxstepfrequency = 1.0 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        self.moveflag=1
        if(self.stopflag==0):
            x=p[10]
            y=p[11]
            theta=math.atan(y/x)
            self.motion.moveToward(0, 0.0, self.interval_theta(theta),self.moveConfig)
            self.onStopped() #activate the output of the box
        pass
    def onInput_signalLost(self):
        if (self.moveflag==1):
            self.motion.stopMove()
            self.moveflag=0
        pass
    def onInput_onStop(self):
        self.stopflag=1
        self.motion.moveToward(0, 0, 0)

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="signalLost" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Parameter name="exp_y" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="" id="6" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.15" min="0" max="3" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Counter" id="6" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="322" y="352">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="4" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="662" y="454">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="414" y="450">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="serch" id="21" localization="8" tooltip="" x="407" y="735">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="HeadMove (1)" id="1" localization="8" tooltip="Enter tooltip here" x="113" y="117">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="776" y="351">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="21">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="21" value="-0.00240423" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="21" value="16.2576" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="16">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="0.612832" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="-26.1941" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-35.7743" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="7.64417" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="26.7167" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="5.62267" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="hgj" id="7" localization="8" tooltip="" x="914" y="327">
                                                                                                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="move" id="10" localization="8" tooltip="" x="298" y="361">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")

    def onLoad(self):
        maxstepx = 0.02 #default 0.04
        maxstepy = 0.11 #default 0.14
        maxsteptheta = 0.020 #default 0.349
        maxstepfrequency = 1.0 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        self.onrun=0
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.onrun=1
        #self.motionProxy.setStiffnesses("Head", 0.7);
        self.motionProxy.moveToward(0,0,-0.6,self.moveConfig)
        #time.sleep(1)
        #self.motionProxy.setStiffnesses("Head", 0.3);

        self.onStopped()
        #self.onStopped(p) #activate the output of the box
        pass
    def onInput_input(self):
        if (self.onrun==1):
            self.motionProxy.stopMove()
            self.onrun=0
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="414" y="568">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once (1)" id="12" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="503" y="323">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="Counter (1)" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="214" y="593">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="if" id="13" localization="8" tooltip="" x="890" y="476">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        x=p[10]
        y=p[11]
        theta=math.atan(y/x)
        if ((theta<0.02)and(theta>-0.02)):
            self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.15" min="0" max="3" tooltip="" id="5" />
                                                                </Box>
                                                                <Box name="judge" id="11" localization="8" tooltip="" x="136" y="255">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):


        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if ((p[0]>0)and(p[10]>0)and(p[10]<10)):
            Ballx=p[10]
            Bally=p[11]
            self.onStopped(p)

            self.log(["Ballx "+str(p[10])+" Bally "+str(p[11])])
        pass
    def onInput_input2(self, p):
        if ((p[0]>0)and(p[11]>0)and(p[11]<10)):
            Polex=p[11]
            Poley=p[12]
            self.output(p)

            self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Counter (2)" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="182" y="708">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Counter (3)" id="15" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1126" y="395">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="3" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="3" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="12" indexofoutput="3" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="17" indexofoutput="4" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="3" indexofinput="1" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="4" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="go to shoot point" id="2" localization="8" tooltip="" x="898" y="659">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="njuFindBall" type="0" type_size="1" nature="4" stm_value_name="njuFindBall" inner="1" tooltip="njuFindBall desc" id="4" />
                                                <Input name="njuFindPole" type="0" type_size="1" nature="4" stm_value_name="njuFindPole" inner="1" tooltip="njuFindPole desc" id="5" />
                                                <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="7" />
                                                <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Output name="output2" type="0" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="endFind" id="3" localization="8" tooltip="" x="1386" y="249">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="selectcam" id="16" localization="8" tooltip="" x="448" y="17">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="cam_up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="selectcam" id="3" localization="8" tooltip="" x="202" y="33">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
        self.njuModule=ALProxy("njunaoModule");
    def onUnload(self):
        #put clean-up code here

        pass

    def onInput_camup(self):
        #self.onStopped() #activate the output of     the box
        self.njuModule.ChangeCamera(0)
        self.onStopped()
        pass

    def onInput_camdown(self):
        self.njuModule.ChangeCamera(1)
        self.onStopped()
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="camup" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Box name="findBallNew (2)" id="4" localization="8" tooltip="" x="406" y="27">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.njuModule=ALProxy("njunaoModule");
        self.Mem=ALProxy("ALMemory")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.njuModule.registerToVideoDevice(vision_definitions.kVGA, vision_definitions.kBGRColorSpace)
        self.njuModule.post.ContinuousRefreshCam()
        time.sleep(0.5)
        self.njuModule.post.ContinuousFindBall()
        self.njuModule.post.ContinuousFindPole()
        #self.njuModule.ChangeCamera(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="walk2ballnew" id="5" localization="8" tooltip="" x="992" y="572">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def interval_theta(self,theta):
        if (((theta/2.0>0.05) ) or (theta/2.0<-0.05)):
            if ((theta/2.0>0.15)):
                return(0.15)
            elif((theta>0)):
                return(theta/2.0)
            elif((theta/2.0<-0.15)):
                return(-0.15)
            elif((theta<0)):
                return(theta/2.0)
        elif(theta>0):
            return(0.05)
        elif(theta<0):
            return(-0.05)
        else:
            return 0
        pass

    def interval_dis(self,dis):
        exp_x=self.getParameter("exp_x")
        error=dis-exp_x

        if(error>0.005):
            if (error>0.5):
                return 0.5
            elif (error<0.08):
                return 0.08
            else:
                return error
        elif(error<-0.005):
            if (error<-0.5):
                return -0.5
            elif (error>-0.02):
                return -0.02
            else:
                return error*1.3
        else:
            return 0
    def interval_y(self,dis):
        exp_y=self.getParameter("exp_y")
        error=dis-exp_y
        if(error>0.02):
            if (error>0.7):
                return 0.7
            elif (error<0.08):
                return 0.08
            else:
                return error

        elif(error<-0.02):
            if (error<-0.7):
                return -0.7
            elif (error<-0.08):
                return -0.08
            else:
                return error
        else:
            return 0
    def onLoad(self):
        self.moveflag=0;
        self.motion = ALProxy("ALMotion")
        self.stopflag=0
        maxstepx = 0.02 #default 0.04
        maxstepy = 0.11 #default 0.14
        maxsteptheta = 0.3490 #default 0.349
        maxstepfrequency = 1.0 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        import math
        self.PoleLostFlag=True
        self.PoleInfo=[]
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        self.motion.setMoveArmsEnabled(False,False)
        if(self.stopflag==0):
            self.moveflag=1
            if ((self.PoleLostFlag==False)):
                x=(p[10]+self.PoleInfo[11])/2.0
                y=(p[11]+self.PoleInfo[12])/2.0
                theta=math.atan(y/x)
                theta2=math.atan((self.PoleInfo[12]-p[11])/(self.PoleInfo[11]-p[10]))
                self.motion.moveToward(self.interval_dis(p[10])*1.2, self.interval_y(p[11])*1.2, self.interval_theta(theta2)/3.0,self.moveConfig)
                self.log("move at  "+str(self.interval_dis(p[10]))+str(self.interval_y(p[11]))+str(self.interval_theta(theta2)/3.0))
                self.output([p[10],p[11],self.PoleInfo[11],self.PoleInfo[12],self.getParameter("exp_x"),self.getParameter("exp_y")])
            self.onStopped() #activate the output of the box
        else:
            self.motion.stopMove()
    def onInput_signalLost(self):
        if (self.moveflag==1):
            self.motion.stopMove()
            self.moveflag=0
        pass
    def onInput_onStop(self):
        self.stopflag=1
        self.motion.stopMove()

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box
    def onInput_input_pole(self,p):
        self.PoleLostFlag=False
        self.PoleInfo=p
        pass
    def onInput_input_PoleLost(self):
        self.PoleLostFlag=True
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="signalLost" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Input name="input_pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="input_PoleLost" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="7" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Parameter name="exp_y" inherits_from_parent="0" content_type="2" value="-0.14" default_value="0" min="-1" max="1" tooltip="" id="9" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.15" min="0" max="3" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Counter" id="6" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="528" y="280">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        circleBallx=0
    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="753" y="372">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="505" y="368">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="serch" id="21" localization="8" tooltip="" x="513" y="704">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="HeadMove" id="2" localization="8" tooltip="Enter tooltip here" x="242" y="267">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="776" y="351">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="20">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="20" value="0.612832" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="20" value="23.3768" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="16">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="0.612832" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="-26.1941" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-41.0478" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-3.95753" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="49.5685" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-6.94585" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
                break
        pass

    def onInput_onStop(self):
        if (self.bMustStop==False):
            self.bMustStop==True
            self.Problem()
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="hgj" id="7" localization="8" tooltip="" x="914" y="327">
                                                                                                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="536" y="507">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Counter (1)" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="157" y="495">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="8" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="judge" id="11" localization="8" tooltip="" x="303" y="120">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):

        self.ballx_last=0
        self.bally_last=0
        self.polex_last=0
        self.poley_last=0

        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if ((p[0]>0)and(p[10]>0)and(p[10]<1.8)):
            if (not (abs(p[10]-self.ballx_last)>0.6 or abs(p[11]-self.bally_last)>0.6)):
                self.ballx_last=p[10]
                self.bally_last=p[11]

                Ballx=p[10]
                Bally=p[11]

                self.onStopped(p)
                self.log(["Ballx "+str(p[10])+" Bally "+str(p[11])])
            else:
                self.ballx_last=p[10]
                self.bally_last=p[11]

        pass
    def onInput_input2(self, p):
        if ((p[0]>0)and(p[11]>0)and(p[11]<4.5)):
            if (not (abs(p[11]-self.polex_last)>0.6 or abs(p[12]-self.poley_last)>0.6)):
                self.polex_last=p[11]
                self.poley_last=p[12]
                self.output(p)
            else:
                self.polex_last=p[11]
                self.poley_last=p[12]

        pass
            #self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Counter (2)" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="310" y="638">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="8" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Counter (3)" id="15" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1136" y="292">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="3" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="if" id="13" localization="8" tooltip="" x="1189" y="594">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        tan=(p[3]-p[1])/(p[2]-p[0])
        theta=math.atan(tan)
        errorx=p[0]-p[4]
        errory=p[1]-p[5]
        if ((errorx<0.1)and(errorx>-0.1)and(errory<0.1)and(errory>-0.1)):
            self.onStopped()
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="headmove" id="2" localization="8" tooltip="" x="1241" y="105">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")
        self.pole_info=[]
        self.pole_info_flag=False
        self.ball_info=[]
        self.ball_info_flag=False
        self.num=0
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.num=self.num+1;
        if (self.num==2):
            self.num=0
        self.names = ["HeadYaw", "HeadPitch"]
        self.timeLists  = [0.5, 0.5]
        self.PID_P=1
        self.isAbsolute = True
        if (self.num==0):
            self.angles  = [self.PID_P*self.ball_info[2]+self.ball_info[14],self.PID_P*self.ball_info[3]+self.ball_info[13]]
        elif (self.num==1):
            self.angles  = [self.PID_P*self.pole_info[13]+self.pole_info[10],self.PID_P*self.pole_info[14]+self.pole_info[9]]
        #yaw 0.5235
        #pitch 0.2268
        if (self.angles[1]>22.5):
            self.angles[1]=22.5
        if (self.angles[0]>0.80):
            self.angles[0]=0.80
        if (self.angles[0]<-0.50):
            self.angles[0]=-0.50
        self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
        time.sleep(1)

        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_input_Pole(self, p):
        self.pole_info=p
        self.pole_info_flag=True
        pass

    def onInput_input_Ball(self, p):
        self.ball_info=p
        self.ball_info_flag=True
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="input_Pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="input_Ball" type="0" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="6" />
                                                                </Box>
                                                                <Box name="Wait For Signals (3)" id="4" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="819" y="234">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once (2)" id="18" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="954" y="235">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="Delay" id="10" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="1079" y="192">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="3" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="7" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="1" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="5" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="5" indexofinput="6" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="4" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="4" indexofinput="3" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="5" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="4" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="18" indexofoutput="3" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="9" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="8" outputowner="11" indexofoutput="6" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="around ball to find pole (1)" id="1" localization="8" tooltip="" x="453" y="157">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="njuFindBall" type="0" type_size="1" nature="4" stm_value_name="njuFindBall" inner="1" tooltip="njuFindBall desc" id="4" />
                                                <Input name="njuFindPole" type="0" type_size="1" nature="4" stm_value_name="njuFindPole" inner="1" tooltip="njuFindPole desc" id="5" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="endFind" id="3" localization="8" tooltip="" x="1344" y="329">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="selectcam" id="16" localization="8" tooltip="" x="357" y="99">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="cam_up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="selectcam" id="3" localization="8" tooltip="" x="202" y="33">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
        self.njuModule=ALProxy("njunaoModule");
    def onUnload(self):
        #put clean-up code here

        pass

    def onInput_camup(self):
        #self.onStopped() #activate the output of     the box
        self.njuModule.ChangeCamera(0)
        self.onStopped()
        pass

    def onInput_camdown(self):
        self.njuModule.ChangeCamera(1)
        self.onStopped()
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="camup" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Box name="findBallNew (2)" id="4" localization="8" tooltip="" x="406" y="27">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.njuModule=ALProxy("njunaoModule");
        self.Mem=ALProxy("ALMemory")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.njuModule.registerToVideoDevice(vision_definitions.kVGA, vision_definitions.kBGRColorSpace)
        self.njuModule.post.ContinuousRefreshCam()
        time.sleep(0.5)
        self.njuModule.post.ContinuousFindBall()
        self.njuModule.post.ContinuousFindPole()
        #self.njuModule.ChangeCamera(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move_head" id="10" localization="8" tooltip="" x="928" y="341">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")
        self.y=[0,0]
        self.num=0
        self.pole_info=[]
        self.pole_info_flag=False
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        if (not self.pole_info_flag):
            #self.motionProxy.setStiffnesses("Head", 0.7);
            self.num=self.num+1
            if (self.num==4):
                self.num=0;
            self.names = ["HeadYaw", "HeadPitch"]
            self.timeLists  = [0.7, 0.7]
            self.PID_P=1
            self.isAbsolute = True
            self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
            if (self.num==0):
                self.angles[0]=self.angles[0]+0.25;
                self.angles[1]=self.angles[1]+0.25;
            elif(self.num==1):
                self.angles[0]=self.angles[0]-0.25;
                self.angles[1]=self.angles[1]+0.25;
            elif(self.num==2):
                self.angles[0]=self.angles[0]-0.25;
                self.angles[1]=self.angles[1]-0.25;
            elif(self.num==3):
                self.angles[0]=self.angles[0]+0.25;
                self.angles[1]=self.angles[1]-0.25;

            if (self.angles[1]>0.28):
                self.angles[1]=0.28
            if (self.angles[1]<-0.44):
                self.angles[1]=-0.44
            if (self.angles[0]>0.70):
                self.angles[0]=0.70
            if (self.angles[0]<-0.40):
                self.angles[0]=-0.40
            #self.log(" exp_yaw "+str(self.angles[0])+" now_pitch "+str(p[14]))
            #self.log(" now_pitch "+str(p[9])+" now_yaw "+str(str(p[8])))
            self.fractionMaxSpeed  = 0.3
            #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
            self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
            #self.motionProxy.setStiffnesses("Head", 0.3);
            self.onStopped(p)
            #self.onStopped(p) #activate the output of the box
        else:
            self.names = ["HeadYaw", "HeadPitch"]
            self.timeLists  = [0.5, 0.5]
            self.PID_P=1
            self.isAbsolute = True
            self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
            self.angles2 =[self.PID_P*self.pole_info[13]+self.pole_info[10],self.PID_P*self.pole_info[14]+self.pole_info[9]]
            self.angles[0]=(self.angles[0]+self.angles2[0])/2.0
            self.angles[1]=(self.angles[1]*0.5+self.angles2[1]*0.5)

            if (self.angles[1]>0.28):
                self.angles[1]=0.28
            if (self.angles[1]<-0.44):
                self.angles[1]=-0.44
            if (self.angles[0]>0.70):
                self.angles[0]=0.70
            if (self.angles[0]<-0.40):
                self.angles[0]=-0.40
            self.fractionMaxSpeed  = 0.3
            #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
            self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
            self.onStopped(p)

        pass
    def onInput_input(self):
        self.pole_info_flag=False
    def onInput_input_pole(self, p):
        self.pole_info=p
        self.pole_info_flag=True]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input_pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="17" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="868" y="168">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="walk2ballnew" id="5" localization="8" tooltip="" x="817" y="636">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def interval_theta(self,theta):
        if (((theta/2.0>0.05) ) or (theta/2.0<-0.05)):
            if ((theta/2.0>0.15)):
                return(0.15)
            elif((theta>0)):
                return(theta/2.0)
            elif((theta/2.0<-0.15)):
                return(-0.15)
            elif((theta<0)):
                return(theta/2.0)
        elif(theta>0):
            return(0.05)
        elif(theta<0):
            return(-0.05)
        else:
            return 0
        pass
    def interval_dis(self,dis):
        if(dis>self.getParameter("exp_x")):
            return 0.5
        else:
            return -0.5
    def onLoad(self):
        self.moveflag=0;
        self.motion = ALProxy("ALMotion")
        self.stopflag=0
        maxstepx = 0.015 #default 0.04
        maxstepy = 0.14 #default 0.14
        maxsteptheta = 0.17 #default 0.349
        maxstepfrequency = 0.5 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        self.motion.setMoveArmsEnabled(False,False)
        self.moveflag=1
        if(self.stopflag==0):
            x=p[10]
            y=p[11]
            theta=math.atan(y/x)
            self.motion.moveToward(0.0, -0.7, self.interval_theta(theta))#,self.moveConfig)
            self.onStopped() #activate the output of the box
        pass
    def onInput_signalLost(self):
        if (self.moveflag==1):
            self.motion.stopMove()
            self.moveflag=0
        pass
    def onInput_onStop(self):
        self.stopflag=1
        self.motion.moveToward(0, 0, 0)

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="signalLost" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Parameter name="exp_y" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="" id="6" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.15" min="0" max="3" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Counter" id="6" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="411" y="283">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        circleBallx=0
    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="1" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="662" y="454">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="414" y="450">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="414" y="568">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once (1)" id="12" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="640" y="246">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="Counter (1)" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="196" y="567">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="judge" id="11" localization="8" tooltip="" x="147" y="216">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):


        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if ((p[0]>0)and(p[10]>0)and(p[10]<10)):
            Ballx=p[10]
            Bally=p[11]
            self.onStopped(p)

            self.log(["Ballx "+str(p[10])+" Bally "+str(p[11])])
        pass
    def onInput_input2(self, p):
        if ((p[0]>0)and(p[11]>0)and(p[11]<10)):
            Polex=p[11]
            Poley=p[12]
            self.output(p)

            self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Counter (2)" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="206" y="778">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Counter (3)" id="15" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1066" y="444">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="8" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="serch (1)" id="2" localization="8" tooltip="" x="556" y="815">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="HeadMove (1)" id="1" localization="8" tooltip="Enter tooltip here" x="203" y="143">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="776" y="351">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="20">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="20" value="0.700723" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="20" value="22.0584" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="16">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="0.612832" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="-26.1941" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-41.0478" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-3.95753" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="49.5685" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-6.94585" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
                break
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="hgj" id="7" localization="8" tooltip="" x="914" y="327">
                                                                                                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="move" id="10" localization="8" tooltip="" x="298" y="361">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")

    def onLoad(self):
        maxstepx = 0.02 #default 0.04
        maxstepy = 0.11 #default 0.14
        maxsteptheta = 0.020 #default 0.349
        maxstepfrequency = 1.0 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        self.onrun=0
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.motionProxy.setMoveArmsEnabled(False,False)
        self.onrun=1
        #self.motionProxy.setStiffnesses("Head", 0.7);
        self.motionProxy.moveToward(0,0,-0.6,self.moveConfig)
        #time.sleep(1)
        #self.motionProxy.setStiffnesses("Head", 0.3);

        self.onStopped()
        #self.onStopped(p) #activate the output of the box
        pass
    def onInput_input(self):
        if (self.onrun==1):
            self.motionProxy.stopMove()
            self.onrun=0
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="3" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="12" indexofoutput="3" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="17" indexofoutput="4" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="10" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="3" indexofinput="1" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="4" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="10" indexofinput="4" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="10" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="go to ball (1)" id="3" localization="8" tooltip="" x="279" y="193">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="njuFindBall" type="0" type_size="1" nature="4" stm_value_name="njuFindBall" inner="1" tooltip="njuFindBall desc" id="4" />
                                                <Input name="njuFindPole" type="0" type_size="1" nature="4" stm_value_name="njuFindPole" inner="1" tooltip="njuFindPole desc" id="5" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="6" />
                                                <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                <Output name="output2" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="endFind" id="3" localization="8" tooltip="" x="1170" y="358">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="selectcam" id="16" localization="8" tooltip="" x="318" y="13">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="cam_up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="selectcam" id="3" localization="8" tooltip="" x="202" y="33">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
        self.njuModule=ALProxy("njunaoModule");
    def onUnload(self):
        #put clean-up code here

        pass

    def onInput_camup(self):
        #self.onStopped() #activate the output of     the box
        self.njuModule.ChangeCamera(0)
        self.onStopped()
        pass

    def onInput_camdown(self):
        self.njuModule.ChangeCamera(1)
        self.onStopped()
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="camup" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Box name="findBallNew (2)" id="4" localization="8" tooltip="" x="406" y="27">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.njuModule=ALProxy("njunaoModule");
        self.Mem=ALProxy("ALMemory")
        import time
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.njuModule.registerToVideoDevice(vision_definitions.kVGA, vision_definitions.kBGRColorSpace)
        self.njuModule.post.ContinuousRefreshCam()
        time.sleep(0.5)
        self.njuModule.post.ContinuousFindBall()
        self.njuModule.post.ContinuousFindPole()
        #self.njuModule.ChangeCamera(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait For Signals" id="17" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="861" y="176">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="walk2ballnew" id="5" localization="8" tooltip="" x="788" y="730">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def interval_theta(self,theta):
        if (((theta/2.0>0.05) ) or (theta/2.0<-0.05)):
            if ((theta/2.0>0.2)):
                return(0.2)
            elif((theta>0)):
                return(theta/2.0)
            elif((theta/2.0<-0.2)):
                return(-0.2)
            elif((theta<0)):
                return(theta/2.0)
        elif(theta>0):
            return(0.03)
        elif(theta<0):
            return(-0.03)
        else:
            return 0
        pass
    def interval_dis(self,dis):
        if(dis>self.getParameter("exp_x")):
            return 0.5
        else:
            return -0.5
    def onLoad(self):
        self.moveflag=0;
        self.motion = ALProxy("ALMotion")
        self.stopflag=0
        maxstepx = 0.015 #default 0.04
        maxstepy = 0.14 #default 0.14
        maxsteptheta = 0.17 #default 0.349
        maxstepfrequency = 0.5 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        self.motion.setMoveArmsEnabled(False,False)
        self.moveflag=1
        if(self.stopflag==0):
            x=p[10]
            y=p[11]+self.getParameter("exp_y")
            theta=math.atan(y/x)
            if (x>(self.getParameter("exp_x")+0.15)):
                self.motion.moveToward(self.interval_dis(x)/2.0, 0.0, self.interval_theta(theta))#,self.moveConfig)
            else:
                self.motion.moveToward(self.interval_dis(x)/6.0, 0.0, self.interval_theta(theta))#,self.moveConfig)
            self.onStopped() #activate the output of the box
        pass
    def onInput_signalLost(self):
        if (self.moveflag==1):
            self.motion.stopMove()
            self.moveflag=0
        pass
    def onInput_onStop(self):
        self.stopflag=1
        self.motion.moveToward(0, 0, 0)

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="signalLost" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Parameter name="exp_y" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="" id="6" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.7" default_value="0.15" min="0" max="3" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Counter" id="6" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="311" y="299">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="586" y="384">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="403" y="397">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="serch" id="21" localization="8" tooltip="" x="512" y="747">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="HeadMove (1)" id="1" localization="8" tooltip="Enter tooltip here" x="203" y="143">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="776" y="351">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="20">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="20" value="0.700723" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="20" value="22.0584" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="16">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="0.612832" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="-26.1941" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-41.0478" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-3.95753" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="49.5685" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-6.94585" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
                break
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="hgj" id="7" localization="8" tooltip="" x="914" y="327">
                                                                                                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="move" id="10" localization="8" tooltip="" x="298" y="361">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")

    def onLoad(self):
        maxstepx = 0.02 #default 0.04
        maxstepy = 0.11 #default 0.14
        maxsteptheta = 0.020 #default 0.349
        maxstepfrequency = 1.0 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        self.onrun=0
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.motionProxy.setMoveArmsEnabled(False,False)
        self.onrun=1
        #self.motionProxy.setStiffnesses("Head", 0.7);
        self.motionProxy.moveToward(0,0,-0.6,self.moveConfig)
        #time.sleep(1)
        #self.motionProxy.setStiffnesses("Head", 0.3);

        self.onStopped()
        #self.onStopped(p) #activate the output of the box
        pass
    def onInput_input(self):
        if (self.onrun==1):
            self.motionProxy.stopMove()
            self.onrun=0
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="505" y="500">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once (1)" id="12" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="492" y="270">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="Counter (1)" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="167" y="552">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="if" id="13" localization="8" tooltip="" x="801" y="438">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        if ((p[10]<self.getParameter("exp_x")+0.02)and(p[10]>self.getParameter("exp_x")-0.02)):
            self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.7" default_value="0.15" min="0" max="3" tooltip="" id="5" />
                                                                </Box>
                                                                <Box name="judge" id="11" localization="8" tooltip="" x="163" y="124">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):


        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if ((p[0]>0)and(p[10]>0)and(p[10]<10)):
            Ballx=p[10]
            Bally=p[11]
            self.onStopped(p)

            self.log(["Ballx "+str(p[10])+" Bally "+str(p[11])])
        pass
    def onInput_input2(self, p):
        if ((p[0]>0)and(p[11]>0)and(p[11]<10)):
            Polex=p[11]
            Poley=p[12]
            self.output(p)

            self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Counter (2)" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="193" y="703">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="move_head (1)" id="2" localization="8" tooltip="" x="903" y="347">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")
        self.y=[0,0]
        self.num=0
        self.pole_info=[]
        self.pole_info_flag=False
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        if (not self.pole_info_flag):
            #self.motionProxy.setStiffnesses("Head", 0.7);
            self.num=self.num+1
            if (self.num==4):
                self.num=0;
            self.names = ["HeadYaw", "HeadPitch"]
            self.timeLists  = [0.7, 0.7]
            self.PID_P=1
            self.isAbsolute = True
            self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
            if (self.num==0):
                self.angles[0]=self.angles[0]+0.25;
                self.angles[1]=self.angles[1]+0.25;
            elif(self.num==1):
                self.angles[0]=self.angles[0]-0.25;
                self.angles[1]=self.angles[1]+0.25;
            elif(self.num==2):
                self.angles[0]=self.angles[0]-0.25;
                self.angles[1]=self.angles[1]-0.25;
            elif(self.num==3):
                self.angles[0]=self.angles[0]+0.25;
                self.angles[1]=self.angles[1]-0.25;

            if (self.angles[1]>0.28):
                self.angles[1]=0.28
            if (self.angles[1]<-0.44):
                self.angles[1]=-0.44
            if (self.angles[0]>0.70):
                self.angles[0]=0.70
            if (self.angles[0]<-0.40):
                self.angles[0]=-0.40
            #self.log(" exp_yaw "+str(self.angles[0])+" now_pitch "+str(p[14]))
            #self.log(" now_pitch "+str(p[9])+" now_yaw "+str(str(p[8])))
            self.fractionMaxSpeed  = 0.3
            #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
            self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
            #self.motionProxy.setStiffnesses("Head", 0.3);
            self.onStopped(p)
            #self.onStopped(p) #activate the output of the box
        else:
            self.names = ["HeadYaw", "HeadPitch"]
            self.timeLists  = [0.5, 0.5]
            self.PID_P=1
            self.isAbsolute = True
            self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
            self.angles2 =[self.PID_P*self.pole_info[13]+self.pole_info[10],self.PID_P*self.pole_info[14]+self.pole_info[9]]
            self.angles[0]=(self.angles[0]+self.angles2[0])/2.0
            self.angles[1]=(self.angles[1]*0.5+self.angles2[1]*0.5)

            if (self.angles[1]>0.28):
                self.angles[1]=0.28
            if (self.angles[1]<-0.44):
                self.angles[1]=-0.44
            if (self.angles[0]>0.70):
                self.angles[0]=0.70
            if (self.angles[0]<-0.40):
                self.angles[0]=-0.40
            self.fractionMaxSpeed  = 0.3
            #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
            self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
            self.onStopped(p)
            if(((self.pole_info[11]*self.pole_info[11]+self.pole_info[12]*self.pole_info[12]<0.25)and(self.pole_info[11]*self.pole_info[11]+self.pole_info[12]*self.pole_info[12]<(p[10]*p[10]+p[11]*p[11])))):
                self.poleball()
            elif(((p[10]*p[10]+p[11]*p[11])<1.5)):
                self.output()

        pass
    def onInput_input(self):
        self.pole_info_flag=False
    def onInput_input_pole(self, p):
        self.pole_info=p
        self.pole_info_flag=True]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input_pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Output name="output" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Output name="poleball" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Counter (3)" id="4" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1062" y="544">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="endFind (1)" id="10" localization="8" tooltip="" x="1217" y="484">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="Counter (4)" id="15" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1120" y="719">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="endFind (2)" id="18" localization="8" tooltip="" x="1275" y="708">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="3" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="12" indexofoutput="3" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="1" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="4" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="17" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="4" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="4" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="4" indexofoutput="5" />
                                                                <Link inputowner="10" indexofinput="1" outputowner="4" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="7" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="8" outputowner="18" indexofoutput="4" />
                                                                <Link inputowner="18" indexofinput="1" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="2" indexofoutput="7" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="go to right position (1)" id="7" localization="8" tooltip="" x="539" y="297">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="njuFindBall" type="0" type_size="1" nature="4" stm_value_name="njuFindBall" inner="1" tooltip="njuFindBall desc" id="4" />
                                                <Input name="njuFindPole" type="0" type_size="1" nature="4" stm_value_name="njuFindPole" inner="1" tooltip="njuFindPole desc" id="5" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="endFind" id="3" localization="8" tooltip="" x="1406" y="287">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="selectcam" id="16" localization="8" tooltip="" x="419" y="57">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="cam_up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="selectcam" id="3" localization="8" tooltip="" x="202" y="33">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
        self.njuModule=ALProxy("njunaoModule");
    def onUnload(self):
        #put clean-up code here

        pass

    def onInput_camup(self):
        #self.onStopped() #activate the output of     the box
        self.njuModule.ChangeCamera(0)
        self.onStopped()
        pass

    def onInput_camdown(self):
        self.njuModule.ChangeCamera(1)
        self.onStopped()
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="camup" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Box name="findBallNew (2)" id="4" localization="8" tooltip="" x="406" y="27">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.njuModule=ALProxy("njunaoModule");
        self.Mem=ALProxy("ALMemory")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.njuModule.registerToVideoDevice(vision_definitions.kVGA, vision_definitions.kBGRColorSpace)
        self.njuModule.post.ContinuousRefreshCam()
        time.sleep(0.5)
        self.njuModule.post.ContinuousFindBall()
        self.njuModule.post.ContinuousFindPole()
        #self.njuModule.ChangeCamera(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move_head" id="10" localization="8" tooltip="" x="1059" y="220">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")
        self.y=[0,0]
        self.num=0
        self.pole_info=[]
        self.pole_info_flag=False
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        if (not self.pole_info_flag):
            #self.motionProxy.setStiffnesses("Head", 0.7);
            self.num=self.num+1
            if (self.num==4):
                self.num=0;
            self.names = ["HeadYaw", "HeadPitch"]
            self.timeLists  = [0.7, 0.7]
            self.PID_P=1
            self.isAbsolute = True
            self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
            if (self.num==0):
                self.angles[0]=self.angles[0]+0.25;
                self.angles[1]=self.angles[1]+0.25;
            elif(self.num==1):
                self.angles[0]=self.angles[0]-0.25;
                self.angles[1]=self.angles[1]+0.25;
            elif(self.num==2):
                self.angles[0]=self.angles[0]-0.25;
                self.angles[1]=self.angles[1]-0.25;
            elif(self.num==3):
                self.angles[0]=self.angles[0]+0.25;
                self.angles[1]=self.angles[1]-0.25;

            if (self.angles[1]>0.28):
                self.angles[1]=0.28
            if (self.angles[1]<-0.44):
                self.angles[1]=-0.44
            if (self.angles[0]>0.70):
                self.angles[0]=0.70
            if (self.angles[0]<-0.40):
                self.angles[0]=-0.40
            #self.log(" exp_yaw "+str(self.angles[0])+" now_pitch "+str(p[14]))
            #self.log(" now_pitch "+str(p[9])+" now_yaw "+str(str(p[8])))
            self.fractionMaxSpeed  = 0.3
            #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
            self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
            #self.motionProxy.setStiffnesses("Head", 0.3);
            self.onStopped(p)
            #self.onStopped(p) #activate the output of the box
        else:
            self.names = ["HeadYaw", "HeadPitch"]
            self.timeLists  = [0.5, 0.5]
            self.PID_P=1
            self.isAbsolute = True
            self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
            self.angles2 =[self.PID_P*self.pole_info[13]+self.pole_info[10],self.PID_P*self.pole_info[14]+self.pole_info[9]]
            self.angles[0]=(self.angles[0]+self.angles2[0])/2.0
            self.angles[1]=(self.angles[1]*0.5+self.angles2[1]*0.5)

            if (self.angles[1]>0.28):
                self.angles[1]=0.28
            if (self.angles[1]<-0.44):
                self.angles[1]=-0.44
            if (self.angles[0]>0.80):
                self.angles[0]=0.80
            if (self.angles[0]<-0.50):
                self.angles[0]=-0.50
            self.fractionMaxSpeed  = 0.3
            #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
            self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
            self.onStopped(p)

        pass
    def onInput_input(self):
        self.pole_info_flag=False
    def onInput_input_pole(self, p):
        self.pole_info=p
        self.pole_info_flag=True]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input_pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="17" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1036" y="86">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="walk2ballnew" id="5" localization="8" tooltip="" x="920" y="617">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def interval_theta(self,theta):
        if (((theta/2.0>0.05) ) or (theta/2.0<-0.05)):
            if ((theta/2.0>0.15)):
                return(0.15)
            elif((theta>0)):
                return(theta/2.0)
            elif((theta/2.0<-0.15)):
                return(-0.15)
            elif((theta<0)):
                return(theta/2.0)
        elif(theta>0):
            return(0.05)
        elif(theta<0):
            return(-0.05)
        else:
            return 0
        pass

    def interval_dis(self,dis):
        if(dis>self.getParameter("exp_x")):
            return 0.5
        else:
            return -0.5
    def onLoad(self):
        self.moveflag=0;
        self.motion = ALProxy("ALMotion")
        self.stopflag=0
        maxstepx = 0.015 #default 0.04
        maxstepy = 0.14 #default 0.14
        maxsteptheta = 0.17 #default 0.349
        maxstepfrequency = 0.5 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        import math
        self.PoleLostFlag=1
        self.PoleInfo=[]
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        self.motion.setMoveArmsEnabled(False,False)
        if(self.stopflag==0):
            self.moveflag=1
            if((self.PoleLostFlag==0)):
                x=(p[10]+self.PoleInfo[11])/2.0
                y=(p[11]+self.PoleInfo[12])/2.0
                theta=math.atan(y/x)
                theta2=math.atan((self.PoleInfo[12]-p[11])/(self.PoleInfo[11]-p[10]))
                beta=-math.atan(self.PoleInfo[12]/self.PoleInfo[11])
                s=p[10]*math.cos(beta)-p[11]*math.sin(beta)
                t=p[10]*math.sin(beta)+p[11]*math.cos(beta)
                if (t>0):
                    self.motion.moveToward(0, 0.3, (self.interval_theta(theta))/2.0)#,self.moveConfig)
                else:
                    self.motion.moveToward(0, -0.3, (self.interval_theta(theta))/2.0)#,self.moveConfig)
                self.output([p[10],p[11],self.PoleInfo[11],self.PoleInfo[12]])
            self.onStopped() #activate the output of the box
        pass
    def onInput_signalLost(self):
        if (self.moveflag==1):
            self.motion.stopMove()
            self.moveflag=0
        pass
    def onInput_onStop(self):
        self.stopflag=1
        self.motion.moveToward(0, 0, 0)

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box
    def onInput_input_pole(self,p):
        self.PoleLostFlag=0
        self.PoleInfo=p
        pass
    def onInput_input_PoleLost(self):
        self.PoleLostFlag=1
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="signalLost" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Input name="input_pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="input_PoleLost" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="7" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Parameter name="exp_y" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="" id="9" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.15" min="0" max="3" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Counter" id="6" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="501" y="280">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        circleBallx=0
    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="1" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="724" y="412">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="476" y="408">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="serch" id="21" localization="8" tooltip="" x="478" y="949">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="HeadMove (1)" id="1" localization="8" tooltip="Enter tooltip here" x="113" y="117">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="776" y="351">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="21">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="21" value="-0.00240423" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="21" value="16.2576" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="16">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="0.612832" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="-26.1941" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-35.7743" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="7.64417" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="26.7167" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="5.62267" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
                break
        pass

    def onInput_onStop(self):
        self.Problem()
        self.onUnload()


        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="hgj" id="7" localization="8" tooltip="" x="914" y="327">
                                                                                                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="645" y="732">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once (1)" id="12" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="702" y="204">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="Counter (1)" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="181" y="587">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="judge" id="11" localization="8" tooltip="" x="147" y="151">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):


        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if ((p[0]>0)and(p[10]>0)and(p[10]<10)):
            Ballx=p[10]
            Bally=p[11]
            self.onStopped(p)

            self.log(["Ballx "+str(p[10])+" Bally "+str(p[11])])
        pass
    def onInput_input2(self, p):
        if ((p[0]>0)and(p[11]>0)and(p[11]<10)):
            Polex=p[11]
            Poley=p[12]
            self.output(p)

            self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Counter (2)" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="146" y="769">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="8" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Counter (3)" id="15" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1186" y="306">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="1" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="if" id="13" localization="8" tooltip="" x="1110" y="564">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        tan=(p[3]-p[1])/(p[2]-p[0])
        theta=math.atan(tan)
        if ((theta<0.06)and(theta>-0.06)):
            self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="3" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="7" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="12" indexofoutput="3" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="17" indexofoutput="4" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="10" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="10" indexofinput="4" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="10" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="4" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="1" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="5" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="5" indexofinput="6" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="8" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="go to shoot point (2)" id="8" localization="8" tooltip="" x="763" y="246">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="njuFindBall" type="0" type_size="1" nature="4" stm_value_name="njuFindBall" inner="1" tooltip="njuFindBall desc" id="4" />
                                                <Input name="njuFindPole" type="0" type_size="1" nature="4" stm_value_name="njuFindPole" inner="1" tooltip="njuFindPole desc" id="5" />
                                                <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="8" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="endFind" id="3" localization="8" tooltip="" x="1386" y="249">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="selectcam" id="16" localization="8" tooltip="" x="372" y="27">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="cam_up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="selectcam" id="3" localization="8" tooltip="" x="202" y="33">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
        self.njuModule=ALProxy("njunaoModule");
    def onUnload(self):
        #put clean-up code here

        pass

    def onInput_camup(self):
        #self.onStopped() #activate the output of     the box
        self.njuModule.ChangeCamera(0)
        self.onStopped()
        pass

    def onInput_camdown(self):
        self.njuModule.ChangeCamera(1)
        self.onStopped()
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="camup" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Box name="findBallNew (2)" id="4" localization="8" tooltip="" x="406" y="27">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.njuModule=ALProxy("njunaoModule");
        self.Mem=ALProxy("ALMemory")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.njuModule.registerToVideoDevice(vision_definitions.kVGA, vision_definitions.kBGRColorSpace)
        self.njuModule.post.ContinuousRefreshCam()
        time.sleep(0.5)
        self.njuModule.post.ContinuousFindBall()
        self.njuModule.post.ContinuousFindPole()
        #self.njuModule.ChangeCamera(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="walk2ballnew" id="5" localization="8" tooltip="" x="1030" y="743">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def interval_theta(self,theta):
        if ((theta>0.15)):
            return(0.15)
        elif((theta>0)):
            return(theta)
        elif((theta<-0.15)):
            return(-0.15)
        elif((theta<0)):
            return(theta)
        else:
            return 0
        pass

    def interval_dis(self,dis):
        exp_x=self.getParameter("exp_x")
        error=dis-exp_x

        if(error/3.0>0.001):
            if (error/3.0>0.5):
                return 0.5
            else:
                return error/3.0
        elif(error/3.0<-0.001):
            if (error/3.0<-0.5):
                return -0.5
            else:
                return error/3.0
        else:
            return 0
    def interval_y(self,dis):
        exp_y=self.getParameter("exp_y")
        error=dis-exp_y
        if(error/1.4>0.001):
            if (error/1.4>0.7):
                return 0.7
            else:
                return error/1.4

        elif(error/1.4<-0.001):
            if (error/1.4<-0.7):
                return -0.7
            else:
                return error/1.4
        else:
            return 0
    def onLoad(self):
        self.moveflag=0;
        self.motion = ALProxy("ALMotion")
        self.stopflag=0
        maxstepx = 0.04 #default 0.04
        maxstepy = 0.14 #default 0.14
        maxsteptheta = 0.17 #default 0.349
        maxstepfrequency = 0.5 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepFrequency",maxstepfrequency],["MaxStepX",maxstepx]]
        import math
        self.PoleLostFlag=True
        self.PoleInfo=[]
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        self.motion.setMoveArmsEnabled(False,False)
        if(self.stopflag==0):
            self.moveflag=1
            if ((self.PoleLostFlag==False)):
                x=(p[10]+self.PoleInfo[11])/2.0
                y=(p[11]+self.PoleInfo[12])/2.0
                theta=math.atan(y/x)
                theta2=math.atan((self.PoleInfo[12]-p[11])/(self.PoleInfo[11]-p[10]))
                self.motion.moveTo(self.interval_dis(p[10]), self.interval_y(p[11]), self.interval_theta(theta2),self.moveConfig)
                self.log("theta = "+str(theta2))
                self.output([p[10],p[11],self.PoleInfo[11],self.PoleInfo[12],self.getParameter("exp_x"),self.getParameter("exp_y"),theta2])
            self.onStopped() #activate the output of the box
        else:
            self.motion.stopMove()
    def onInput_signalLost(self):
        if (self.moveflag==1):
            self.motion.stopMove()
            self.moveflag=0
        pass
    def onInput_onStop(self):
        self.stopflag=1
        self.motion.stopMove()

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box
    def onInput_input_pole(self,p):
        self.PoleLostFlag=False
        self.PoleInfo=p
        pass
    def onInput_input_PoleLost(self):
        self.PoleLostFlag=True
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="signalLost" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Input name="input_pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="input_PoleLost" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="7" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Parameter name="exp_y" inherits_from_parent="0" content_type="2" value="-0.2" default_value="0" min="-1" max="1" tooltip="" id="9" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.08" default_value="0.15" min="0" max="3" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Counter" id="6" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="419" y="273">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        circleBallx=0
    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="753" y="372">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="505" y="368">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="serch" id="21" localization="8" tooltip="" x="509" y="915">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="HeadMove" id="2" localization="8" tooltip="Enter tooltip here" x="242" y="267">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="776" y="351">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="18">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="18" value="-31.3797" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="18" value="19.3338" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="16">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="0.612832" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="-26.1941" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            time.sleep(4)
            if self.counter2 == 2:
                self.counter2 = 0
                self.Problem()
                break
        pass

    def onInput_onStop(self):
        if (self.bMustStop==False):
            self.bMustStop==True
            self.Problem()
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="hgj" id="7" localization="8" tooltip="" x="914" y="327">
                                                                                                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="561" y="571">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Counter (1)" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="160" y="574">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="8" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="judge" id="11" localization="8" tooltip="" x="290" y="149">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):

        self.ballx_last=0
        self.bally_last=0
        self.polex_last=0
        self.poley_last=0
        self.startmovingflag=True
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if ((p[0]>0)and(p[10]>0)and(p[10]<1.8)):
            if (not (abs(p[10]-self.ballx_last)>0.4 or abs(p[11]-self.bally_last)>0.4)):
                self.ballx_last=p[10]
                self.bally_last=p[11]

                Ballx=p[10]
                Bally=p[11]

                self.onStopped(p)
                self.log(["Ballx "+str(p[10])+" Bally "+str(p[11])])
            else:
                self.ballx_last=p[10]
                self.bally_last=p[11]
        pass
    def onInput_input2(self, p):
        if ((p[0]>0)and(p[11]>0)and(p[11]<2.5)):
            if (not (abs(p[11]-self.polex_last)>0.6 or abs(p[12]-self.poley_last)>0.6)):
                self.polex_last=p[11]
                self.poley_last=p[12]
                self.output(p)
            else:
                self.polex_last=p[11]
                self.poley_last=p[12]

        pass
            #self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])
    def onInput_startmoving(self):
        self.startmovingflag=True
    def onInput_endmoving(self):
        self.startmovingflag=False]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="startmoving" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="endmoving" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="7" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                </Box>
                                                                <Box name="Counter (2)" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="138" y="708">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="8" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Counter (3)" id="15" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1136" y="413">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="3" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="if" id="13" localization="8" tooltip="" x="1358" y="615">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        tan=(p[3]-p[1])/(p[2]-p[0])
        theta=math.atan(tan)
        errorx=p[0]-p[4]
        errory=p[1]-p[5]
        if ((abs(errorx)<0.02)and(abs(errory)<0.02)and(abs(p[6]<0.025))):
            self.onStopped()
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="headmove" id="2" localization="8" tooltip="" x="1255" y="142">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")
        self.pole_info=[]
        self.pole_info_flag=False
        self.ball_info=[]
        self.ball_info_flag=False
        self.num=0
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.num=self.num+1;
        if (self.num==2):
            self.num=0
        self.names = ["HeadYaw", "HeadPitch"]
        self.timeLists  = [0.5, 0.5]
        self.PID_P=1
        self.isAbsolute = True
        if (self.num==0):
            self.angles  = [self.PID_P*self.ball_info[2]+self.ball_info[14],self.PID_P*self.ball_info[3]+self.ball_info[13]-0.1]
        elif (self.num==1):
            self.angles  = [self.PID_P*self.pole_info[13]+self.pole_info[10],self.PID_P*self.pole_info[14]+self.pole_info[9]]
        #yaw 0.5235
        #pitch 0.2268
        if (self.angles[1]>0.29):
            self.angles[1]=0.29
        if (self.angles[0]>0.5235):
            self.angles[0]=0.5235
        if (self.angles[0]<-0.5235):
            self.angles[0]=-0.5235
        self.startmoving()
        time.sleep(1)
        self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
        time.sleep(1)
        self.endmoving()
        time.sleep(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_input_Pole(self, p):
        self.pole_info=p
        self.pole_info_flag=True
        pass

    def onInput_input_Ball(self, p):
        self.ball_info=p
        self.ball_info_flag=True
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="input_Pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="input_Ball" type="0" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="6" />
                                                                    <Output name="startmoving" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Output name="endmoving" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                </Box>
                                                                <Box name="Wait For Signals (3)" id="4" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="643" y="213">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once (2)" id="18" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="954" y="235">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="Delay" id="10" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="1079" y="192">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Delay (1)" id="12" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="949" y="456">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="7" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="17" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="368" y="922">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="judge (1)" id="19" localization="8" tooltip="" x="101" y="127">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):

        self.ballx_last=0
        self.bally_last=0
        self.polex_last=0
        self.poley_last=0
        self.startmovingflag=False
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if (not self.startmovingflag):
            self.onStopped(p)
        pass

    def onInput_input2(self, p):
        if (not self.startmovingflag):
            self.output(p)
        pass
            #self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])
    def onInput_startmoving(self):
        self.startmovingflag=True
    def onInput_endmoving(self):
        self.startmovingflag=False]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="startmoving" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="endmoving" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="7" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Output name="startmoving_ballout" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                    <Output name="startmoving_poleout" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Counter (4)" id="20" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="696" y="884">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="3" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="move" id="22" localization="8" tooltip="" x="895" y="890">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")

    def onLoad(self):
        maxstepx = 0.02 #default 0.04
        maxstepy = 0.11 #default 0.14
        maxsteptheta = 0.020 #default 0.349
        maxstepfrequency = 1.0 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        self.onrun=0
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.motionProxy.setMoveArmsEnabled(False,False)
        self.onrun=1
        #self.motionProxy.setStiffnesses("Head", 0.7);
        self.motionProxy.moveToward(-0.2,0,0,self.moveConfig)
        #time.sleep(1)
        #self.motionProxy.setStiffnesses("Head", 0.3);

        self.onStopped()
        #self.onStopped(p) #activate the output of the box
        pass
    def onInput_input(self):
        if (self.onrun==1):
            self.motionProxy.stopMove()
            self.onrun=0
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="3" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="11" indexofoutput="7" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="7" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="7" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="8" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="1" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="5" outputowner="11" indexofoutput="8" />
                                                                <Link inputowner="5" indexofinput="6" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="11" indexofoutput="7" />
                                                                <Link inputowner="4" indexofinput="3" outputowner="11" indexofoutput="8" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="5" outputowner="11" indexofoutput="7" />
                                                                <Link inputowner="2" indexofinput="4" outputowner="11" indexofoutput="8" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="18" indexofoutput="3" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="12" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="2" outputowner="11" indexofoutput="7" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="11" indexofoutput="8" />
                                                                <Link inputowner="21" indexofinput="3" outputowner="17" indexofoutput="4" />
                                                                <Link inputowner="19" indexofinput="5" outputowner="2" indexofoutput="7" />
                                                                <Link inputowner="19" indexofinput="6" outputowner="2" indexofoutput="8" />
                                                                <Link inputowner="19" indexofinput="3" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="19" indexofinput="4" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="19" indexofoutput="7" />
                                                                <Link inputowner="11" indexofinput="4" outputowner="19" indexofoutput="8" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="19" indexofoutput="7" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="19" indexofoutput="8" />
                                                                <Link inputowner="20" indexofinput="2" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="20" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="22" indexofinput="2" outputowner="20" indexofoutput="5" />
                                                                <Link inputowner="22" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="go to right position (2)" id="9" localization="8" tooltip="" x="531" y="414">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="njuFindBall" type="0" type_size="1" nature="4" stm_value_name="njuFindBall" inner="1" tooltip="njuFindBall desc" id="4" />
                                                <Input name="njuFindPole" type="0" type_size="1" nature="4" stm_value_name="njuFindPole" inner="1" tooltip="njuFindPole desc" id="5" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="endFind" id="3" localization="8" tooltip="" x="1406" y="287">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="selectcam" id="16" localization="8" tooltip="" x="419" y="57">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="cam_up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="selectcam" id="3" localization="8" tooltip="" x="202" y="33">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
        self.njuModule=ALProxy("njunaoModule");
    def onUnload(self):
        #put clean-up code here

        pass

    def onInput_camup(self):
        #self.onStopped() #activate the output of     the box
        self.njuModule.ChangeCamera(0)
        self.onStopped()
        pass

    def onInput_camdown(self):
        self.njuModule.ChangeCamera(1)
        self.onStopped()
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="camup" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Box name="findBallNew (2)" id="4" localization="8" tooltip="" x="406" y="27">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.njuModule=ALProxy("njunaoModule");
        self.Mem=ALProxy("ALMemory")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.njuModule.registerToVideoDevice(vision_definitions.kVGA, vision_definitions.kBGRColorSpace)
        self.njuModule.post.ContinuousRefreshCam()
        time.sleep(0.5)
        self.njuModule.post.ContinuousFindBall()
        self.njuModule.post.ContinuousFindPole()
        #self.njuModule.ChangeCamera(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move_head" id="10" localization="8" tooltip="" x="1059" y="220">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")
        self.y=[0,0]
        self.num=0
        self.pole_info=[]
        self.pole_info_flag=False
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        if (not self.pole_info_flag):
            #self.motionProxy.setStiffnesses("Head", 0.7);
            self.num=self.num+1
            if (self.num==4):
                self.num=0;
            self.names = ["HeadYaw", "HeadPitch"]
            self.timeLists  = [0.7, 0.7]
            self.PID_P=1
            self.isAbsolute = True
            self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
            if (self.num==0):
                self.angles[0]=self.angles[0]+0.25;
                self.angles[1]=self.angles[1]+0.25;
            elif(self.num==1):
                self.angles[0]=self.angles[0]-0.25;
                self.angles[1]=self.angles[1]+0.25;
            elif(self.num==2):
                self.angles[0]=self.angles[0]-0.25;
                self.angles[1]=self.angles[1]-0.25;
            elif(self.num==3):
                self.angles[0]=self.angles[0]+0.25;
                self.angles[1]=self.angles[1]-0.25;

            if (self.angles[1]>0.28):
                self.angles[1]=0.28
            if (self.angles[1]<-0.44):
                self.angles[1]=-0.44
            if (self.angles[0]>0.70):
                self.angles[0]=0.70
            if (self.angles[0]<-0.40):
                self.angles[0]=-0.40
            #self.log(" exp_yaw "+str(self.angles[0])+" now_pitch "+str(p[14]))
            #self.log(" now_pitch "+str(p[9])+" now_yaw "+str(str(p[8])))
            self.fractionMaxSpeed  = 0.3
            #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
            self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
            #self.motionProxy.setStiffnesses("Head", 0.3);
            self.onStopped(p)
            #self.onStopped(p) #activate the output of the box
        else:
            self.names = ["HeadYaw", "HeadPitch"]
            self.timeLists  = [0.5, 0.5]
            self.PID_P=1
            self.isAbsolute = True
            self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
            self.angles2 =[self.PID_P*self.pole_info[13]+self.pole_info[10],self.PID_P*self.pole_info[14]+self.pole_info[9]]
            self.angles[0]=(self.angles[0]+self.angles2[0])/2.0
            self.angles[1]=(self.angles[1]*0.5+self.angles2[1]*0.5)

            if (self.angles[1]>0.28):
                self.angles[1]=0.28
            if (self.angles[1]<-0.44):
                self.angles[1]=-0.44
            if (self.angles[0]>0.80):
                self.angles[0]=0.80
            if (self.angles[0]<-0.50):
                self.angles[0]=-0.50
            self.fractionMaxSpeed  = 0.3
            #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
            self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
            self.onStopped(p)

        pass
    def onInput_input(self):
        self.pole_info_flag=False
    def onInput_input_pole(self, p):
        self.pole_info=p
        self.pole_info_flag=True]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input_pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="17" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1036" y="86">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="walk2ballnew" id="5" localization="8" tooltip="" x="920" y="617">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def interval_theta(self,theta):
        if (((theta/2.0>0.05) ) or (theta/2.0<-0.05)):
            if ((theta/2.0>0.15)):
                return(0.15)
            elif((theta>0)):
                return(theta/2.0)
            elif((theta/2.0<-0.15)):
                return(-0.15)
            elif((theta<0)):
                return(theta/2.0)
        elif(theta>0):
            return(0.05)
        elif(theta<0):
            return(-0.05)
        else:
            return 0
        pass

    def interval_dis(self,dis):
        if(dis>self.getParameter("exp_x")):
            return 0.5
        else:
            return -0.5
    def onLoad(self):
        self.moveflag=0;
        self.motion = ALProxy("ALMotion")
        self.stopflag=0
        maxstepx = 0.015 #default 0.04
        maxstepy = 0.14 #default 0.14
        maxsteptheta = 0.17 #default 0.349
        maxstepfrequency = 0.5 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        import math
        self.PoleLostFlag=1
        self.PoleInfo=[]
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        self.motion.setMoveArmsEnabled(False,False)
        if(self.stopflag==0):
            self.moveflag=1
            if((self.PoleLostFlag==0)):
                x=(p[10]+self.PoleInfo[11])/2.0
                y=(p[11]+self.PoleInfo[12])/2.0
                theta=math.atan(y/x)
                theta2=math.atan((self.PoleInfo[12]-p[11])/(self.PoleInfo[11]-p[10]))
                beta=-math.atan(self.PoleInfo[12]/self.PoleInfo[11])
                s=p[10]*math.cos(beta)-p[11]*math.sin(beta)
                t=p[10]*math.sin(beta)+p[11]*math.cos(beta)
                if (t>0):
                    self.motion.moveToward((p[10]-1)/2.0, 0.3, (self.interval_theta(theta))/2.0)#,self.moveConfig)
                else:
                    self.motion.moveToward((p[10]-1)/2.0, -0.3, (self.interval_theta(theta))/2.0)#,self.moveConfig)
                self.output([p[10],p[11],self.PoleInfo[11],self.PoleInfo[12]])
            self.onStopped() #activate the output of the box
        pass
    def onInput_signalLost(self):
        if (self.moveflag==1):
            self.motion.stopMove()
            self.moveflag=0
        pass
    def onInput_onStop(self):
        self.stopflag=1
        self.motion.moveToward(0, 0, 0)

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box
    def onInput_input_pole(self,p):
        self.PoleLostFlag=0
        self.PoleInfo=p
        pass
    def onInput_input_PoleLost(self):
        self.PoleLostFlag=1
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="signalLost" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Input name="input_pole" type="0" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="input_PoleLost" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="7" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Parameter name="exp_y" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="" id="9" />
                                                                    <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.15" min="0" max="3" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Counter" id="6" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="501" y="280">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        circleBallx=0
    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="1" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="724" y="412">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="476" y="408">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="serch" id="21" localization="8" tooltip="" x="478" y="949">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="HeadMove (1)" id="1" localization="8" tooltip="Enter tooltip here" x="113" y="117">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="776" y="351">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="21">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="21" value="-0.00240423" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="21" value="16.2576" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="16">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="0.612832" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="16" value="-26.1941" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="-35.7743" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="15" value="7.64417" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="Nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="26.7167" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="5.62267" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
                break
        pass

    def onInput_onStop(self):
        self.Problem()
        self.onUnload()


        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="hgj" id="7" localization="8" tooltip="" x="914" y="327">
                                                                                                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="645" y="732">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Only Once (1)" id="12" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="702" y="204">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Box name="Counter (1)" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="181" y="587">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="judge" id="11" localization="8" tooltip="" x="147" y="151">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):


        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if ((p[0]>0)and(p[10]>0)and(p[10]<10)):
            Ballx=p[10]
            Bally=p[11]
            self.onStopped(p)

            self.log(["Ballx "+str(p[10])+" Bally "+str(p[11])])
        pass
    def onInput_input2(self, p):
        if ((p[0]>0)and(p[11]>0)and(p[11]<10)):
            Polex=p[11]
            Poley=p[12]
            self.output(p)

            self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                                    <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Counter (2)" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="146" y="769">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="8" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Counter (3)" id="15" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1186" y="306">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="1" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="if" id="13" localization="8" tooltip="" x="1110" y="564">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        tan=(p[3]-p[1])/(p[2]-p[0])
        theta=math.atan(tan)
        if ((theta<0.06)and(theta>-0.06)):
            self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="3" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="7" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="12" indexofoutput="3" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="17" indexofoutput="4" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="10" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="21" indexofinput="3" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="10" indexofinput="4" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="10" indexofinput="3" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="4" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="1" outputowner="15" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="5" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="5" indexofinput="6" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="8" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="7" />
                                            <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="6" />
                                            <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="6" />
                                            <Link inputowner="9" indexofinput="2" outputowner="3" indexofoutput="8" />
                                            <Link inputowner="8" indexofinput="2" outputowner="9" indexofoutput="6" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="8" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                        <Link inputowner="17" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="2" outputowner="17" indexofoutput="6" />
                        <Link inputowner="1" indexofinput="2" outputowner="17" indexofoutput="7" />
                        <Link inputowner="9" indexofinput="2" outputowner="1" indexofoutput="4" />
                        <Link inputowner="4" indexofinput="2" outputowner="9" indexofoutput="4" />
                        <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="4" />
                        <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="4" />
                        <Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="4" />
                        <Link inputowner="6" indexofinput="3" outputowner="2" indexofoutput="4" />
                        <Link inputowner="9" indexofinput="3" outputowner="2" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
