<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="go to ball" id="15" localization="8" tooltip="" x="347" y="124">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="njuFindBall" type="0" type_size="1" nature="4" stm_value_name="njuFindBall" inner="1" tooltip="njuFindBall desc" id="4" />
                            <Input name="njuFindPole" type="0" type_size="1" nature="4" stm_value_name="njuFindPole" inner="1" tooltip="njuFindPole desc" id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="endFind" id="3" localization="8" tooltip="" x="1130" y="425">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.Mem=ALProxy("ALMemory")
        self.njuModule=ALProxy("njunaoModule")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.Mem.insertData("njunaoBallPositionStopFlag",1)
        self.Mem.insertData("njunaoPolePositionStopFlag",1)
        self.njuModule.unRegisterFromVideoDevice()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="1" />
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                            </Box>
                                            <Box name="selectcam" id="16" localization="8" tooltip="" x="318" y="13">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="cam_up" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="selectcam" id="3" localization="8" tooltip="" x="202" y="33">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
        self.njuModule=ALProxy("njunaoModule");
    def onUnload(self):
        #put clean-up code here

        pass

    def onInput_camup(self):
        #self.onStopped() #activate the output of     the box
        self.njuModule.ChangeCamera(0)
        self.onStopped()
        pass

    def onInput_camdown(self):
        self.njuModule.ChangeCamera(1)
        self.onStopped()
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="camup" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="camdown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="findBallNew (2)" id="4" localization="8" tooltip="" x="406" y="27">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        import vision_definitions
        import time
        self.njuModule=ALProxy("njunaoModule");
        self.Mem=ALProxy("ALMemory")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.njuModule.registerToVideoDevice(vision_definitions.kVGA, vision_definitions.kBGRColorSpace)
        self.njuModule.post.ContinuousRefreshCam()
        self.njuModule.post.ContinuousFindBall()
        self.njuModule.post.ContinuousFindPole()
        #self.njuModule.ChangeCamera(1)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="move_head" id="10" localization="8" tooltip="" x="974" y="210">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")
        self.y=[0,0]
        self.num=0
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        #self.motionProxy.setStiffnesses("Head", 0.7);
        self.num=self.num+1
        if (self.num==4):
            self.num=0;
        self.names = ["HeadYaw", "HeadPitch"]
        self.timeLists  = [0.7, 0.7]
        self.PID_P=1
        self.isAbsolute = True
        self.angles  = [self.PID_P*p[2]+p[14],self.PID_P*p[3]+p[13]]
        if (self.num==0):
            self.angles[0]=self.angles[0]+0.2;
            self.angles[1]=self.angles[1]+0.2;
        elif(self.num==1):
            self.angles[0]=self.angles[0]-0.2;
            self.angles[1]=self.angles[1]+0.2;
        elif(self.num==2):
            self.angles[0]=self.angles[0]-0.2;
            self.angles[1]=self.angles[1]-0.2;
        elif(self.num==3):
            self.angles[0]=self.angles[0]+0.2;
            self.angles[1]=self.angles[1]-0.2;

        if (self.angles[1]>0.28):
            self.angles[1]=0.28
        if (self.angles[1]<-0.44):
            self.angles[1]=-0.44
        if (self.angles[0]>0.70):
            self.angles[0]=0.70
        if (self.angles[0]<-0.40):
            self.angles[0]=-0.40
        #self.log(" exp_yaw "+str(self.angles[0])+" now_pitch "+str(p[14]))
        #self.log(" now_pitch "+str(p[9])+" now_yaw "+str(str(p[8])))
        self.fractionMaxSpeed  = 0.3
        #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        self.motionProxy.angleInterpolation(self.names, self.angles, self.timeLists, self.isAbsolute)
        #self.motionProxy.setStiffnesses("Head", 0.3);
        self.onStopped(p)
        #self.onStopped(p) #activate the output of the box
        pass
    def onInput_input():
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                            </Box>
                                            <Box name="Wait For Signals" id="17" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="812" y="221">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Box name="walk2ballnew" id="5" localization="8" tooltip="" x="738" y="672">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def interval_theta(self,theta):
        if (((theta/2.0>0.05) ) or (theta/2.0<-0.05)):
            if ((theta/2.0>0.5)):
                return(0.5)
            elif((theta>0)):
                return(theta/2.0)
            elif((theta/2.0<-0.5)):
                return(-0.5)
            elif((theta<0)):
                return(theta/2.0)
        elif(theta>0):
            return(0.05)
        elif(theta<0):
            return(-0.05)
        else:
            return 0
        pass
    def interval_dis(self,dis):
        if(dis>self.getParameter("exp_x")):
            return 0.5
        else:
            return -0.5
    def onLoad(self):
        self.moveflag=0;
        self.motion = ALProxy("ALMotion")
        self.stopflag=0
        maxstepx = 0.02 #default 0.04
        maxstepy = 0.11 #default 0.14
        maxsteptheta = 0.3490 #default 0.349
        maxstepfrequency = 1.0 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        import math
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        self.moveflag=1
        if(self.stopflag==0):
            x=p[10]
            y=p[11]+self.getParameter("exp_y")
            theta=math.atan(y/x)
            if (x>(self.getParameter("exp_x")+0.15)):
                self.motion.moveToward(self.interval_dis(x), 0.0, self.interval_theta(theta),self.moveConfig)
            else:
                self.motion.moveToward(self.interval_dis(x)/3.0, 0.0, self.interval_theta(theta),self.moveConfig)
            self.onStopped() #activate the output of the box
        pass
    def onInput_signalLost(self):
        if (self.moveflag==1):
            self.motion.stopMove()
            self.moveflag=0
        pass
    def onInput_onStop(self):
        self.stopflag=1
        self.motion.moveToward(0, 0, 0)

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="signalLost" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                <Parameter name="exp_y" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="" id="6" />
                                                <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.15" min="0" max="3" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Counter" id="6" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="311" y="299">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="4" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                            </Box>
                                            <Box name="Wait For Signals (1)" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="586" y="384">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2
        self.p=[];
    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived(self.p)

    def onInput_signal1(self,p):
        self.p=p;
        self.onStart(1)

    def onInput_signal2(self,p):

        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="0" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="403" y="397">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                            </Box>
                                            <Box name="serch" id="21" localization="8" tooltip="" x="396" y="682">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="input" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="HeadMove (1)" id="1" localization="8" tooltip="Enter tooltip here" x="113" y="117">
                                                                    <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="74.9154">
                                                                                    <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="776" y="351">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="21">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="-0.00240423" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="16.2576" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="16">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="0.612832" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="-26.1941" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="-35.7743" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="7.64417" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="26.7167" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="5.62267" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                    </Box>
                                                                                    <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="hgj" id="7" localization="8" tooltip="" x="914" y="327">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move" id="10" localization="8" tooltip="" x="298" y="361">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import vision_definitions
        import time
        self.motionProxy = ALProxy("ALMotion")

    def onLoad(self):
        maxstepx = 0.02 #default 0.04
        maxstepy = 0.11 #default 0.14
        maxsteptheta = 0.020 #default 0.349
        maxstepfrequency = 1.0 #default 1.0
        stepheight = 0.005 #default 0.02
        torsowx = 0.0
        torsowy = 0.0
        self.moveConfig = [["MaxStepX",maxstepx],["MaxStepY",maxstepy],["MaxStepTheta",maxsteptheta],["MaxStepFrequency",maxstepfrequency],["StepHeight",stepheight],["TorsoWx",torsowx],["TorsoWy",torsowy]]
        self.onrun=0
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.onrun=1
        #self.motionProxy.setStiffnesses("Head", 0.7);
        self.motionProxy.moveToward(0,0,-0.6,self.moveConfig)
        #time.sleep(1)
        #self.motionProxy.setStiffnesses("Head", 0.3);

        self.onStopped()
        #self.onStopped(p) #activate the output of the box
        pass
    def onInput_input(self):
        if (self.onrun==1):
            self.motionProxy.stopMove()
            self.onrun=0
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="10" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="Wait For Signals (2)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="513" y="553">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Box name="Only Once (1)" id="12" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="492" y="270">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self,p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                <Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                            </Box>
                                            <Box name="Counter (1)" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="169" y="516">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                            </Box>
                                            <Box name="if" id="13" localization="8" tooltip="" x="824" y="440">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        if ((p[10]<self.getParameter("exp_x")+0.02)and(p[10]>self.getParameter("exp_x")-0.02)):
            self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Parameter name="exp_x" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.15" min="0" max="3" tooltip="" id="5" />
                                            </Box>
                                            <Box name="judge" id="11" localization="8" tooltip="" x="125" y="202">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        Ballx=0
        Bally=0
        Polex=0
        Poley=0
    def onLoad(self):


        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped(p) #activate the output of the box

    def onInput_input(self, p):
        if ((p[0]>0)and(p[10]>0)and(p[10]<10)):
            Ballx=p[10]
            Bally=p[11]
            self.onStopped(p)

            self.log(["Ballx "+str(p[10])+" Bally "+str(p[11])])
        pass
    def onInput_input2(self, p):
        if ((p[0]>0)and(p[11]>0)and(p[11]<10)):
            Polex=p[11]
            Poley=p[12]
            self.output(p)

            self.log(["Polex "+str(p[11])+" Poley "+str(p[12])])]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="input" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Input name="input2" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                <Output name="output" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Counter (2)" id="8" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="171" y="655">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.initializeParameters()
            self.onReinitialized()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="10" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                            </Box>
                                            <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="3" />
                                            <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="5" />
                                            <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="5" />
                                            <Link inputowner="21" indexofinput="2" outputowner="14" indexofoutput="4" />
                                            <Link inputowner="17" indexofinput="3" outputowner="12" indexofoutput="3" />
                                            <Link inputowner="14" indexofinput="3" outputowner="21" indexofoutput="4" />
                                            <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="5" indexofinput="4" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="13" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="1" outputowner="13" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="17" indexofoutput="4" />
                                            <Link inputowner="17" indexofinput="3" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="12" indexofinput="2" outputowner="6" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="3" outputowner="11" indexofoutput="5" />
                                            <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="5" />
                                            <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="5" />
                                            <Link inputowner="21" indexofinput="3" outputowner="11" indexofoutput="5" />
                                            <Link inputowner="17" indexofinput="2" outputowner="11" indexofoutput="5" />
                                            <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="6" />
                                            <Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="11" indexofinput="4" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="5" indexofinput="3" outputowner="13" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="14" indexofinput="3" outputowner="0" indexofoutput="2" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="WakeUp" id="2" localization="0" tooltip="Call a Wake Up process.&#x0A;Stiff all joints and apply stand Init posture if the robot is Stand" x="143" y="127">
                            <bitmap>media/images/box/movement/stiffness.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.motion.wakeUp()
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Resource name="All motors" type="Lock" timeout="0" />
                            <Resource name="Stiffness" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Rest" id="3" localization="0" tooltip="Call a Rest process.&#x0A;Apply crouch posture if the robot is Stand then unStiff all joints" x="534" y="140">
                            <bitmap>media/images/box/movement/stiffness.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.motion.rest()
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Resource name="All motors" type="Lock" timeout="0" />
                            <Resource name="Stiffness" type="Lock" timeout="0" />
                        </Box>
                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="15" indexofinput="2" outputowner="2" indexofoutput="4" />
                        <Link inputowner="3" indexofinput="2" outputowner="15" indexofoutput="6" />
                        <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
