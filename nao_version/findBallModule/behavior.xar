<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="push、" id="26" localization="8" tooltip="" x="533" y="393">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="shoot (1)" id="3" localization="8" tooltip="" x="688" y="79">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="1" fps="50" start_frame="1" end_frame="-1" size="155">
                                                    <ActuatorList model="">
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-37.2637" />
                                                            <Key frame="24" value="-37.2637" />
                                                            <Key frame="35" value="-37.0879" />
                                                            <Key frame="37" value="-37.8789" />
                                                            <Key frame="104" value="-37.0879" />
                                                            <Key frame="119" value="-37.0879" />
                                                            <Key frame="134" value="-29.6171" />
                                                            <Key frame="155" value="-60.0277" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-93.6071" />
                                                            <Key frame="24" value="-93.6071" />
                                                            <Key frame="35" value="-94.8376" />
                                                            <Key frame="37" value="-94.8376" />
                                                            <Key frame="104" value="-94.8376" />
                                                            <Key frame="119" value="-94.8376" />
                                                            <Key frame="134" value="-95.4528" />
                                                            <Key frame="155" value="-97.6501" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="15" value="0.2424" />
                                                            <Key frame="24" value="0.2424" />
                                                            <Key frame="35" value="0.2424" />
                                                            <Key frame="37" value="0.2424" />
                                                            <Key frame="104" value="0.2424" />
                                                            <Key frame="119" value="0.2424" />
                                                            <Key frame="134" value="0.2424" />
                                                            <Key frame="155" value="0.2424" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="118.827" />
                                                            <Key frame="24" value="118.827" />
                                                            <Key frame="35" value="112.763" />
                                                            <Key frame="37" value="115.136" />
                                                            <Key frame="104" value="112.851" />
                                                            <Key frame="119" value="112.851" />
                                                            <Key frame="134" value="103.71" />
                                                            <Key frame="155" value="72.5962" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="1.49175" />
                                                            <Key frame="24" value="1.49175" />
                                                            <Key frame="35" value="0.524941" />
                                                            <Key frame="37" value="0.524941" />
                                                            <Key frame="104" value="0.524941" />
                                                            <Key frame="119" value="0.524941" />
                                                            <Key frame="134" value="0.524941" />
                                                            <Key frame="155" value="0.524941" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-96.0681" />
                                                            <Key frame="24" value="-96.0681" />
                                                            <Key frame="35" value="-94.9255" />
                                                            <Key frame="37" value="-94.9255" />
                                                            <Key frame="104" value="-94.9255" />
                                                            <Key frame="119" value="-94.9255" />
                                                            <Key frame="134" value="-90.0914" />
                                                            <Key frame="155" value="-90.7946" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="79.9839" />
                                                            <Key frame="24" value="79.9839" />
                                                            <Key frame="35" value="66.888" />
                                                            <Key frame="37" value="82.1812" />
                                                            <Key frame="104" value="85.4332" />
                                                            <Key frame="119" value="84.2027" />
                                                            <Key frame="134" value="74.5346" />
                                                            <Key frame="155" value="74.5346" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="89.5593" />
                                                            <Key frame="24" value="89.5593" />
                                                            <Key frame="35" value="90.7897" />
                                                            <Key frame="37" value="90.3503" />
                                                            <Key frame="104" value="91.2292" />
                                                            <Key frame="119" value="90.614" />
                                                            <Key frame="134" value="90.3503" />
                                                            <Key frame="155" value="90.3503" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="15" value="0.3908" />
                                                            <Key frame="24" value="0.3908" />
                                                            <Key frame="35" value="0.11" />
                                                            <Key frame="37" value="0.384" />
                                                            <Key frame="104" value="0.384" />
                                                            <Key frame="119" value="0.384" />
                                                            <Key frame="134" value="0.384" />
                                                            <Key frame="155" value="0.384" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="67.1517" />
                                                            <Key frame="24" value="67.1517" />
                                                            <Key frame="35" value="64" />
                                                            <Key frame="37" value="70.0521" />
                                                            <Key frame="104" value="75.062" />
                                                            <Key frame="119" value="75.7651" />
                                                            <Key frame="125" value="76.6" />
                                                            <Key frame="134" value="76.3803" />
                                                            <Key frame="155" value="76.3803" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="7.02893" />
                                                            <Key frame="24" value="7.02893" />
                                                            <Key frame="35" value="17.5759" />
                                                            <Key frame="37" value="-5.71537" />
                                                            <Key frame="104" value="-26.1941" />
                                                            <Key frame="119" value="-14.3288" />
                                                            <Key frame="134" value="-0.0902951" />
                                                            <Key frame="155" value="-0.0902951" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="93.0749" />
                                                            <Key frame="24" value="93.0749" />
                                                            <Key frame="35" value="13.0935" />
                                                            <Key frame="37" value="-4.22121" />
                                                            <Key frame="104" value="3.68905" />
                                                            <Key frame="119" value="62.4886" />
                                                            <Key frame="134" value="100.282" />
                                                            <Key frame="155" value="100.282" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="2.28279" />
                                                            <Key frame="24" value="2.28279" />
                                                            <Key frame="35" value="2.28279" />
                                                            <Key frame="37" value="2.28279" />
                                                            <Key frame="104" value="2.72224" />
                                                            <Key frame="119" value="2.72224" />
                                                            <Key frame="134" value="2.72224" />
                                                            <Key frame="155" value="2.72224" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="1.31597" />
                                                            <Key frame="24" value="1.31597" />
                                                            <Key frame="35" value="0.43705" />
                                                            <Key frame="37" value="0.43705" />
                                                            <Key frame="104" value="1.66754" />
                                                            <Key frame="119" value="1.66754" />
                                                            <Key frame="134" value="1.66754" />
                                                            <Key frame="155" value="1.66754" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-19.778" />
                                                            <Key frame="24" value="-19.778" />
                                                            <Key frame="35" value="-20.5691" />
                                                            <Key frame="37" value="-20.5691" />
                                                            <Key frame="104" value="-20.657" />
                                                            <Key frame="119" value="-20.657" />
                                                            <Key frame="134" value="-20.657" />
                                                            <Key frame="155" value="-20.657" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.178186" />
                                                            <Key frame="24" value="0.178186" />
                                                            <Key frame="35" value="0.178186" />
                                                            <Key frame="37" value="0.178186" />
                                                            <Key frame="104" value="0.178186" />
                                                            <Key frame="119" value="0.178186" />
                                                            <Key frame="134" value="0.178186" />
                                                            <Key frame="155" value="0.178186" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-26.0135" />
                                                            <Key frame="24" value="-26.0135" />
                                                            <Key frame="35" value="-26.0135" />
                                                            <Key frame="37" value="-26.0135" />
                                                            <Key frame="104" value="-26.0135" />
                                                            <Key frame="119" value="-26.0135" />
                                                            <Key frame="134" value="-26.0135" />
                                                            <Key frame="155" value="-26.0135" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.178186" />
                                                            <Key frame="24" value="0.178186" />
                                                            <Key frame="35" value="0.178186" />
                                                            <Key frame="37" value="0.178186" />
                                                            <Key frame="104" value="0.178186" />
                                                            <Key frame="119" value="0.178186" />
                                                            <Key frame="134" value="0.178186" />
                                                            <Key frame="155" value="0.178186" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.266077" />
                                                            <Key frame="24" value="0.266077" />
                                                            <Key frame="35" value="0.266077" />
                                                            <Key frame="37" value="0.266077" />
                                                            <Key frame="104" value="0.266077" />
                                                            <Key frame="119" value="0.266077" />
                                                            <Key frame="134" value="0.266077" />
                                                            <Key frame="155" value="0.266077" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="40.1641" />
                                                            <Key frame="24" value="40.1641" />
                                                            <Key frame="35" value="40.1641" />
                                                            <Key frame="37" value="40.1641" />
                                                            <Key frame="104" value="40.1641" />
                                                            <Key frame="119" value="40.1641" />
                                                            <Key frame="134" value="40.1641" />
                                                            <Key frame="155" value="40.1641" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-20.0369" />
                                                            <Key frame="24" value="-20.0369" />
                                                            <Key frame="35" value="-20.0369" />
                                                            <Key frame="37" value="-20.0369" />
                                                            <Key frame="104" value="-20.0369" />
                                                            <Key frame="119" value="-20.0369" />
                                                            <Key frame="134" value="-20.0369" />
                                                            <Key frame="155" value="-20.0369" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.00240423" />
                                                            <Key frame="24" value="0.00240423" />
                                                            <Key frame="35" value="0.00240423" />
                                                            <Key frame="37" value="0.00240423" />
                                                            <Key frame="104" value="0.00240423" />
                                                            <Key frame="119" value="0.00240423" />
                                                            <Key frame="134" value="0.00240423" />
                                                            <Key frame="155" value="0.00240423" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-25.8426" />
                                                            <Key frame="24" value="-25.8426" />
                                                            <Key frame="35" value="-25.8426" />
                                                            <Key frame="37" value="-25.8426" />
                                                            <Key frame="104" value="-25.8426" />
                                                            <Key frame="119" value="-25.8426" />
                                                            <Key frame="134" value="-25.8426" />
                                                            <Key frame="155" value="-25.8426" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.00240423" />
                                                            <Key frame="24" value="0.00240423" />
                                                            <Key frame="35" value="0.00240423" />
                                                            <Key frame="37" value="0.00240423" />
                                                            <Key frame="104" value="0.00240423" />
                                                            <Key frame="119" value="0.00240423" />
                                                            <Key frame="134" value="0.00240423" />
                                                            <Key frame="155" value="0.00240423" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.266077" />
                                                            <Key frame="24" value="0.266077" />
                                                            <Key frame="35" value="0.266077" />
                                                            <Key frame="37" value="0.266077" />
                                                            <Key frame="104" value="0.266077" />
                                                            <Key frame="119" value="0.266077" />
                                                            <Key frame="134" value="0.266077" />
                                                            <Key frame="155" value="0.266077" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="40.081" />
                                                            <Key frame="24" value="40.081" />
                                                            <Key frame="35" value="40.081" />
                                                            <Key frame="37" value="40.081" />
                                                            <Key frame="104" value="40.081" />
                                                            <Key frame="119" value="40.081" />
                                                            <Key frame="134" value="40.081" />
                                                            <Key frame="155" value="40.081" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="Hands" id="6" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="404" y="201">
                                                <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Close the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                    <Choice value="Open the hand" />
                                                    <Choice value="Close the hand" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Hands (1)" id="1" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="148" y="269">
                                                <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Close the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                    <Choice value="Open the hand" />
                                                    <Choice value="Close the hand" />
                                                </Parameter>
                                            </Box>
                                            <Box name="recover" id="2" localization="8" tooltip="" x="877" y="339">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40">
                                                    <ActuatorList model="">
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="-10.6373" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="0.0854867" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="-29.3534" />
                                                            <Key frame="29" value="-65.9164" />
                                                            <Key frame="40" value="-83.8463" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="-100.726" />
                                                            <Key frame="29" value="-100.726" />
                                                            <Key frame="40" value="-100.726" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="0.9924" />
                                                            <Key frame="29" value="0.9924" />
                                                            <Key frame="40" value="0.9924" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="86.3952" />
                                                            <Key frame="29" value="93.1628" />
                                                            <Key frame="40" value="84.4615" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="1.75543" />
                                                            <Key frame="29" value="-3.78175" />
                                                            <Key frame="40" value="-3.69386" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="-88.5973" />
                                                            <Key frame="29" value="-89.1246" />
                                                            <Key frame="40" value="-91.3219" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="71.5463" />
                                                            <Key frame="29" value="70.8431" />
                                                            <Key frame="40" value="70.8431" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="83.7584" />
                                                            <Key frame="29" value="83.7584" />
                                                            <Key frame="40" value="83.7584" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="0.312" />
                                                            <Key frame="29" value="0.312" />
                                                            <Key frame="40" value="0.312" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="72.5131" />
                                                            <Key frame="29" value="73.2162" />
                                                            <Key frame="40" value="73.2162" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="5.44688" />
                                                            <Key frame="29" value="4.12851" />
                                                            <Key frame="40" value="4.12851" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="103.446" />
                                                            <Key frame="29" value="102.831" />
                                                            <Key frame="40" value="102.831" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="shoot_syb" id="7" localization="8" tooltip="" x="550" y="364">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="1" fps="50" start_frame="1" end_frame="-1" size="178">
                                                    <ActuatorList model="">
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-55.9846" />
                                                            <Key frame="34" value="-37.0879" />
                                                            <Key frame="47" value="-36.3848" />
                                                            <Key frame="51" value="-36.3848" />
                                                            <Key frame="127" value="-35.5059" />
                                                            <Key frame="142" value="-35.5059" />
                                                            <Key frame="148" value="-34.0996" />
                                                            <Key frame="157" value="-29.5292" />
                                                            <Key frame="178" value="-58.094" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-97.6501" />
                                                            <Key frame="34" value="-98.4411" />
                                                            <Key frame="47" value="-98.4411" />
                                                            <Key frame="51" value="-98.4411" />
                                                            <Key frame="127" value="-97.6501" />
                                                            <Key frame="142" value="-97.6501" />
                                                            <Key frame="148" value="-97.6501" />
                                                            <Key frame="157" value="-97.6501" />
                                                            <Key frame="178" value="-97.6501" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="17" value="0.22" />
                                                            <Key frame="34" value="0.0376" />
                                                            <Key frame="47" value="0.0376" />
                                                            <Key frame="51" value="0.0376" />
                                                            <Key frame="127" value="0.2332" />
                                                            <Key frame="142" value="0.2332" />
                                                            <Key frame="148" value="0.2332" />
                                                            <Key frame="157" value="0.2332" />
                                                            <Key frame="178" value="0.2332" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="77.2544" />
                                                            <Key frame="34" value="115.224" />
                                                            <Key frame="47" value="115.224" />
                                                            <Key frame="51" value="115.224" />
                                                            <Key frame="127" value="114.345" />
                                                            <Key frame="142" value="114.345" />
                                                            <Key frame="148" value="113.026" />
                                                            <Key frame="157" value="105.028" />
                                                            <Key frame="178" value="74.354" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="2.28279" />
                                                            <Key frame="34" value="9.22623" />
                                                            <Key frame="47" value="11.863" />
                                                            <Key frame="51" value="11.863" />
                                                            <Key frame="127" value="6.76526" />
                                                            <Key frame="142" value="6.76526" />
                                                            <Key frame="148" value="7.46839" />
                                                            <Key frame="157" value="6.85315" />
                                                            <Key frame="178" value="1.57965" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-91.9372" />
                                                            <Key frame="34" value="-92.7282" />
                                                            <Key frame="47" value="-93.8708" />
                                                            <Key frame="51" value="-93.8708" />
                                                            <Key frame="127" value="-95.3649" />
                                                            <Key frame="142" value="-95.3649" />
                                                            <Key frame="148" value="-94.6618" />
                                                            <Key frame="157" value="-90.9703" />
                                                            <Key frame="178" value="-90.9703" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="71.81" />
                                                            <Key frame="34" value="76.7319" />
                                                            <Key frame="47" value="75.853" />
                                                            <Key frame="51" value="78.9292" />
                                                            <Key frame="127" value="83.2359" />
                                                            <Key frame="142" value="83.2359" />
                                                            <Key frame="148" value="79.6323" />
                                                            <Key frame="157" value="72.7768" />
                                                            <Key frame="178" value="72.7768" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="88.944" />
                                                            <Key frame="34" value="89.7351" />
                                                            <Key frame="47" value="89.7351" />
                                                            <Key frame="51" value="89.7351" />
                                                            <Key frame="127" value="89.5593" />
                                                            <Key frame="142" value="89.5593" />
                                                            <Key frame="148" value="89.5593" />
                                                            <Key frame="157" value="89.5593" />
                                                            <Key frame="178" value="89.5593" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="17" value="0.348" />
                                                            <Key frame="34" value="0.3316" />
                                                            <Key frame="47" value="0.3296" />
                                                            <Key frame="51" value="0.33" />
                                                            <Key frame="127" value="0.4184" />
                                                            <Key frame="142" value="0.4184" />
                                                            <Key frame="148" value="0.4184" />
                                                            <Key frame="157" value="0.4184" />
                                                            <Key frame="178" value="0.4184" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="77.435" />
                                                            <Key frame="34" value="75.5014" />
                                                            <Key frame="47" value="75.5014" />
                                                            <Key frame="51" value="75.5014" />
                                                            <Key frame="127" value="75.2377" />
                                                            <Key frame="142" value="76.4682" />
                                                            <Key frame="148" value="77.0834" />
                                                            <Key frame="157" value="77.0834" />
                                                            <Key frame="178" value="77.0834" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-3.78175" />
                                                            <Key frame="34" value="6.50159" />
                                                            <Key frame="47" value="8.08364" />
                                                            <Key frame="51" value="2.28279" />
                                                            <Key frame="127" value="-23.1179" />
                                                            <Key frame="142" value="-13.5377" />
                                                            <Key frame="148" value="-7.73688" />
                                                            <Key frame="157" value="-2.11181" />
                                                            <Key frame="178" value="-1.40867" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="100.634" />
                                                            <Key frame="34" value="80.4185" />
                                                            <Key frame="47" value="2.54646" />
                                                            <Key frame="51" value="1.40386" />
                                                            <Key frame="127" value="3.24959" />
                                                            <Key frame="142" value="60.2034" />
                                                            <Key frame="148" value="77.3423" />
                                                            <Key frame="157" value="96.0633" />
                                                            <Key frame="178" value="104.5" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="29.3534" />
                                                            <Key frame="34" value="29.3534" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-0.881327" />
                                                            <Key frame="34" value="-0.881327" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-15.2956" />
                                                            <Key frame="34" value="-15.3835" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.881327" />
                                                            <Key frame="34" value="0.881327" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-13.7087" />
                                                            <Key frame="34" value="-13.7087" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.705531" />
                                                            <Key frame="34" value="0.705531" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.353968" />
                                                            <Key frame="34" value="0.353968" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="26.7167" />
                                                            <Key frame="34" value="26.7167" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-14.5876" />
                                                            <Key frame="34" value="-15.115" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.529749" />
                                                            <Key frame="34" value="0.529749" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-12.0436" />
                                                            <Key frame="34" value="-12.0436" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-0.524941" />
                                                            <Key frame="34" value="-0.524941" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.353968" />
                                                            <Key frame="34" value="0.353968" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="23.909" />
                                                            <Key frame="34" value="23.909" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="push、 (1)" id="27" localization="8" tooltip="" x="261" y="34">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="shoot (1)" id="3" localization="8" tooltip="" x="688" y="79">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="1" fps="50" start_frame="1" end_frame="-1" size="155">
                                                    <ActuatorList model="">
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-37.2637" />
                                                            <Key frame="24" value="-37.2637" />
                                                            <Key frame="35" value="-37.0879" />
                                                            <Key frame="37" value="-37.8789" />
                                                            <Key frame="104" value="-37.0879" />
                                                            <Key frame="119" value="-37.0879" />
                                                            <Key frame="134" value="-29.6171" />
                                                            <Key frame="155" value="-60.0277" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-93.6071" />
                                                            <Key frame="24" value="-93.6071" />
                                                            <Key frame="35" value="-94.8376" />
                                                            <Key frame="37" value="-94.8376" />
                                                            <Key frame="104" value="-94.8376" />
                                                            <Key frame="119" value="-94.8376" />
                                                            <Key frame="134" value="-95.4528" />
                                                            <Key frame="155" value="-97.6501" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="15" value="0.2424" />
                                                            <Key frame="24" value="0.2424" />
                                                            <Key frame="35" value="0.2424" />
                                                            <Key frame="37" value="0.2424" />
                                                            <Key frame="104" value="0.2424" />
                                                            <Key frame="119" value="0.2424" />
                                                            <Key frame="134" value="0.2424" />
                                                            <Key frame="155" value="0.2424" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="118.827" />
                                                            <Key frame="24" value="118.827" />
                                                            <Key frame="35" value="112.763" />
                                                            <Key frame="37" value="115.136" />
                                                            <Key frame="104" value="112.851" />
                                                            <Key frame="119" value="112.851" />
                                                            <Key frame="134" value="103.71" />
                                                            <Key frame="155" value="72.5962" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="1.49175" />
                                                            <Key frame="24" value="1.49175" />
                                                            <Key frame="35" value="0.524941" />
                                                            <Key frame="37" value="0.524941" />
                                                            <Key frame="104" value="0.524941" />
                                                            <Key frame="119" value="0.524941" />
                                                            <Key frame="134" value="0.524941" />
                                                            <Key frame="155" value="0.524941" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-96.0681" />
                                                            <Key frame="24" value="-96.0681" />
                                                            <Key frame="35" value="-94.9255" />
                                                            <Key frame="37" value="-94.9255" />
                                                            <Key frame="104" value="-94.9255" />
                                                            <Key frame="119" value="-94.9255" />
                                                            <Key frame="134" value="-90.0914" />
                                                            <Key frame="155" value="-90.7946" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="79.9839" />
                                                            <Key frame="24" value="79.9839" />
                                                            <Key frame="35" value="66.888" />
                                                            <Key frame="37" value="82.1812" />
                                                            <Key frame="104" value="85.4332" />
                                                            <Key frame="119" value="84.2027" />
                                                            <Key frame="134" value="74.5346" />
                                                            <Key frame="155" value="74.5346" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="89.5593" />
                                                            <Key frame="24" value="89.5593" />
                                                            <Key frame="35" value="90.7897" />
                                                            <Key frame="37" value="90.3503" />
                                                            <Key frame="104" value="91.2292" />
                                                            <Key frame="119" value="90.614" />
                                                            <Key frame="134" value="90.3503" />
                                                            <Key frame="155" value="90.3503" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="15" value="0.3908" />
                                                            <Key frame="24" value="0.3908" />
                                                            <Key frame="35" value="0.11" />
                                                            <Key frame="37" value="0.384" />
                                                            <Key frame="104" value="0.384" />
                                                            <Key frame="119" value="0.384" />
                                                            <Key frame="134" value="0.384" />
                                                            <Key frame="155" value="0.384" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="67.1517" />
                                                            <Key frame="24" value="67.1517" />
                                                            <Key frame="35" value="64" />
                                                            <Key frame="37" value="70.0521" />
                                                            <Key frame="104" value="75.062" />
                                                            <Key frame="119" value="75.7651" />
                                                            <Key frame="125" value="76.6" />
                                                            <Key frame="134" value="76.3803" />
                                                            <Key frame="155" value="76.3803" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="7.02893" />
                                                            <Key frame="24" value="7.02893" />
                                                            <Key frame="35" value="17.5759" />
                                                            <Key frame="37" value="-5.71537" />
                                                            <Key frame="104" value="-26.1941" />
                                                            <Key frame="119" value="-14.3288" />
                                                            <Key frame="134" value="-0.0902951" />
                                                            <Key frame="155" value="-0.0902951" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="93.0749" />
                                                            <Key frame="24" value="93.0749" />
                                                            <Key frame="35" value="13.0935" />
                                                            <Key frame="37" value="-4.22121" />
                                                            <Key frame="104" value="3.68905" />
                                                            <Key frame="119" value="62.4886" />
                                                            <Key frame="134" value="100.282" />
                                                            <Key frame="155" value="100.282" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="2.28279" />
                                                            <Key frame="24" value="2.28279" />
                                                            <Key frame="35" value="2.28279" />
                                                            <Key frame="37" value="2.28279" />
                                                            <Key frame="104" value="2.72224" />
                                                            <Key frame="119" value="2.72224" />
                                                            <Key frame="134" value="2.72224" />
                                                            <Key frame="155" value="2.72224" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="1.31597" />
                                                            <Key frame="24" value="1.31597" />
                                                            <Key frame="35" value="0.43705" />
                                                            <Key frame="37" value="0.43705" />
                                                            <Key frame="104" value="1.66754" />
                                                            <Key frame="119" value="1.66754" />
                                                            <Key frame="134" value="1.66754" />
                                                            <Key frame="155" value="1.66754" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-19.778" />
                                                            <Key frame="24" value="-19.778" />
                                                            <Key frame="35" value="-20.5691" />
                                                            <Key frame="37" value="-20.5691" />
                                                            <Key frame="104" value="-20.657" />
                                                            <Key frame="119" value="-20.657" />
                                                            <Key frame="134" value="-20.657" />
                                                            <Key frame="155" value="-20.657" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.178186" />
                                                            <Key frame="24" value="0.178186" />
                                                            <Key frame="35" value="0.178186" />
                                                            <Key frame="37" value="0.178186" />
                                                            <Key frame="104" value="0.178186" />
                                                            <Key frame="119" value="0.178186" />
                                                            <Key frame="134" value="0.178186" />
                                                            <Key frame="155" value="0.178186" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-26.0135" />
                                                            <Key frame="24" value="-26.0135" />
                                                            <Key frame="35" value="-26.0135" />
                                                            <Key frame="37" value="-26.0135" />
                                                            <Key frame="104" value="-26.0135" />
                                                            <Key frame="119" value="-26.0135" />
                                                            <Key frame="134" value="-26.0135" />
                                                            <Key frame="155" value="-26.0135" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.178186" />
                                                            <Key frame="24" value="0.178186" />
                                                            <Key frame="35" value="0.178186" />
                                                            <Key frame="37" value="0.178186" />
                                                            <Key frame="104" value="0.178186" />
                                                            <Key frame="119" value="0.178186" />
                                                            <Key frame="134" value="0.178186" />
                                                            <Key frame="155" value="0.178186" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.266077" />
                                                            <Key frame="24" value="0.266077" />
                                                            <Key frame="35" value="0.266077" />
                                                            <Key frame="37" value="0.266077" />
                                                            <Key frame="104" value="0.266077" />
                                                            <Key frame="119" value="0.266077" />
                                                            <Key frame="134" value="0.266077" />
                                                            <Key frame="155" value="0.266077" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="40.1641" />
                                                            <Key frame="24" value="40.1641" />
                                                            <Key frame="35" value="40.1641" />
                                                            <Key frame="37" value="40.1641" />
                                                            <Key frame="104" value="40.1641" />
                                                            <Key frame="119" value="40.1641" />
                                                            <Key frame="134" value="40.1641" />
                                                            <Key frame="155" value="40.1641" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-20.0369" />
                                                            <Key frame="24" value="-20.0369" />
                                                            <Key frame="35" value="-20.0369" />
                                                            <Key frame="37" value="-20.0369" />
                                                            <Key frame="104" value="-20.0369" />
                                                            <Key frame="119" value="-20.0369" />
                                                            <Key frame="134" value="-20.0369" />
                                                            <Key frame="155" value="-20.0369" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.00240423" />
                                                            <Key frame="24" value="0.00240423" />
                                                            <Key frame="35" value="0.00240423" />
                                                            <Key frame="37" value="0.00240423" />
                                                            <Key frame="104" value="0.00240423" />
                                                            <Key frame="119" value="0.00240423" />
                                                            <Key frame="134" value="0.00240423" />
                                                            <Key frame="155" value="0.00240423" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-25.8426" />
                                                            <Key frame="24" value="-25.8426" />
                                                            <Key frame="35" value="-25.8426" />
                                                            <Key frame="37" value="-25.8426" />
                                                            <Key frame="104" value="-25.8426" />
                                                            <Key frame="119" value="-25.8426" />
                                                            <Key frame="134" value="-25.8426" />
                                                            <Key frame="155" value="-25.8426" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.00240423" />
                                                            <Key frame="24" value="0.00240423" />
                                                            <Key frame="35" value="0.00240423" />
                                                            <Key frame="37" value="0.00240423" />
                                                            <Key frame="104" value="0.00240423" />
                                                            <Key frame="119" value="0.00240423" />
                                                            <Key frame="134" value="0.00240423" />
                                                            <Key frame="155" value="0.00240423" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.266077" />
                                                            <Key frame="24" value="0.266077" />
                                                            <Key frame="35" value="0.266077" />
                                                            <Key frame="37" value="0.266077" />
                                                            <Key frame="104" value="0.266077" />
                                                            <Key frame="119" value="0.266077" />
                                                            <Key frame="134" value="0.266077" />
                                                            <Key frame="155" value="0.266077" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="40.081" />
                                                            <Key frame="24" value="40.081" />
                                                            <Key frame="35" value="40.081" />
                                                            <Key frame="37" value="40.081" />
                                                            <Key frame="104" value="40.081" />
                                                            <Key frame="119" value="40.081" />
                                                            <Key frame="134" value="40.081" />
                                                            <Key frame="155" value="40.081" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="Hands" id="6" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="404" y="201">
                                                <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Close the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                    <Choice value="Open the hand" />
                                                    <Choice value="Close the hand" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Hands (1)" id="1" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="148" y="269">
                                                <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Close the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                    <Choice value="Open the hand" />
                                                    <Choice value="Close the hand" />
                                                </Parameter>
                                            </Box>
                                            <Box name="recover" id="2" localization="8" tooltip="" x="877" y="339">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40">
                                                    <ActuatorList model="">
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="-10.6373" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="0.0854867" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="-29.3534" />
                                                            <Key frame="29" value="-65.9164" />
                                                            <Key frame="40" value="-83.8463" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="-100.726" />
                                                            <Key frame="29" value="-100.726" />
                                                            <Key frame="40" value="-100.726" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="0.9924" />
                                                            <Key frame="29" value="0.9924" />
                                                            <Key frame="40" value="0.9924" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="86.3952" />
                                                            <Key frame="29" value="93.1628" />
                                                            <Key frame="40" value="84.4615" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="1.75543" />
                                                            <Key frame="29" value="-3.78175" />
                                                            <Key frame="40" value="-3.69386" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="-88.5973" />
                                                            <Key frame="29" value="-89.1246" />
                                                            <Key frame="40" value="-91.3219" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="71.5463" />
                                                            <Key frame="29" value="70.8431" />
                                                            <Key frame="40" value="70.8431" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="83.7584" />
                                                            <Key frame="29" value="83.7584" />
                                                            <Key frame="40" value="83.7584" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="0.312" />
                                                            <Key frame="29" value="0.312" />
                                                            <Key frame="40" value="0.312" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="72.5131" />
                                                            <Key frame="29" value="73.2162" />
                                                            <Key frame="40" value="73.2162" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="5.44688" />
                                                            <Key frame="29" value="4.12851" />
                                                            <Key frame="40" value="4.12851" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="103.446" />
                                                            <Key frame="29" value="102.831" />
                                                            <Key frame="40" value="102.831" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="shoot_syb" id="7" localization="8" tooltip="" x="540" y="358">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="1" fps="50" start_frame="1" end_frame="-1" size="178">
                                                    <ActuatorList model="">
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-55.9846" />
                                                            <Key frame="34" value="-37.0879" />
                                                            <Key frame="47" value="-36.3848" />
                                                            <Key frame="51" value="-36.3848" />
                                                            <Key frame="127" value="-35.5059" />
                                                            <Key frame="142" value="-35.5059" />
                                                            <Key frame="148" value="-34.0996" />
                                                            <Key frame="157" value="-29.5292" />
                                                            <Key frame="178" value="-58.094" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-97.6501" />
                                                            <Key frame="34" value="-98.4411" />
                                                            <Key frame="47" value="-98.4411" />
                                                            <Key frame="51" value="-98.4411" />
                                                            <Key frame="127" value="-97.6501" />
                                                            <Key frame="142" value="-97.6501" />
                                                            <Key frame="148" value="-97.6501" />
                                                            <Key frame="157" value="-97.6501" />
                                                            <Key frame="178" value="-97.6501" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="17" value="0.22" />
                                                            <Key frame="34" value="0.0376" />
                                                            <Key frame="47" value="0.0376" />
                                                            <Key frame="51" value="0.0376" />
                                                            <Key frame="127" value="0.2332" />
                                                            <Key frame="142" value="0.2332" />
                                                            <Key frame="148" value="0.2332" />
                                                            <Key frame="157" value="0.2332" />
                                                            <Key frame="178" value="0.2332" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="77.2544" />
                                                            <Key frame="34" value="115.224" />
                                                            <Key frame="47" value="115.224" />
                                                            <Key frame="51" value="115.224" />
                                                            <Key frame="127" value="114.345" />
                                                            <Key frame="142" value="114.345" />
                                                            <Key frame="148" value="113.026" />
                                                            <Key frame="157" value="105.028" />
                                                            <Key frame="178" value="74.354" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="2.28279" />
                                                            <Key frame="34" value="9.22623" />
                                                            <Key frame="47" value="11.863" />
                                                            <Key frame="51" value="11.863" />
                                                            <Key frame="127" value="6.76526" />
                                                            <Key frame="142" value="6.76526" />
                                                            <Key frame="148" value="7.46839" />
                                                            <Key frame="157" value="6.85315" />
                                                            <Key frame="178" value="1.57965" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-91.9372" />
                                                            <Key frame="34" value="-92.7282" />
                                                            <Key frame="47" value="-93.8708" />
                                                            <Key frame="51" value="-93.8708" />
                                                            <Key frame="127" value="-95.3649" />
                                                            <Key frame="142" value="-95.3649" />
                                                            <Key frame="148" value="-94.6618" />
                                                            <Key frame="157" value="-90.9703" />
                                                            <Key frame="178" value="-90.9703" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="71.81" />
                                                            <Key frame="34" value="76.7319" />
                                                            <Key frame="47" value="75.853" />
                                                            <Key frame="51" value="78.9292" />
                                                            <Key frame="127" value="83.2359" />
                                                            <Key frame="142" value="83.2359" />
                                                            <Key frame="148" value="79.6323" />
                                                            <Key frame="157" value="72.7768" />
                                                            <Key frame="178" value="72.7768" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="88.944" />
                                                            <Key frame="34" value="89.7351" />
                                                            <Key frame="47" value="89.7351" />
                                                            <Key frame="51" value="89.7351" />
                                                            <Key frame="127" value="89.5593" />
                                                            <Key frame="142" value="89.5593" />
                                                            <Key frame="148" value="89.5593" />
                                                            <Key frame="157" value="89.5593" />
                                                            <Key frame="178" value="89.5593" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="17" value="0.348" />
                                                            <Key frame="34" value="0.3316" />
                                                            <Key frame="47" value="0.3296" />
                                                            <Key frame="51" value="0.33" />
                                                            <Key frame="127" value="0.4184" />
                                                            <Key frame="142" value="0.4184" />
                                                            <Key frame="148" value="0.4184" />
                                                            <Key frame="157" value="0.4184" />
                                                            <Key frame="178" value="0.4184" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="77.435" />
                                                            <Key frame="34" value="75.5014" />
                                                            <Key frame="47" value="75.5014" />
                                                            <Key frame="51" value="75.5014" />
                                                            <Key frame="127" value="75.2377" />
                                                            <Key frame="142" value="76.4682" />
                                                            <Key frame="148" value="77.0834" />
                                                            <Key frame="157" value="77.0834" />
                                                            <Key frame="178" value="77.0834" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-3.78175" />
                                                            <Key frame="34" value="6.50159" />
                                                            <Key frame="47" value="8.08364" />
                                                            <Key frame="51" value="2.28279" />
                                                            <Key frame="127" value="-23.1179" />
                                                            <Key frame="142" value="-13.5377" />
                                                            <Key frame="148" value="-7.73688" />
                                                            <Key frame="157" value="-2.11181" />
                                                            <Key frame="178" value="-1.40867" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="100.634" />
                                                            <Key frame="34" value="80.4185" />
                                                            <Key frame="47" value="2.54646" />
                                                            <Key frame="51" value="1.40386" />
                                                            <Key frame="127" value="3.24959" />
                                                            <Key frame="142" value="60.2034" />
                                                            <Key frame="148" value="77.3423" />
                                                            <Key frame="157" value="96.0633" />
                                                            <Key frame="178" value="104.5" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="29.3534" />
                                                            <Key frame="34" value="29.3534" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-0.881327" />
                                                            <Key frame="34" value="-0.881327" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-15.2956" />
                                                            <Key frame="34" value="-15.3835" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.881327" />
                                                            <Key frame="34" value="0.881327" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-13.7087" />
                                                            <Key frame="34" value="-13.7087" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.705531" />
                                                            <Key frame="34" value="0.705531" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.353968" />
                                                            <Key frame="34" value="0.353968" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="26.7167" />
                                                            <Key frame="34" value="26.7167" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-14.5876" />
                                                            <Key frame="34" value="-15.115" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.529749" />
                                                            <Key frame="34" value="0.529749" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-12.0436" />
                                                            <Key frame="34" value="-12.0436" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-0.524941" />
                                                            <Key frame="34" value="-0.524941" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.353968" />
                                                            <Key frame="34" value="0.353968" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="23.909" />
                                                            <Key frame="34" value="23.909" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Stand Up" id="6" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="185" y="699">
                            <bitmap>media/images/box/movement/stand.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="StandUpBehavior">
                                    <BehaviorKeyframe name="DetectRobotPose" index="1">
                                        <Diagram>
                                            <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                    <Choice value="Crouch" />
                                                    <Choice value="LyingBack" />
                                                    <Choice value="LyingBelly" />
                                                    <Choice value="Sit" />
                                                    <Choice value="SitRelax" />
                                                    <Choice value="StandInit" />
                                                    <Choice value="Stand" />
                                                    <Choice value="StandZero" />
                                                </Parameter>
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                                <Resource name="Stiffness" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="All motors" type="Lock" timeout="0" />
                        </Box>
                        <Box name="lift (3)" id="3" localization="8" tooltip="" x="554" y="582">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="70">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="1.40386" />
                                        <Key frame="59" value="1.40386" />
                                        <Key frame="70" value="1.40386" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.0902951" />
                                        <Key frame="59" value="-0.0902951" />
                                        <Key frame="70" value="-0.0902951" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-20.1296" />
                                        <Key frame="59" value="-20.1296" />
                                        <Key frame="70" value="-19.5144" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.705531" />
                                        <Key frame="59" value="0.705531" />
                                        <Key frame="70" value="0.705531" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-56.4241" />
                                        <Key frame="59" value="-28.7382" />
                                        <Key frame="70" value="-64.8617" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-79.1928" />
                                        <Key frame="59" value="-91.4098" />
                                        <Key frame="70" value="-98.1775" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="44" value="0.0268" />
                                        <Key frame="59" value="0.0420001" />
                                        <Key frame="70" value="0.0268" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-25.9256" />
                                        <Key frame="59" value="-25.9256" />
                                        <Key frame="70" value="-25.9256" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.0854867" />
                                        <Key frame="59" value="-0.0854867" />
                                        <Key frame="70" value="-0.0854867" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.178186" />
                                        <Key frame="59" value="0.178186" />
                                        <Key frame="70" value="0.178186" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="40.3399" />
                                        <Key frame="59" value="40.3399" />
                                        <Key frame="70" value="40.3399" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="81.1217" />
                                        <Key frame="59" value="111.005" />
                                        <Key frame="70" value="116.015" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="13.445" />
                                        <Key frame="59" value="2.0191" />
                                        <Key frame="70" value="5.2711" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.61764" />
                                        <Key frame="59" value="-91.4098" />
                                        <Key frame="70" value="-91.7614" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-20.1248" />
                                        <Key frame="59" value="-20.1248" />
                                        <Key frame="70" value="-20.1248" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.0902951" />
                                        <Key frame="59" value="0.0902951" />
                                        <Key frame="70" value="0.0902951" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="78.0503" />
                                        <Key frame="59" value="76.4682" />
                                        <Key frame="70" value="77.435" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="90.5261" />
                                        <Key frame="59" value="90.2624" />
                                        <Key frame="70" value="83.6705" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="44" value="0.3468" />
                                        <Key frame="59" value="0.3396" />
                                        <Key frame="70" value="0.3084" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-26.4578" />
                                        <Key frame="59" value="-26.4578" />
                                        <Key frame="70" value="-25.8426" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.529749" />
                                        <Key frame="59" value="0.529749" />
                                        <Key frame="70" value="-0.0854867" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.178186" />
                                        <Key frame="59" value="0.178186" />
                                        <Key frame="70" value="0.178186" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="39.9931" />
                                        <Key frame="59" value="39.9931" />
                                        <Key frame="70" value="39.9931" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="70.0521" />
                                        <Key frame="59" value="70.7552" />
                                        <Key frame="70" value="118.92" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="4.2164" />
                                        <Key frame="59" value="2.107" />
                                        <Key frame="70" value="-9.40682" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="88.8561" />
                                        <Key frame="59" value="83.2311" />
                                        <Key frame="70" value="104.061" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="push、 (2)" id="21" localization="8" tooltip="" x="370" y="584">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="shoot (1)" id="3" localization="8" tooltip="" x="688" y="79">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="1" fps="50" start_frame="1" end_frame="-1" size="155">
                                                    <ActuatorList model="">
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-37.2637" />
                                                            <Key frame="24" value="-37.2637" />
                                                            <Key frame="35" value="-37.0879" />
                                                            <Key frame="37" value="-37.8789" />
                                                            <Key frame="104" value="-37.0879" />
                                                            <Key frame="119" value="-37.0879" />
                                                            <Key frame="134" value="-29.6171" />
                                                            <Key frame="155" value="-60.0277" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-93.6071" />
                                                            <Key frame="24" value="-93.6071" />
                                                            <Key frame="35" value="-94.8376" />
                                                            <Key frame="37" value="-94.8376" />
                                                            <Key frame="104" value="-94.8376" />
                                                            <Key frame="119" value="-94.8376" />
                                                            <Key frame="134" value="-95.4528" />
                                                            <Key frame="155" value="-97.6501" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="15" value="0.2424" />
                                                            <Key frame="24" value="0.2424" />
                                                            <Key frame="35" value="0.2424" />
                                                            <Key frame="37" value="0.2424" />
                                                            <Key frame="104" value="0.2424" />
                                                            <Key frame="119" value="0.2424" />
                                                            <Key frame="134" value="0.2424" />
                                                            <Key frame="155" value="0.2424" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="118.827" />
                                                            <Key frame="24" value="118.827" />
                                                            <Key frame="35" value="112.763" />
                                                            <Key frame="37" value="115.136" />
                                                            <Key frame="104" value="112.851" />
                                                            <Key frame="119" value="112.851" />
                                                            <Key frame="134" value="103.71" />
                                                            <Key frame="155" value="72.5962" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="1.49175" />
                                                            <Key frame="24" value="1.49175" />
                                                            <Key frame="35" value="0.524941" />
                                                            <Key frame="37" value="0.524941" />
                                                            <Key frame="104" value="0.524941" />
                                                            <Key frame="119" value="0.524941" />
                                                            <Key frame="134" value="0.524941" />
                                                            <Key frame="155" value="0.524941" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-96.0681" />
                                                            <Key frame="24" value="-96.0681" />
                                                            <Key frame="35" value="-94.9255" />
                                                            <Key frame="37" value="-94.9255" />
                                                            <Key frame="104" value="-94.9255" />
                                                            <Key frame="119" value="-94.9255" />
                                                            <Key frame="134" value="-90.0914" />
                                                            <Key frame="155" value="-90.7946" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="79.9839" />
                                                            <Key frame="24" value="79.9839" />
                                                            <Key frame="35" value="66.888" />
                                                            <Key frame="37" value="82.1812" />
                                                            <Key frame="104" value="85.4332" />
                                                            <Key frame="119" value="84.2027" />
                                                            <Key frame="134" value="74.5346" />
                                                            <Key frame="155" value="74.5346" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="89.5593" />
                                                            <Key frame="24" value="89.5593" />
                                                            <Key frame="35" value="90.7897" />
                                                            <Key frame="37" value="90.3503" />
                                                            <Key frame="104" value="91.2292" />
                                                            <Key frame="119" value="90.614" />
                                                            <Key frame="134" value="90.3503" />
                                                            <Key frame="155" value="90.3503" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="15" value="0.3908" />
                                                            <Key frame="24" value="0.3908" />
                                                            <Key frame="35" value="0.11" />
                                                            <Key frame="37" value="0.384" />
                                                            <Key frame="104" value="0.384" />
                                                            <Key frame="119" value="0.384" />
                                                            <Key frame="134" value="0.384" />
                                                            <Key frame="155" value="0.384" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="67.1517" />
                                                            <Key frame="24" value="67.1517" />
                                                            <Key frame="35" value="64" />
                                                            <Key frame="37" value="70.0521" />
                                                            <Key frame="104" value="75.062" />
                                                            <Key frame="119" value="75.7651" />
                                                            <Key frame="125" value="76.6" />
                                                            <Key frame="134" value="76.3803" />
                                                            <Key frame="155" value="76.3803" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="7.02893" />
                                                            <Key frame="24" value="7.02893" />
                                                            <Key frame="35" value="17.5759" />
                                                            <Key frame="37" value="-5.71537" />
                                                            <Key frame="104" value="-26.1941" />
                                                            <Key frame="119" value="-14.3288" />
                                                            <Key frame="134" value="-0.0902951" />
                                                            <Key frame="155" value="-0.0902951" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="93.0749" />
                                                            <Key frame="24" value="93.0749" />
                                                            <Key frame="35" value="13.0935" />
                                                            <Key frame="37" value="-4.22121" />
                                                            <Key frame="104" value="3.68905" />
                                                            <Key frame="119" value="62.4886" />
                                                            <Key frame="134" value="100.282" />
                                                            <Key frame="155" value="100.282" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="2.28279" />
                                                            <Key frame="24" value="2.28279" />
                                                            <Key frame="35" value="2.28279" />
                                                            <Key frame="37" value="2.28279" />
                                                            <Key frame="104" value="2.72224" />
                                                            <Key frame="119" value="2.72224" />
                                                            <Key frame="134" value="2.72224" />
                                                            <Key frame="155" value="2.72224" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="1.31597" />
                                                            <Key frame="24" value="1.31597" />
                                                            <Key frame="35" value="0.43705" />
                                                            <Key frame="37" value="0.43705" />
                                                            <Key frame="104" value="1.66754" />
                                                            <Key frame="119" value="1.66754" />
                                                            <Key frame="134" value="1.66754" />
                                                            <Key frame="155" value="1.66754" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-19.778" />
                                                            <Key frame="24" value="-19.778" />
                                                            <Key frame="35" value="-20.5691" />
                                                            <Key frame="37" value="-20.5691" />
                                                            <Key frame="104" value="-20.657" />
                                                            <Key frame="119" value="-20.657" />
                                                            <Key frame="134" value="-20.657" />
                                                            <Key frame="155" value="-20.657" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.178186" />
                                                            <Key frame="24" value="0.178186" />
                                                            <Key frame="35" value="0.178186" />
                                                            <Key frame="37" value="0.178186" />
                                                            <Key frame="104" value="0.178186" />
                                                            <Key frame="119" value="0.178186" />
                                                            <Key frame="134" value="0.178186" />
                                                            <Key frame="155" value="0.178186" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-26.0135" />
                                                            <Key frame="24" value="-26.0135" />
                                                            <Key frame="35" value="-26.0135" />
                                                            <Key frame="37" value="-26.0135" />
                                                            <Key frame="104" value="-26.0135" />
                                                            <Key frame="119" value="-26.0135" />
                                                            <Key frame="134" value="-26.0135" />
                                                            <Key frame="155" value="-26.0135" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.178186" />
                                                            <Key frame="24" value="0.178186" />
                                                            <Key frame="35" value="0.178186" />
                                                            <Key frame="37" value="0.178186" />
                                                            <Key frame="104" value="0.178186" />
                                                            <Key frame="119" value="0.178186" />
                                                            <Key frame="134" value="0.178186" />
                                                            <Key frame="155" value="0.178186" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.266077" />
                                                            <Key frame="24" value="0.266077" />
                                                            <Key frame="35" value="0.266077" />
                                                            <Key frame="37" value="0.266077" />
                                                            <Key frame="104" value="0.266077" />
                                                            <Key frame="119" value="0.266077" />
                                                            <Key frame="134" value="0.266077" />
                                                            <Key frame="155" value="0.266077" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="40.1641" />
                                                            <Key frame="24" value="40.1641" />
                                                            <Key frame="35" value="40.1641" />
                                                            <Key frame="37" value="40.1641" />
                                                            <Key frame="104" value="40.1641" />
                                                            <Key frame="119" value="40.1641" />
                                                            <Key frame="134" value="40.1641" />
                                                            <Key frame="155" value="40.1641" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-20.0369" />
                                                            <Key frame="24" value="-20.0369" />
                                                            <Key frame="35" value="-20.0369" />
                                                            <Key frame="37" value="-20.0369" />
                                                            <Key frame="104" value="-20.0369" />
                                                            <Key frame="119" value="-20.0369" />
                                                            <Key frame="134" value="-20.0369" />
                                                            <Key frame="155" value="-20.0369" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.00240423" />
                                                            <Key frame="24" value="0.00240423" />
                                                            <Key frame="35" value="0.00240423" />
                                                            <Key frame="37" value="0.00240423" />
                                                            <Key frame="104" value="0.00240423" />
                                                            <Key frame="119" value="0.00240423" />
                                                            <Key frame="134" value="0.00240423" />
                                                            <Key frame="155" value="0.00240423" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-25.8426" />
                                                            <Key frame="24" value="-25.8426" />
                                                            <Key frame="35" value="-25.8426" />
                                                            <Key frame="37" value="-25.8426" />
                                                            <Key frame="104" value="-25.8426" />
                                                            <Key frame="119" value="-25.8426" />
                                                            <Key frame="134" value="-25.8426" />
                                                            <Key frame="155" value="-25.8426" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.00240423" />
                                                            <Key frame="24" value="0.00240423" />
                                                            <Key frame="35" value="0.00240423" />
                                                            <Key frame="37" value="0.00240423" />
                                                            <Key frame="104" value="0.00240423" />
                                                            <Key frame="119" value="0.00240423" />
                                                            <Key frame="134" value="0.00240423" />
                                                            <Key frame="155" value="0.00240423" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.266077" />
                                                            <Key frame="24" value="0.266077" />
                                                            <Key frame="35" value="0.266077" />
                                                            <Key frame="37" value="0.266077" />
                                                            <Key frame="104" value="0.266077" />
                                                            <Key frame="119" value="0.266077" />
                                                            <Key frame="134" value="0.266077" />
                                                            <Key frame="155" value="0.266077" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="40.081" />
                                                            <Key frame="24" value="40.081" />
                                                            <Key frame="35" value="40.081" />
                                                            <Key frame="37" value="40.081" />
                                                            <Key frame="104" value="40.081" />
                                                            <Key frame="119" value="40.081" />
                                                            <Key frame="134" value="40.081" />
                                                            <Key frame="155" value="40.081" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="Hands" id="6" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="404" y="201">
                                                <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Close the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                    <Choice value="Open the hand" />
                                                    <Choice value="Close the hand" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Hands (1)" id="1" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="148" y="269">
                                                <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Close the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                    <Choice value="Open the hand" />
                                                    <Choice value="Close the hand" />
                                                </Parameter>
                                            </Box>
                                            <Box name="recover" id="2" localization="8" tooltip="" x="877" y="339">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40">
                                                    <ActuatorList model="">
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="-10.6373" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="0.0854867" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="-29.3534" />
                                                            <Key frame="29" value="-65.9164" />
                                                            <Key frame="40" value="-83.8463" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="-100.726" />
                                                            <Key frame="29" value="-100.726" />
                                                            <Key frame="40" value="-100.726" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="0.9924" />
                                                            <Key frame="29" value="0.9924" />
                                                            <Key frame="40" value="0.9924" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="86.3952" />
                                                            <Key frame="29" value="93.1628" />
                                                            <Key frame="40" value="84.4615" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="1.75543" />
                                                            <Key frame="29" value="-3.78175" />
                                                            <Key frame="40" value="-3.69386" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="-88.5973" />
                                                            <Key frame="29" value="-89.1246" />
                                                            <Key frame="40" value="-91.3219" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="71.5463" />
                                                            <Key frame="29" value="70.8431" />
                                                            <Key frame="40" value="70.8431" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="83.7584" />
                                                            <Key frame="29" value="83.7584" />
                                                            <Key frame="40" value="83.7584" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="0.312" />
                                                            <Key frame="29" value="0.312" />
                                                            <Key frame="40" value="0.312" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="72.5131" />
                                                            <Key frame="29" value="73.2162" />
                                                            <Key frame="40" value="73.2162" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="5.44688" />
                                                            <Key frame="29" value="4.12851" />
                                                            <Key frame="40" value="4.12851" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="103.446" />
                                                            <Key frame="29" value="102.831" />
                                                            <Key frame="40" value="102.831" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="shoot_syb" id="7" localization="8" tooltip="" x="550" y="364">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="1" fps="50" start_frame="1" end_frame="-1" size="178">
                                                    <ActuatorList model="">
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-55.9846" />
                                                            <Key frame="34" value="-37.0879" />
                                                            <Key frame="47" value="-36.3848" />
                                                            <Key frame="51" value="-36.3848" />
                                                            <Key frame="127" value="-35.5059" />
                                                            <Key frame="142" value="-35.5059" />
                                                            <Key frame="148" value="-34.0996" />
                                                            <Key frame="157" value="-29.5292" />
                                                            <Key frame="178" value="-58.094" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-97.6501" />
                                                            <Key frame="34" value="-98.4411" />
                                                            <Key frame="47" value="-98.4411" />
                                                            <Key frame="51" value="-98.4411" />
                                                            <Key frame="127" value="-97.6501" />
                                                            <Key frame="142" value="-97.6501" />
                                                            <Key frame="148" value="-97.6501" />
                                                            <Key frame="157" value="-97.6501" />
                                                            <Key frame="178" value="-97.6501" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="17" value="0.22" />
                                                            <Key frame="34" value="0.0376" />
                                                            <Key frame="47" value="0.0376" />
                                                            <Key frame="51" value="0.0376" />
                                                            <Key frame="127" value="0.2332" />
                                                            <Key frame="142" value="0.2332" />
                                                            <Key frame="148" value="0.2332" />
                                                            <Key frame="157" value="0.2332" />
                                                            <Key frame="178" value="0.2332" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="77.2544" />
                                                            <Key frame="34" value="115.224" />
                                                            <Key frame="47" value="115.224" />
                                                            <Key frame="51" value="115.224" />
                                                            <Key frame="127" value="114.345" />
                                                            <Key frame="142" value="114.345" />
                                                            <Key frame="148" value="113.026" />
                                                            <Key frame="157" value="105.028" />
                                                            <Key frame="178" value="74.354" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="2.28279" />
                                                            <Key frame="34" value="9.22623" />
                                                            <Key frame="47" value="11.863" />
                                                            <Key frame="51" value="11.863" />
                                                            <Key frame="127" value="6.76526" />
                                                            <Key frame="142" value="6.76526" />
                                                            <Key frame="148" value="7.46839" />
                                                            <Key frame="157" value="6.85315" />
                                                            <Key frame="178" value="1.57965" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-91.9372" />
                                                            <Key frame="34" value="-92.7282" />
                                                            <Key frame="47" value="-93.8708" />
                                                            <Key frame="51" value="-93.8708" />
                                                            <Key frame="127" value="-95.3649" />
                                                            <Key frame="142" value="-95.3649" />
                                                            <Key frame="148" value="-94.6618" />
                                                            <Key frame="157" value="-90.9703" />
                                                            <Key frame="178" value="-90.9703" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="71.81" />
                                                            <Key frame="34" value="76.7319" />
                                                            <Key frame="47" value="75.853" />
                                                            <Key frame="51" value="78.9292" />
                                                            <Key frame="127" value="83.2359" />
                                                            <Key frame="142" value="83.2359" />
                                                            <Key frame="148" value="79.6323" />
                                                            <Key frame="157" value="72.7768" />
                                                            <Key frame="178" value="72.7768" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="88.944" />
                                                            <Key frame="34" value="89.7351" />
                                                            <Key frame="47" value="89.7351" />
                                                            <Key frame="51" value="89.7351" />
                                                            <Key frame="127" value="89.5593" />
                                                            <Key frame="142" value="89.5593" />
                                                            <Key frame="148" value="89.5593" />
                                                            <Key frame="157" value="89.5593" />
                                                            <Key frame="178" value="89.5593" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="17" value="0.348" />
                                                            <Key frame="34" value="0.3316" />
                                                            <Key frame="41" value="0.37" />
                                                            <Key frame="47" value="0.3296" />
                                                            <Key frame="51" value="0.33" />
                                                            <Key frame="127" value="0.4184" />
                                                            <Key frame="142" value="0.4184" />
                                                            <Key frame="148" value="0.4184" />
                                                            <Key frame="157" value="0.4184" />
                                                            <Key frame="178" value="0.4184" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="77.435" />
                                                            <Key frame="34" value="75.5014" />
                                                            <Key frame="47" value="75.5014" />
                                                            <Key frame="51" value="75.5014" />
                                                            <Key frame="127" value="75.2377" />
                                                            <Key frame="142" value="76.4682" />
                                                            <Key frame="148" value="77.0834" />
                                                            <Key frame="157" value="77.0834" />
                                                            <Key frame="178" value="77.0834" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-3.78175" />
                                                            <Key frame="34" value="6.50159" />
                                                            <Key frame="47" value="8.08364" />
                                                            <Key frame="51" value="2.28279" />
                                                            <Key frame="127" value="-23.1179" />
                                                            <Key frame="142" value="-13.5377" />
                                                            <Key frame="148" value="-7.73688" />
                                                            <Key frame="157" value="-2.11181" />
                                                            <Key frame="178" value="-1.40867" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="100.634" />
                                                            <Key frame="34" value="80.4185" />
                                                            <Key frame="47" value="2.54646" />
                                                            <Key frame="51" value="1.40386" />
                                                            <Key frame="127" value="3.24959" />
                                                            <Key frame="142" value="60.2034" />
                                                            <Key frame="148" value="77.3423" />
                                                            <Key frame="157" value="96.0633" />
                                                            <Key frame="178" value="104.5" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="29.3534" />
                                                            <Key frame="34" value="29.3534" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-0.881327" />
                                                            <Key frame="34" value="-0.881327" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-15.2956" />
                                                            <Key frame="34" value="-15.3835" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.881327" />
                                                            <Key frame="34" value="0.881327" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-13.7087" />
                                                            <Key frame="34" value="-13.7087" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.705531" />
                                                            <Key frame="34" value="0.705531" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.353968" />
                                                            <Key frame="34" value="0.353968" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="26.7167" />
                                                            <Key frame="34" value="26.7167" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-14.5876" />
                                                            <Key frame="34" value="-15.115" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.529749" />
                                                            <Key frame="34" value="0.529749" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-12.0436" />
                                                            <Key frame="34" value="-12.0436" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-0.524941" />
                                                            <Key frame="34" value="-0.524941" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.353968" />
                                                            <Key frame="34" value="0.353968" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="23.909" />
                                                            <Key frame="34" value="23.909" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="push、 (3)" id="7" localization="8" tooltip="" x="1404" y="217">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="shoot (1)" id="3" localization="8" tooltip="" x="688" y="79">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="1" fps="50" start_frame="1" end_frame="-1" size="155">
                                                    <ActuatorList model="">
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-37.2637" />
                                                            <Key frame="24" value="-37.2637" />
                                                            <Key frame="35" value="-37.0879" />
                                                            <Key frame="37" value="-37.8789" />
                                                            <Key frame="104" value="-37.0879" />
                                                            <Key frame="119" value="-37.0879" />
                                                            <Key frame="134" value="-29.6171" />
                                                            <Key frame="155" value="-60.0277" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-93.6071" />
                                                            <Key frame="24" value="-93.6071" />
                                                            <Key frame="35" value="-94.8376" />
                                                            <Key frame="37" value="-94.8376" />
                                                            <Key frame="104" value="-94.8376" />
                                                            <Key frame="119" value="-94.8376" />
                                                            <Key frame="134" value="-95.4528" />
                                                            <Key frame="155" value="-97.6501" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="15" value="0.2424" />
                                                            <Key frame="24" value="0.2424" />
                                                            <Key frame="35" value="0.2424" />
                                                            <Key frame="37" value="0.2424" />
                                                            <Key frame="104" value="0.2424" />
                                                            <Key frame="119" value="0.2424" />
                                                            <Key frame="134" value="0.2424" />
                                                            <Key frame="155" value="0.2424" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="118.827" />
                                                            <Key frame="24" value="118.827" />
                                                            <Key frame="35" value="112.763" />
                                                            <Key frame="37" value="115.136" />
                                                            <Key frame="104" value="112.851" />
                                                            <Key frame="119" value="112.851" />
                                                            <Key frame="134" value="103.71" />
                                                            <Key frame="155" value="72.5962" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="1.49175" />
                                                            <Key frame="24" value="1.49175" />
                                                            <Key frame="35" value="0.524941" />
                                                            <Key frame="37" value="0.524941" />
                                                            <Key frame="104" value="0.524941" />
                                                            <Key frame="119" value="0.524941" />
                                                            <Key frame="134" value="0.524941" />
                                                            <Key frame="155" value="0.524941" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-96.0681" />
                                                            <Key frame="24" value="-96.0681" />
                                                            <Key frame="35" value="-94.9255" />
                                                            <Key frame="37" value="-94.9255" />
                                                            <Key frame="104" value="-94.9255" />
                                                            <Key frame="119" value="-94.9255" />
                                                            <Key frame="134" value="-90.0914" />
                                                            <Key frame="155" value="-90.7946" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="79.9839" />
                                                            <Key frame="24" value="79.9839" />
                                                            <Key frame="35" value="66.888" />
                                                            <Key frame="37" value="82.1812" />
                                                            <Key frame="104" value="85.4332" />
                                                            <Key frame="119" value="84.2027" />
                                                            <Key frame="134" value="74.5346" />
                                                            <Key frame="155" value="74.5346" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="89.5593" />
                                                            <Key frame="24" value="89.5593" />
                                                            <Key frame="35" value="90.7897" />
                                                            <Key frame="37" value="90.3503" />
                                                            <Key frame="104" value="91.2292" />
                                                            <Key frame="119" value="90.614" />
                                                            <Key frame="134" value="90.3503" />
                                                            <Key frame="155" value="90.3503" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="15" value="0.3908" />
                                                            <Key frame="24" value="0.3908" />
                                                            <Key frame="35" value="0.11" />
                                                            <Key frame="37" value="0.384" />
                                                            <Key frame="104" value="0.384" />
                                                            <Key frame="119" value="0.384" />
                                                            <Key frame="134" value="0.384" />
                                                            <Key frame="155" value="0.384" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="67.1517" />
                                                            <Key frame="24" value="67.1517" />
                                                            <Key frame="35" value="64" />
                                                            <Key frame="37" value="70.0521" />
                                                            <Key frame="104" value="75.062" />
                                                            <Key frame="119" value="75.7651" />
                                                            <Key frame="125" value="76.6" />
                                                            <Key frame="134" value="76.3803" />
                                                            <Key frame="155" value="76.3803" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="7.02893" />
                                                            <Key frame="24" value="7.02893" />
                                                            <Key frame="35" value="17.5759" />
                                                            <Key frame="37" value="-5.71537" />
                                                            <Key frame="104" value="-26.1941" />
                                                            <Key frame="119" value="-14.3288" />
                                                            <Key frame="134" value="-0.0902951" />
                                                            <Key frame="155" value="-0.0902951" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="93.0749" />
                                                            <Key frame="24" value="93.0749" />
                                                            <Key frame="35" value="13.0935" />
                                                            <Key frame="37" value="-4.22121" />
                                                            <Key frame="104" value="3.68905" />
                                                            <Key frame="119" value="62.4886" />
                                                            <Key frame="134" value="100.282" />
                                                            <Key frame="155" value="100.282" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="2.28279" />
                                                            <Key frame="24" value="2.28279" />
                                                            <Key frame="35" value="2.28279" />
                                                            <Key frame="37" value="2.28279" />
                                                            <Key frame="104" value="2.72224" />
                                                            <Key frame="119" value="2.72224" />
                                                            <Key frame="134" value="2.72224" />
                                                            <Key frame="155" value="2.72224" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="1.31597" />
                                                            <Key frame="24" value="1.31597" />
                                                            <Key frame="35" value="0.43705" />
                                                            <Key frame="37" value="0.43705" />
                                                            <Key frame="104" value="1.66754" />
                                                            <Key frame="119" value="1.66754" />
                                                            <Key frame="134" value="1.66754" />
                                                            <Key frame="155" value="1.66754" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-19.778" />
                                                            <Key frame="24" value="-19.778" />
                                                            <Key frame="35" value="-20.5691" />
                                                            <Key frame="37" value="-20.5691" />
                                                            <Key frame="104" value="-20.657" />
                                                            <Key frame="119" value="-20.657" />
                                                            <Key frame="134" value="-20.657" />
                                                            <Key frame="155" value="-20.657" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.178186" />
                                                            <Key frame="24" value="0.178186" />
                                                            <Key frame="35" value="0.178186" />
                                                            <Key frame="37" value="0.178186" />
                                                            <Key frame="104" value="0.178186" />
                                                            <Key frame="119" value="0.178186" />
                                                            <Key frame="134" value="0.178186" />
                                                            <Key frame="155" value="0.178186" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-26.0135" />
                                                            <Key frame="24" value="-26.0135" />
                                                            <Key frame="35" value="-26.0135" />
                                                            <Key frame="37" value="-26.0135" />
                                                            <Key frame="104" value="-26.0135" />
                                                            <Key frame="119" value="-26.0135" />
                                                            <Key frame="134" value="-26.0135" />
                                                            <Key frame="155" value="-26.0135" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.178186" />
                                                            <Key frame="24" value="0.178186" />
                                                            <Key frame="35" value="0.178186" />
                                                            <Key frame="37" value="0.178186" />
                                                            <Key frame="104" value="0.178186" />
                                                            <Key frame="119" value="0.178186" />
                                                            <Key frame="134" value="0.178186" />
                                                            <Key frame="155" value="0.178186" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.266077" />
                                                            <Key frame="24" value="0.266077" />
                                                            <Key frame="35" value="0.266077" />
                                                            <Key frame="37" value="0.266077" />
                                                            <Key frame="104" value="0.266077" />
                                                            <Key frame="119" value="0.266077" />
                                                            <Key frame="134" value="0.266077" />
                                                            <Key frame="155" value="0.266077" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="40.1641" />
                                                            <Key frame="24" value="40.1641" />
                                                            <Key frame="35" value="40.1641" />
                                                            <Key frame="37" value="40.1641" />
                                                            <Key frame="104" value="40.1641" />
                                                            <Key frame="119" value="40.1641" />
                                                            <Key frame="134" value="40.1641" />
                                                            <Key frame="155" value="40.1641" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-20.0369" />
                                                            <Key frame="24" value="-20.0369" />
                                                            <Key frame="35" value="-20.0369" />
                                                            <Key frame="37" value="-20.0369" />
                                                            <Key frame="104" value="-20.0369" />
                                                            <Key frame="119" value="-20.0369" />
                                                            <Key frame="134" value="-20.0369" />
                                                            <Key frame="155" value="-20.0369" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.00240423" />
                                                            <Key frame="24" value="0.00240423" />
                                                            <Key frame="35" value="0.00240423" />
                                                            <Key frame="37" value="0.00240423" />
                                                            <Key frame="104" value="0.00240423" />
                                                            <Key frame="119" value="0.00240423" />
                                                            <Key frame="134" value="0.00240423" />
                                                            <Key frame="155" value="0.00240423" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="-25.8426" />
                                                            <Key frame="24" value="-25.8426" />
                                                            <Key frame="35" value="-25.8426" />
                                                            <Key frame="37" value="-25.8426" />
                                                            <Key frame="104" value="-25.8426" />
                                                            <Key frame="119" value="-25.8426" />
                                                            <Key frame="134" value="-25.8426" />
                                                            <Key frame="155" value="-25.8426" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.00240423" />
                                                            <Key frame="24" value="0.00240423" />
                                                            <Key frame="35" value="0.00240423" />
                                                            <Key frame="37" value="0.00240423" />
                                                            <Key frame="104" value="0.00240423" />
                                                            <Key frame="119" value="0.00240423" />
                                                            <Key frame="134" value="0.00240423" />
                                                            <Key frame="155" value="0.00240423" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="0.266077" />
                                                            <Key frame="24" value="0.266077" />
                                                            <Key frame="35" value="0.266077" />
                                                            <Key frame="37" value="0.266077" />
                                                            <Key frame="104" value="0.266077" />
                                                            <Key frame="119" value="0.266077" />
                                                            <Key frame="134" value="0.266077" />
                                                            <Key frame="155" value="0.266077" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="15" value="40.081" />
                                                            <Key frame="24" value="40.081" />
                                                            <Key frame="35" value="40.081" />
                                                            <Key frame="37" value="40.081" />
                                                            <Key frame="104" value="40.081" />
                                                            <Key frame="119" value="40.081" />
                                                            <Key frame="134" value="40.081" />
                                                            <Key frame="155" value="40.081" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="Hands" id="6" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="404" y="201">
                                                <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Right" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Close the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                    <Choice value="Open the hand" />
                                                    <Choice value="Close the hand" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Hands (1)" id="1" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="148" y="269">
                                                <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Close the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                    <Choice value="Open the hand" />
                                                    <Choice value="Close the hand" />
                                                </Parameter>
                                            </Box>
                                            <Box name="recover" id="2" localization="8" tooltip="" x="877" y="339">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40">
                                                    <ActuatorList model="">
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="-10.6373" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="0.0854867" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="-29.3534" />
                                                            <Key frame="29" value="-65.9164" />
                                                            <Key frame="40" value="-83.8463" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="-100.726" />
                                                            <Key frame="29" value="-100.726" />
                                                            <Key frame="40" value="-100.726" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="0.9924" />
                                                            <Key frame="29" value="0.9924" />
                                                            <Key frame="40" value="0.9924" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="86.3952" />
                                                            <Key frame="29" value="93.1628" />
                                                            <Key frame="40" value="84.4615" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="1.75543" />
                                                            <Key frame="29" value="-3.78175" />
                                                            <Key frame="40" value="-3.69386" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="-88.5973" />
                                                            <Key frame="29" value="-89.1246" />
                                                            <Key frame="40" value="-91.3219" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="71.5463" />
                                                            <Key frame="29" value="70.8431" />
                                                            <Key frame="40" value="70.8431" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="83.7584" />
                                                            <Key frame="29" value="83.7584" />
                                                            <Key frame="40" value="83.7584" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="0.312" />
                                                            <Key frame="29" value="0.312" />
                                                            <Key frame="40" value="0.312" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="72.5131" />
                                                            <Key frame="29" value="73.2162" />
                                                            <Key frame="40" value="73.2162" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="5.44688" />
                                                            <Key frame="29" value="4.12851" />
                                                            <Key frame="40" value="4.12851" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="-1">
                                                            <Key frame="21" value="103.446" />
                                                            <Key frame="29" value="102.831" />
                                                            <Key frame="40" value="102.831" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="shoot_syb" id="7" localization="8" tooltip="" x="550" y="364">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="1" fps="45" start_frame="1" end_frame="-1" size="178">
                                                    <ActuatorList model="">
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-55.9846" />
                                                            <Key frame="36" value="-37.0879" />
                                                            <Key frame="47" value="-36.3848" />
                                                            <Key frame="51" value="-36.3848" />
                                                            <Key frame="127" value="-35.5059" />
                                                            <Key frame="142" value="-35.5059" />
                                                            <Key frame="148" value="-34.0996" />
                                                            <Key frame="157" value="-29.5292" />
                                                            <Key frame="178" value="-58.094" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-97.6501" />
                                                            <Key frame="36" value="-98.4411" />
                                                            <Key frame="47" value="-98.4411" />
                                                            <Key frame="51" value="-98.4411" />
                                                            <Key frame="127" value="-97.6501" />
                                                            <Key frame="142" value="-97.6501" />
                                                            <Key frame="148" value="-97.6501" />
                                                            <Key frame="157" value="-97.6501" />
                                                            <Key frame="178" value="-97.6501" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="17" value="0.22" />
                                                            <Key frame="36" value="0.0376" />
                                                            <Key frame="47" value="0.0376" />
                                                            <Key frame="51" value="0.0376" />
                                                            <Key frame="127" value="0.2332" />
                                                            <Key frame="142" value="0.2332" />
                                                            <Key frame="148" value="0.2332" />
                                                            <Key frame="157" value="0.2332" />
                                                            <Key frame="178" value="0.2332" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="77.2544" />
                                                            <Key frame="36" value="115.224" />
                                                            <Key frame="47" value="115.224" />
                                                            <Key frame="51" value="115.224" />
                                                            <Key frame="127" value="114.345" />
                                                            <Key frame="142" value="114.345" />
                                                            <Key frame="148" value="113.026" />
                                                            <Key frame="157" value="105.028" />
                                                            <Key frame="178" value="74.354" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="2.28279" />
                                                            <Key frame="36" value="9.22623" />
                                                            <Key frame="47" value="11.863" />
                                                            <Key frame="51" value="11.863" />
                                                            <Key frame="127" value="6.76526" />
                                                            <Key frame="142" value="6.76526" />
                                                            <Key frame="148" value="7.46839" />
                                                            <Key frame="157" value="6.85315" />
                                                            <Key frame="178" value="1.57965" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-91.9372" />
                                                            <Key frame="36" value="-92.7282" />
                                                            <Key frame="47" value="-93.8708" />
                                                            <Key frame="51" value="-93.8708" />
                                                            <Key frame="127" value="-95.3649" />
                                                            <Key frame="142" value="-95.3649" />
                                                            <Key frame="148" value="-94.6618" />
                                                            <Key frame="157" value="-90.9703" />
                                                            <Key frame="178" value="-90.9703" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="71.81" />
                                                            <Key frame="36" value="76.7319" />
                                                            <Key frame="47" value="75.853" />
                                                            <Key frame="51" value="78.9292" />
                                                            <Key frame="127" value="83.2359" />
                                                            <Key frame="142" value="83.2359" />
                                                            <Key frame="148" value="79.6323" />
                                                            <Key frame="157" value="72.7768" />
                                                            <Key frame="178" value="72.7768" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="88.944" />
                                                            <Key frame="36" value="89.7351" />
                                                            <Key frame="47" value="89.7351" />
                                                            <Key frame="51" value="89.7351" />
                                                            <Key frame="127" value="89.5593" />
                                                            <Key frame="142" value="89.5593" />
                                                            <Key frame="148" value="89.5593" />
                                                            <Key frame="157" value="89.5593" />
                                                            <Key frame="178" value="89.5593" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="17" value="0.348" />
                                                            <Key frame="36" value="0.3316" />
                                                            <Key frame="47" value="0.3296" />
                                                            <Key frame="51" value="0.33" />
                                                            <Key frame="127" value="0.4184" />
                                                            <Key frame="142" value="0.4184" />
                                                            <Key frame="148" value="0.4184" />
                                                            <Key frame="157" value="0.4184" />
                                                            <Key frame="178" value="0.4184" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="77.435" />
                                                            <Key frame="36" value="75.5014" />
                                                            <Key frame="47" value="75.5014" />
                                                            <Key frame="51" value="75.5014" />
                                                            <Key frame="127" value="75.2377" />
                                                            <Key frame="142" value="76.4682" />
                                                            <Key frame="148" value="77.0834" />
                                                            <Key frame="157" value="77.0834" />
                                                            <Key frame="178" value="77.0834" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-3.78175" />
                                                            <Key frame="36" value="6.50159" />
                                                            <Key frame="47" value="8.08364" />
                                                            <Key frame="51" value="2.28279" />
                                                            <Key frame="127" value="-23.1179" />
                                                            <Key frame="142" value="-13.5377" />
                                                            <Key frame="148" value="-7.73688" />
                                                            <Key frame="157" value="-2.11181" />
                                                            <Key frame="178" value="-1.40867" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="100.634" />
                                                            <Key frame="36" value="80.4185" />
                                                            <Key frame="47" value="2.54646" />
                                                            <Key frame="51" value="1.40386" />
                                                            <Key frame="127" value="3.24959" />
                                                            <Key frame="142" value="60.2034" />
                                                            <Key frame="148" value="77.3423" />
                                                            <Key frame="157" value="96.0633" />
                                                            <Key frame="178" value="104.5" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="29.3534" />
                                                            <Key frame="36" value="29.3534" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-0.881327" />
                                                            <Key frame="36" value="-0.881327" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-15.2956" />
                                                            <Key frame="36" value="-15.3835" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.881327" />
                                                            <Key frame="36" value="0.881327" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-13.7087" />
                                                            <Key frame="36" value="-13.7087" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.705531" />
                                                            <Key frame="36" value="0.705531" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.353968" />
                                                            <Key frame="36" value="0.353968" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="26.7167" />
                                                            <Key frame="36" value="26.7167" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-14.5876" />
                                                            <Key frame="36" value="-15.115" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.529749" />
                                                            <Key frame="36" value="0.529749" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-12.0436" />
                                                            <Key frame="36" value="-12.0436" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="-0.524941" />
                                                            <Key frame="36" value="-0.524941" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="0.353968" />
                                                            <Key frame="36" value="0.353968" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="17" value="23.909" />
                                                            <Key frame="36" value="23.909" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Move To (2)" id="1" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="843" y="397">
                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,-0.532,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)
        self.motion.moveTo(0,0,-0.532,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,-0.532,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)
        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                            <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                            <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                            <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                            <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                            <Resource name="Legs" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Bumpers" id="2" localization="8" tooltip="Listen to bumpers sensors. Stimulate onLeft or onRight output depending on&#x0A;which bumper is stimulated." x="156" y="358">
                            <bitmap>media/images/box/movement/move_foot.png</bitmap>
                            <bitmap>media/images/box/movement/move_leftfoot.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="LeftBumperPressed" type="0" type_size="1" nature="4" stm_value_name="LeftBumperPressed" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Input name="RightBumperPressed" type="0" type_size="1" nature="4" stm_value_name="RightBumperPressed" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="6" />
                            <Output name="onLeft" type="1" type_size="1" nature="2" inner="0" tooltip="When left bumper is stimulated." id="7" />
                            <Output name="onRight" type="1" type_size="1" nature="2" inner="0" tooltip="When right bumper is stimulated." id="8" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="196" y="61">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="If &gt; 0" id="4" localization="8" tooltip="Transmit only if value is &gt; 0." x="197" y="165">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="7" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="8" outputowner="4" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Wait" id="5" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="1648" y="573">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                        </Box>
                        <Box name="lift (6)" id="10" localization="8" tooltip="" x="161" y="573">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="70">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="1.40386" />
                                        <Key frame="59" value="1.40386" />
                                        <Key frame="70" value="1.40386" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.0902951" />
                                        <Key frame="59" value="-0.0902951" />
                                        <Key frame="70" value="-0.0902951" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-20.1296" />
                                        <Key frame="59" value="-20.1296" />
                                        <Key frame="70" value="-19.5144" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.705531" />
                                        <Key frame="59" value="0.705531" />
                                        <Key frame="70" value="0.705531" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-56.4241" />
                                        <Key frame="59" value="-28.7382" />
                                        <Key frame="70" value="-64.8617" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-79.1928" />
                                        <Key frame="59" value="-91.4098" />
                                        <Key frame="70" value="-98.1775" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="44" value="0.0268" />
                                        <Key frame="59" value="0.0420001" />
                                        <Key frame="70" value="0.0268" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-25.9256" />
                                        <Key frame="59" value="-25.9256" />
                                        <Key frame="70" value="-25.9256" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.0854867" />
                                        <Key frame="59" value="-0.0854867" />
                                        <Key frame="70" value="-0.0854867" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.178186" />
                                        <Key frame="59" value="0.178186" />
                                        <Key frame="70" value="0.178186" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="40.3399" />
                                        <Key frame="59" value="40.3399" />
                                        <Key frame="70" value="40.3399" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="81.1217" />
                                        <Key frame="59" value="111.005" />
                                        <Key frame="70" value="116.015" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="13.445" />
                                        <Key frame="59" value="2.0191" />
                                        <Key frame="70" value="5.2711" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.61764" />
                                        <Key frame="59" value="-91.4098" />
                                        <Key frame="70" value="-91.7614" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-20.1248" />
                                        <Key frame="59" value="-20.1248" />
                                        <Key frame="70" value="-20.1248" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.0902951" />
                                        <Key frame="59" value="0.0902951" />
                                        <Key frame="70" value="0.0902951" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="78.0503" />
                                        <Key frame="59" value="76.4682" />
                                        <Key frame="70" value="77.435" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="90.5261" />
                                        <Key frame="59" value="90.2624" />
                                        <Key frame="70" value="83.6705" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="44" value="0.3468" />
                                        <Key frame="59" value="0.3396" />
                                        <Key frame="70" value="0.3084" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-26.4578" />
                                        <Key frame="59" value="-26.4578" />
                                        <Key frame="70" value="-25.8426" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.529749" />
                                        <Key frame="59" value="0.529749" />
                                        <Key frame="70" value="-0.0854867" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.178186" />
                                        <Key frame="59" value="0.178186" />
                                        <Key frame="70" value="0.178186" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="39.9931" />
                                        <Key frame="59" value="39.9931" />
                                        <Key frame="70" value="39.9931" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="70.0521" />
                                        <Key frame="59" value="70.7552" />
                                        <Key frame="70" value="118.92" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="4.2164" />
                                        <Key frame="59" value="2.107" />
                                        <Key frame="70" value="-9.40682" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="88.8561" />
                                        <Key frame="59" value="83.2311" />
                                        <Key frame="70" value="104.061" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="lift (5)" id="4" localization="8" tooltip="" x="145" y="147">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="70">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="1.40386" />
                                        <Key frame="59" value="1.40386" />
                                        <Key frame="70" value="1.40386" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.0902951" />
                                        <Key frame="59" value="-0.0902951" />
                                        <Key frame="70" value="-0.0902951" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-20.1296" />
                                        <Key frame="59" value="-20.1296" />
                                        <Key frame="70" value="-19.5144" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.705531" />
                                        <Key frame="59" value="0.705531" />
                                        <Key frame="70" value="0.705531" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-56.4241" />
                                        <Key frame="59" value="-28.7382" />
                                        <Key frame="70" value="-64.8617" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-79.1928" />
                                        <Key frame="59" value="-91.4098" />
                                        <Key frame="70" value="-98.1775" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="44" value="0.0268" />
                                        <Key frame="59" value="0.0420001" />
                                        <Key frame="70" value="0.0268" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-25.9256" />
                                        <Key frame="59" value="-25.9256" />
                                        <Key frame="70" value="-25.9256" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.0854867" />
                                        <Key frame="59" value="-0.0854867" />
                                        <Key frame="70" value="-0.0854867" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.178186" />
                                        <Key frame="59" value="0.178186" />
                                        <Key frame="70" value="0.178186" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="40.3399" />
                                        <Key frame="59" value="40.3399" />
                                        <Key frame="70" value="40.3399" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="81.1217" />
                                        <Key frame="59" value="111.005" />
                                        <Key frame="70" value="116.015" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="13.445" />
                                        <Key frame="59" value="2.0191" />
                                        <Key frame="70" value="5.2711" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.61764" />
                                        <Key frame="59" value="-91.4098" />
                                        <Key frame="70" value="-91.7614" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-20.1248" />
                                        <Key frame="59" value="-20.1248" />
                                        <Key frame="70" value="-20.1248" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.0902951" />
                                        <Key frame="59" value="0.0902951" />
                                        <Key frame="70" value="0.0902951" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="78.0503" />
                                        <Key frame="59" value="76.4682" />
                                        <Key frame="70" value="77.435" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="90.5261" />
                                        <Key frame="59" value="90.2624" />
                                        <Key frame="70" value="83.6705" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="44" value="0.3468" />
                                        <Key frame="59" value="0.3396" />
                                        <Key frame="70" value="0.3084" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-26.4578" />
                                        <Key frame="59" value="-26.4578" />
                                        <Key frame="70" value="-25.8426" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.529749" />
                                        <Key frame="59" value="0.529749" />
                                        <Key frame="70" value="-0.0854867" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.178186" />
                                        <Key frame="59" value="0.178186" />
                                        <Key frame="70" value="0.178186" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="39.9931" />
                                        <Key frame="59" value="39.9931" />
                                        <Key frame="70" value="39.9931" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="70.0521" />
                                        <Key frame="59" value="70.7552" />
                                        <Key frame="70" value="118.92" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="4.2164" />
                                        <Key frame="59" value="2.107" />
                                        <Key frame="70" value="-9.40682" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="88.8561" />
                                        <Key frame="59" value="83.2311" />
                                        <Key frame="70" value="104.061" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="lift" id="11" localization="8" tooltip="" x="422" y="37">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="70">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="1.40386" />
                                        <Key frame="59" value="1.40386" />
                                        <Key frame="70" value="1.40386" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.0902951" />
                                        <Key frame="59" value="-0.0902951" />
                                        <Key frame="70" value="-0.0902951" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-20.1296" />
                                        <Key frame="59" value="-20.1296" />
                                        <Key frame="70" value="-19.5144" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.705531" />
                                        <Key frame="59" value="0.705531" />
                                        <Key frame="70" value="0.705531" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-56.4241" />
                                        <Key frame="59" value="-28.7382" />
                                        <Key frame="70" value="-64.8617" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-79.1928" />
                                        <Key frame="59" value="-91.4098" />
                                        <Key frame="70" value="-98.1775" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="44" value="0.0268" />
                                        <Key frame="59" value="0.0420001" />
                                        <Key frame="70" value="0.0268" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-25.9256" />
                                        <Key frame="59" value="-25.9256" />
                                        <Key frame="70" value="-25.9256" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.0854867" />
                                        <Key frame="59" value="-0.0854867" />
                                        <Key frame="70" value="-0.0854867" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.178186" />
                                        <Key frame="59" value="0.178186" />
                                        <Key frame="70" value="0.178186" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="40.3399" />
                                        <Key frame="59" value="40.3399" />
                                        <Key frame="70" value="40.3399" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="81.1217" />
                                        <Key frame="59" value="111.005" />
                                        <Key frame="70" value="116.015" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="13.445" />
                                        <Key frame="59" value="2.0191" />
                                        <Key frame="70" value="5.2711" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.61764" />
                                        <Key frame="59" value="-91.4098" />
                                        <Key frame="70" value="-91.7614" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-20.1248" />
                                        <Key frame="59" value="-20.1248" />
                                        <Key frame="70" value="-20.1248" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.0902951" />
                                        <Key frame="59" value="0.0902951" />
                                        <Key frame="70" value="0.0902951" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="78.0503" />
                                        <Key frame="59" value="76.4682" />
                                        <Key frame="70" value="77.435" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="90.5261" />
                                        <Key frame="59" value="90.2624" />
                                        <Key frame="70" value="83.6705" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="44" value="0.3468" />
                                        <Key frame="59" value="0.3396" />
                                        <Key frame="70" value="0.3084" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-26.4578" />
                                        <Key frame="59" value="-26.4578" />
                                        <Key frame="70" value="-25.8426" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.529749" />
                                        <Key frame="59" value="0.529749" />
                                        <Key frame="70" value="-0.0854867" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.178186" />
                                        <Key frame="59" value="0.178186" />
                                        <Key frame="70" value="0.178186" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="39.9931" />
                                        <Key frame="59" value="39.9931" />
                                        <Key frame="70" value="39.9931" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="70.0521" />
                                        <Key frame="59" value="70.7552" />
                                        <Key frame="70" value="118.92" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="4.2164" />
                                        <Key frame="59" value="2.107" />
                                        <Key frame="70" value="-9.40682" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="88.8561" />
                                        <Key frame="59" value="83.2311" />
                                        <Key frame="70" value="104.061" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="lift (1)" id="13" localization="8" tooltip="" x="697" y="392">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="70">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="1.40386" />
                                        <Key frame="59" value="1.40386" />
                                        <Key frame="70" value="1.40386" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.0902951" />
                                        <Key frame="59" value="-0.0902951" />
                                        <Key frame="70" value="-0.0902951" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-20.1296" />
                                        <Key frame="59" value="-20.1296" />
                                        <Key frame="70" value="-19.5144" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.705531" />
                                        <Key frame="59" value="0.705531" />
                                        <Key frame="70" value="0.705531" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-56.4241" />
                                        <Key frame="59" value="-28.7382" />
                                        <Key frame="70" value="-64.8617" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-79.1928" />
                                        <Key frame="59" value="-91.4098" />
                                        <Key frame="70" value="-98.1775" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="44" value="0.0268" />
                                        <Key frame="59" value="0.0420001" />
                                        <Key frame="70" value="0.0268" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-25.9256" />
                                        <Key frame="59" value="-25.9256" />
                                        <Key frame="70" value="-25.9256" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.0854867" />
                                        <Key frame="59" value="-0.0854867" />
                                        <Key frame="70" value="-0.0854867" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.178186" />
                                        <Key frame="59" value="0.178186" />
                                        <Key frame="70" value="0.178186" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="40.3399" />
                                        <Key frame="59" value="40.3399" />
                                        <Key frame="70" value="40.3399" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="81.1217" />
                                        <Key frame="59" value="111.005" />
                                        <Key frame="70" value="116.015" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="13.445" />
                                        <Key frame="59" value="2.0191" />
                                        <Key frame="70" value="5.2711" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.61764" />
                                        <Key frame="59" value="-91.4098" />
                                        <Key frame="70" value="-91.7614" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-20.1248" />
                                        <Key frame="59" value="-20.1248" />
                                        <Key frame="70" value="-20.1248" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.0902951" />
                                        <Key frame="59" value="0.0902951" />
                                        <Key frame="70" value="0.0902951" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="78.0503" />
                                        <Key frame="59" value="76.4682" />
                                        <Key frame="70" value="77.435" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="90.5261" />
                                        <Key frame="59" value="90.2624" />
                                        <Key frame="70" value="83.6705" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="44" value="0.3468" />
                                        <Key frame="59" value="0.3396" />
                                        <Key frame="70" value="0.3084" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-26.4578" />
                                        <Key frame="59" value="-26.4578" />
                                        <Key frame="70" value="-25.8426" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.529749" />
                                        <Key frame="59" value="0.529749" />
                                        <Key frame="70" value="-0.0854867" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.178186" />
                                        <Key frame="59" value="0.178186" />
                                        <Key frame="70" value="0.178186" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="39.9931" />
                                        <Key frame="59" value="39.9931" />
                                        <Key frame="70" value="39.9931" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="70.0521" />
                                        <Key frame="59" value="70.7552" />
                                        <Key frame="70" value="118.92" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="4.2164" />
                                        <Key frame="59" value="2.107" />
                                        <Key frame="70" value="-9.40682" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="88.8561" />
                                        <Key frame="59" value="83.2311" />
                                        <Key frame="70" value="104.061" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="lift (2)" id="14" localization="8" tooltip="" x="1561" y="331">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="70">
                                <ActuatorList model="nao">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="1.40386" />
                                        <Key frame="59" value="1.40386" />
                                        <Key frame="70" value="1.40386" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.0902951" />
                                        <Key frame="59" value="-0.0902951" />
                                        <Key frame="70" value="-0.0902951" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-20.1296" />
                                        <Key frame="59" value="-20.1296" />
                                        <Key frame="70" value="-19.5144" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.705531" />
                                        <Key frame="59" value="0.705531" />
                                        <Key frame="70" value="0.705531" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-56.4241" />
                                        <Key frame="59" value="-28.7382" />
                                        <Key frame="70" value="-64.8617" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-79.1928" />
                                        <Key frame="59" value="-91.4098" />
                                        <Key frame="70" value="-98.1775" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="44" value="0.0268" />
                                        <Key frame="59" value="0.0420001" />
                                        <Key frame="70" value="0.0268" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-25.9256" />
                                        <Key frame="59" value="-25.9256" />
                                        <Key frame="70" value="-25.9256" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.0854867" />
                                        <Key frame="59" value="-0.0854867" />
                                        <Key frame="70" value="-0.0854867" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.178186" />
                                        <Key frame="59" value="0.178186" />
                                        <Key frame="70" value="0.178186" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="40.3399" />
                                        <Key frame="59" value="40.3399" />
                                        <Key frame="70" value="40.3399" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="81.1217" />
                                        <Key frame="59" value="111.005" />
                                        <Key frame="70" value="116.015" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="13.445" />
                                        <Key frame="59" value="2.0191" />
                                        <Key frame="70" value="5.2711" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-0.61764" />
                                        <Key frame="59" value="-91.4098" />
                                        <Key frame="70" value="-91.7614" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-20.1248" />
                                        <Key frame="59" value="-20.1248" />
                                        <Key frame="70" value="-20.1248" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.0902951" />
                                        <Key frame="59" value="0.0902951" />
                                        <Key frame="70" value="0.0902951" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="78.0503" />
                                        <Key frame="59" value="76.4682" />
                                        <Key frame="70" value="77.435" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="90.5261" />
                                        <Key frame="59" value="90.2624" />
                                        <Key frame="70" value="83.6705" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="44" value="0.3468" />
                                        <Key frame="59" value="0.3396" />
                                        <Key frame="70" value="0.3084" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="-26.4578" />
                                        <Key frame="59" value="-26.4578" />
                                        <Key frame="70" value="-25.8426" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.529749" />
                                        <Key frame="59" value="0.529749" />
                                        <Key frame="70" value="-0.0854867" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="0.178186" />
                                        <Key frame="59" value="0.178186" />
                                        <Key frame="70" value="0.178186" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="39.9931" />
                                        <Key frame="59" value="39.9931" />
                                        <Key frame="70" value="39.9931" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="70.0521" />
                                        <Key frame="59" value="70.7552" />
                                        <Key frame="70" value="118.92" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="4.2164" />
                                        <Key frame="59" value="2.107" />
                                        <Key frame="70" value="-9.40682" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="44" value="88.8561" />
                                        <Key frame="59" value="83.2311" />
                                        <Key frame="70" value="104.061" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="find_ball_long (2)" id="16" localization="8" tooltip="" x="801" y="67">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="adjust" id="1" localization="8" tooltip="" x="393" y="603">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.motion = ALProxy("ALMotion")
        self.motionProxy=ALProxy("ALMotion")
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        self.motion.setMoveArmsEnabled(False,False)
#self.onStopped() #activate the output of the box
        angleHead = self.motionProxy.getAngles("Head",True)
        yaw=angleHead[0]
        if (yaw>0.2 or yaw<-0.2 ):
            self.motionProxy.moveTo(0,0,yaw)
            #self.motionProxy.setStiffnesses("Head", 1.0)
            self.names  = "HeadYaw"
            self.angles  = 0.0
            self.fractionMaxSpeed  = 0.1
            self.motionProxy.setAngles(self.names, self.angles,self.fractionMaxSpeed)
            self.onStopped()
        else:
            yaw=p[0]
            if (yaw<0.04 and yaw>-0.04):
                self.log("changing yaw:"+str(yaw))
                self.shoot(p)
            else:
                self.log("now yaw:"+str(yaw))
                self.motionProxy.moveTo(0,0,yaw)
                self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Output name="shoot" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="ball" id="4" localization="8" tooltip="" x="599" y="278">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="y_ax" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram scale="84.0896">
                                                                <Box name="ball" id="2" localization="8" tooltip="" x="704" y="648">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import time
        import vision_definitions
        self.mem=ALProxy("ALMemory")
        self.sam=ALProxy("GenericVideoModule")
        self.vid=ALProxy("ALVideoDevice")
        self.y=[0,0]
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.vid.setParameter(0,2,255)
        self.vid.setParameter(1,2,255)
        self.sam.registerToVideoDevice(vision_definitions.k960p, vision_definitions.kBGRColorSpace)
        ans=self.sam.redBall(156,200,150,180,255,230)
        self.sam.unRegisterFromVideoDevice()
        if (ans==-1):
            self.log("find no ball")
            self.noball()
        else:
            self.y=self.mem.getData("njuredBall")
            self.y_ax(self.y)
            #self.log(self.y)
            #self.onStopped(ans)
    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Output name="noball" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="y_ax" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="714" y="373">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="HeadMove (1)" id="17" localization="8" tooltip="Enter tooltip here" x="983" y="275">
                                                                    <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="74.9154">
                                                                                    <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="13">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="-0.0902951" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="20.9158" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="13">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="0.788627" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="-11.5162" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.lock = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):
        if self.lock == False:
            self.lock = True
            self.bMustStop = False
            while not self.bMustStop:
                self.counter += 1

                if self.counter == 1:
                    self.output1()
                if self.counter == 2:
                    self.output2()
                if self.counter == 3:
                    self.output3()
                if self.counter == 4:
                    self.output4()
                    self.counter = 0
                time.sleep(5)
        pass

    def onInput_onStop(self):
        self.lock = False
        self.onUnload()

        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                    </Box>
                                                                                    <Box name="Animation (1)" id="7" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="638" y="812">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-0.0902951" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="20.9158" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation (2)" id="8" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="774" y="821">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="13">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="0.788627" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="-11.5162" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Comment" id="3" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1105" y="592">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("left right")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>
                                                                                                <![CDATA[left right]]>
</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                    </Box>
                                                                                    <Box name="Animation (3)" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="793" y="568">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="39.9004" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="2.54646" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation (4)" id="6" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="803" y="683">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="-36.5654" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="2.54646" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="17" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="2" indexofoutput="6" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="headPitch" id="9" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="562" y="763">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motionProxy = ALProxy("ALMotion")
        import time
        import math
    def onLoad(self):

        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.1
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(3.0)
        CamPos = self.motionProxy.getPosition("CameraBottom",2,True)
        dx = CamPos[2]/math.tan(CamPos[4])
        self.log("z:"+str(CamPos[2])+" pitch:"+str(CamPos[4])+" yaw:"+str(CamPos[5]))
        self.log("dx:"+str(dx))
        self.onStopped() #activate the output of the box
        pass

    def onInput_adjust(self,p):
        pitch_s=p[1]
        angleHead = self.motionProxy.getAngles("Head",True)
        #self.log("pitch: "+str(pitch_s))
        if abs(pitch_s)>0.07:
            if abs(angleHead[1]-pitch_s)<0.5:

                self.log("Pitch_now:"+str(angleHead[1]))
                self.names  = ["HeadYaw","HeadPitch"]
                self.angles  = [0,-pitch_s]
                self.log("changing pitch"+str(pitch_s))
                self.fractionMaxSpeed  = 0.1
                self.motionProxy.changeAngles(self.names, self.angles, self.fractionMaxSpeed)
                self.onStopped()
            else:
                self.switch()
        else:
            angleHead = self.motionProxy.getAngles("Head",True)
            self.log("Pitch_now:"+str(angleHead[1])+"don't need move")
            self.pitch(angleHead[1])
        self.yaw(p[0])

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="adjust" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Output name="pitch" type="0" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Output name="yaw" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="switch" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" />
                                            </Box>
                                            <Box name="head" id="13" localization="8" tooltip="" x="384" y="208">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.motionProxy = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.names  = ["HeadYaw","HeadPitch"]
        self.angles  = [0.0,0.0]
        self.fractionMaxSpeed  = 0.1
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(0.5)
        self.onStopped()
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                            </Box>
                                            <Box name="distanc" id="3" localization="8" tooltip="" x="967" y="448">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motionProxy = ALProxy("ALMotion")
        self.vid=ALProxy("ALVideoDevice")
        import time
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.motionProxy.setMoveArmsEnabled(False,False)
        CAM=self.vid.getCameraName(self.vid.getActiveCamera())
        CamPos = self.motionProxy.getPosition(CAM,2,True)
        dx = CamPos[2]/math.tan(CamPos[4])
        if dx>0:
            if dx>5:
                dx=5
            self.log("dx="+str(dx))
            if dx>0.3:
                self.motionProxy.moveTo(dx/5.0, 0, 0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
                self.onStopped()
            else:
                self.change()
        else:
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Output name="change" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Select Camera" id="15" localization="8" tooltip="Change the currently used camera." x="142" y="121">
                                                <bitmap>media/images/box/interaction/look.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.kCameraSelectID = 18
        self.cameraModule = ALProxy( "ALVideoDevice" )

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 1 )
        self.onReady()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                <Resource name="Camera setting" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="findball" id="16" localization="8" tooltip="Enter description here" x="1170" y="600">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="search" id="15" localization="8" tooltip="" x="246" y="88">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="84.0896">
                                                                                    <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="1196" y="324">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):
        self.motion.setMoveArmsEnabled(False, False)
        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.1, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                        <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                        <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                        <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                        <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.075" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                        <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                        <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                    </Box>
                                                                                    <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="419" y="252">
                                                                                        <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                        <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                        <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="94.3874">
                                                                                                        <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="597" y="364">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="272" y="168">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                            <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                            <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="620" y="134">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="822" y="156">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-0.0902951" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="20.9158" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="13">
                                                                                                                <ActuatorList model="nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                                        <Key frame="13" value="0.788627" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                                        <Key frame="13" value="-11.5162" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 6:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Animation (1)" id="7" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="778" y="565">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-0.0902951" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="20.9158" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation (2)" id="8" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="780" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="13">
                                                                                                                <ActuatorList model="nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                                        <Key frame="13" value="0.788627" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                                        <Key frame="13" value="-11.5162" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="7" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="8" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="666" y="21">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                        <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                        <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="408" y="417">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="switch camera" id="8" localization="8" tooltip="" x="203" y="63">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParameter(0,2,255)
        self.cameraModule.setParameter(1,2,255)
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                    </Box>
                                                                                    <Box name="Insert Data (1)" id="4" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="62" y="268">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.3012)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Move To" id="2" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="752" y="697">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="636" y="138">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="3" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="15" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="Select Camera (1)" id="2" localization="8" tooltip="Change the currently used camera." x="866" y="779">
                                                <bitmap>media/images/box/interaction/look.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.kCameraSelectID = 18
        self.cameraModule = ALProxy( "ALVideoDevice" )

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 1 )
        self.onReady()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                <Resource name="Camera setting" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Single Eye LED" id="6" localization="8" tooltip="Set the color of one eye LED. Note that you must open the box to enter the color." x="215" y="389">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        #~ self.onStopped() #~ activate output of the box
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="45" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s eye. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Eye   -&gt; (Front) &lt;-    Left Eye&#x0A;                     &#x0A;       90° .   . 45°                     45° .   . 90°&#x0A;  135° .         . 0°                   0° .         . 135°&#x0A;  180° .         . 315°            315° .         . 180°&#x0A;     225° .   . 270°                  270° .   . 225°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="45" />
                                                    <Choice value="90" />
                                                    <Choice value="135" />
                                                    <Choice value="180" />
                                                    <Choice value="225" />
                                                    <Choice value="270" />
                                                    <Choice value="315" />
                                                </Parameter>
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="5" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="154" y="48">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 0, 0])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <color>#ff0000</color>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                                                    <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                                                </Box>
                                                                <Box name="Eye LED" id="2" localization="8" tooltip="Set the intensity of one LED of robot&apos;s eyes." x="329" y="39">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_color(self, p):
        """Fade the eye Led you have chosen to the color you have chosen with the duration you have chosen!"""
        aEyeNums = self.processAngle()
        if self.getParameter("Side") == "Left":
            nEyeNum = aEyeNums[0]
        else:
            nEyeNum = aEyeNums[1]
        sName = "FaceLed"+self.getParameter("Side")+str(nEyeNum)
        id = self.leds.post.fadeRGB(sName, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box

    def processAngle(self):
        n = int( self.getParameter("Angle (degrees)") )
        return [(45 - n) % 360 / 45] * 2]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="LED color." id="2" />
                                                                    <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                                        <Choice value="Left" />
                                                                        <Choice value="Right" />
                                                                    </Parameter>
                                                                    <Parameter name="Angle (degrees)" inherits_from_parent="1" content_type="3" value="0" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s eye. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Eye   -&gt; (Front) &lt;-    Left Eye&#x0A;                     &#x0A;       90° .   . 45°                     45° .   . 90°&#x0A;  135° .         . 0°                   0° .         . 135°&#x0A;  180° .         . 315°            315° .         . 180°&#x0A;     225° .   . 270°                  270° .   . 225°" id="5">
                                                                        <Choice value="0" />
                                                                        <Choice value="45" />
                                                                        <Choice value="90" />
                                                                        <Choice value="135" />
                                                                        <Choice value="180" />
                                                                        <Choice value="225" />
                                                                        <Choice value="270" />
                                                                        <Choice value="315" />
                                                                    </Parameter>
                                                                    <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="6" />
                                                                </Box>
                                                                <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="16" indexofoutput="3" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="2" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="ball (1)" id="7" localization="8" tooltip="" x="613" y="581">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="y_ax" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram scale="84.0896">
                                                                <Box name="ball" id="2" localization="8" tooltip="" x="708" y="650">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import time
        import vision_definitions
        self.mem=ALProxy("ALMemory")
        self.sam=ALProxy("GenericVideoModule")
        self.vid=ALProxy("ALVideoDevice")
        self.y=[0,0]
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.vid.setParameter(0,2,255)
        self.vid.setParameter(1,2,255)
        self.sam.registerToVideoDevice(vision_definitions.k960p, vision_definitions.kBGRColorSpace)
        ans=self.sam.redBall(156,200,150,180,255,230)
        self.sam.unRegisterFromVideoDevice()
        if (ans==-1):
            self.log("find no ball")
            self.noball()
        else:
            self.y=self.mem.getData("njuredBall")
            self.y_ax(self.y)
            #self.log(self.y)
            #self.onStopped(ans)
    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Output name="noball" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="y_ax" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="714" y="373">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="HeadMove (1)" id="17" localization="8" tooltip="Enter tooltip here" x="983" y="275">
                                                                    <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="74.9154">
                                                                                    <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="13">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="-0.0902951" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="20.9158" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="13">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="0.788627" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="-11.5162" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.lock = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):
        if self.lock == False:
            self.lock = True
            self.bMustStop = False
            while not self.bMustStop:
                self.counter += 1

                if self.counter == 1:
                    self.output1()
                if self.counter == 2:
                    self.output2()
                if self.counter == 3:
                    self.output3()
                if self.counter == 4:
                    self.output4()
                    self.counter = 0
                time.sleep(5)
        pass

    def onInput_onStop(self):
        self.lock = False
        self.onUnload()

        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                    </Box>
                                                                                    <Box name="Animation (1)" id="7" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="638" y="812">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-0.0902951" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="20.9158" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation (2)" id="8" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="774" y="821">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="13">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="0.788627" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="-11.5162" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Comment" id="3" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1105" y="592">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("left right")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>
                                                                                                <![CDATA[left right]]>
</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                    </Box>
                                                                                    <Box name="Animation (3)" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="793" y="568">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="39.9004" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="2.54646" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation (4)" id="6" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="803" y="683">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="-36.5654" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="2.54646" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="17" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="2" indexofoutput="6" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="13" indexofoutput="4" />
                                            <Link inputowner="16" indexofinput="2" outputowner="3" indexofoutput="5" />
                                            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="16" indexofoutput="3" />
                                            <Link inputowner="13" indexofinput="2" outputowner="15" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="6" />
                                            <Link inputowner="2" indexofinput="3" outputowner="9" indexofoutput="8" />
                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="7" indexofinput="2" outputowner="9" indexofoutput="5" />
                                            <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="9" indexofinput="4" outputowner="7" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="find_ball_long" id="12" localization="8" tooltip="" x="1061" y="276">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="adjust" id="1" localization="8" tooltip="" x="393" y="603">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.motion = ALProxy("ALMotion")
        self.motionProxy=ALProxy("ALMotion")
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        self.motion.setMoveArmsEnabled(False,False)
#self.onStopped() #activate the output of the box
        angleHead = self.motionProxy.getAngles("Head",True)
        yaw=angleHead[0]
        if (yaw>0.2 or yaw<-0.2 ):
            self.motionProxy.moveTo(0,0,yaw)
            #self.motionProxy.setStiffnesses("Head", 1.0)
            self.names  = "HeadYaw"
            self.angles  = 0.0
            self.fractionMaxSpeed  = 0.1
            self.motionProxy.setAngles(self.names, self.angles,self.fractionMaxSpeed)
            self.onStopped()
        else:
            yaw=p[0]
            if (yaw<0.04 and yaw>-0.04):
                self.log("changing yaw:"+str(yaw))
                self.shoot(p)
            else:
                self.log("now yaw:"+str(yaw))
                self.motionProxy.moveTo(0,0,yaw)
                self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Output name="shoot" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="ball" id="4" localization="8" tooltip="" x="599" y="278">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="y_ax" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram scale="84.0896">
                                                                <Box name="ball" id="2" localization="8" tooltip="" x="704" y="648">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import time
        import vision_definitions
        self.mem=ALProxy("ALMemory")
        self.sam=ALProxy("GenericVideoModule")
        self.vid=ALProxy("ALVideoDevice")
        self.y=[0,0]
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.vid.setParameter(0,2,255)
        self.vid.setParameter(1,2,255)
        self.sam.registerToVideoDevice(vision_definitions.k960p, vision_definitions.kBGRColorSpace)
        ans=self.sam.redBall(156,200,150,180,255,230)
        self.sam.unRegisterFromVideoDevice()
        if (ans==-1):
            self.log("find no ball")
            self.noball()
        else:
            self.y=self.mem.getData("njuredBall")
            self.y_ax(self.y)
            #self.log(self.y)
            #self.onStopped(ans)
    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Output name="noball" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="y_ax" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="714" y="373">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="HeadMove (1)" id="17" localization="8" tooltip="Enter tooltip here" x="983" y="275">
                                                                    <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="74.9154">
                                                                                    <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="13">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="-0.0902951" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="20.9158" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="13">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="0.788627" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="-11.5162" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.lock = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):
        if self.lock == False:
            self.lock = True
            self.bMustStop = False
            while not self.bMustStop:
                self.counter += 1

                if self.counter == 1:
                    self.output1()
                if self.counter == 2:
                    self.output2()
                if self.counter == 3:
                    self.output3()
                if self.counter == 4:
                    self.output4()
                    self.counter = 0
                time.sleep(5)
        pass

    def onInput_onStop(self):
        self.lock = False
        self.onUnload()

        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                    </Box>
                                                                                    <Box name="Animation (1)" id="7" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="638" y="812">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-0.0902951" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="20.9158" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation (2)" id="8" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="774" y="821">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="13">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="0.788627" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="-11.5162" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Comment" id="3" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1105" y="592">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("left right")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>
                                                                                                <![CDATA[left right]]>
</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                    </Box>
                                                                                    <Box name="Animation (3)" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="793" y="568">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="39.9004" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="2.54646" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation (4)" id="6" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="803" y="683">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="-36.5654" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="2.54646" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="17" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="2" indexofoutput="6" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="headPitch" id="9" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="562" y="763">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motionProxy = ALProxy("ALMotion")
        import time
        import math
    def onLoad(self):

        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.1
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(3.0)
        CamPos = self.motionProxy.getPosition("CameraBottom",2,True)
        dx = CamPos[2]/math.tan(CamPos[4])
        self.log("z:"+str(CamPos[2])+" pitch:"+str(CamPos[4])+" yaw:"+str(CamPos[5]))
        self.log("dx:"+str(dx))
        self.onStopped() #activate the output of the box
        pass

    def onInput_adjust(self,p):
        pitch_s=p[1]
        angleHead = self.motionProxy.getAngles("Head",True)
        #self.log("pitch: "+str(pitch_s))
        if abs(pitch_s)>0.07:
            if abs(angleHead[1]-pitch_s)<0.5:

                self.log("Pitch_now:"+str(angleHead[1]))
                self.names  = ["HeadYaw","HeadPitch"]
                self.angles  = [0,-pitch_s]
                self.log("changing pitch"+str(pitch_s))
                self.fractionMaxSpeed  = 0.1
                self.motionProxy.changeAngles(self.names, self.angles, self.fractionMaxSpeed)
                self.onStopped()
            else:
                self.switch()
        else:
            angleHead = self.motionProxy.getAngles("Head",True)
            self.log("Pitch_now:"+str(angleHead[1])+"don't need move")
            self.pitch(angleHead[1])
        self.yaw(p[0])

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="adjust" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Output name="pitch" type="0" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Output name="yaw" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="switch" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" />
                                            </Box>
                                            <Box name="head" id="13" localization="8" tooltip="" x="384" y="208">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.motionProxy = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.names  = ["HeadYaw","HeadPitch"]
        self.angles  = [0.0,0.0]
        self.fractionMaxSpeed  = 0.1
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(0.5)
        self.onStopped()
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                            </Box>
                                            <Box name="distanc" id="3" localization="8" tooltip="" x="967" y="448">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motionProxy = ALProxy("ALMotion")
        self.vid=ALProxy("ALVideoDevice")
        import time
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.motionProxy.setMoveArmsEnabled(False,False)
        CAM=self.vid.getCameraName(self.vid.getActiveCamera())
        CamPos = self.motionProxy.getPosition(CAM,2,True)
        dx = CamPos[2]/math.tan(CamPos[4])
        if dx>0:
            if dx>5:
                dx=5
            self.log("dx="+str(dx))
            if dx>0.3:
                self.motionProxy.moveTo(dx/5.0, 0, 0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
                self.onStopped()
            else:
                self.change()
        else:
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Output name="change" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Select Camera" id="15" localization="8" tooltip="Change the currently used camera." x="142" y="121">
                                                <bitmap>media/images/box/interaction/look.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.kCameraSelectID = 18
        self.cameraModule = ALProxy( "ALVideoDevice" )

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 1 )
        self.onReady()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                <Resource name="Camera setting" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="findball" id="16" localization="8" tooltip="Enter description here" x="1170" y="600">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="search" id="15" localization="8" tooltip="" x="246" y="88">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="84.0896">
                                                                                    <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="1196" y="324">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):
        self.motion.setMoveArmsEnabled(False, False)
        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.1, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                        <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                        <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                        <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                        <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.075" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                        <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                        <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                    </Box>
                                                                                    <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="419" y="252">
                                                                                        <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                        <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                        <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="94.3874">
                                                                                                        <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="597" y="364">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="272" y="168">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                            <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                            <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="620" y="134">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="822" y="156">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-0.0902951" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="20.9158" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="13">
                                                                                                                <ActuatorList model="nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                                        <Key frame="13" value="0.788627" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                                        <Key frame="13" value="-11.5162" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 6:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Animation (1)" id="7" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="778" y="565">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="-0.0902951" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                                        <Key frame="14" value="20.9158" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Animation (2)" id="8" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="780" y="660">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="13">
                                                                                                                <ActuatorList model="nao">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                                        <Key frame="13" value="0.788627" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                                        <Key frame="13" value="-11.5162" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="7" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="8" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="666" y="21">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                        <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                        <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="408" y="417">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="switch camera" id="8" localization="8" tooltip="" x="203" y="63">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParameter(0,2,255)
        self.cameraModule.setParameter(1,2,255)
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                    </Box>
                                                                                    <Box name="Insert Data (1)" id="4" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="62" y="268">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.3012)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Move To" id="2" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="752" y="697">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="636" y="138">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="3" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="15" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="Select Camera (1)" id="2" localization="8" tooltip="Change the currently used camera." x="866" y="779">
                                                <bitmap>media/images/box/interaction/look.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.kCameraSelectID = 18
        self.cameraModule = ALProxy( "ALVideoDevice" )

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 1 )
        self.onReady()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                <Resource name="Camera setting" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Single Eye LED" id="6" localization="8" tooltip="Set the color of one eye LED. Note that you must open the box to enter the color." x="215" y="389">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        #~ self.onStopped() #~ activate output of the box
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="45" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s eye. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Eye   -&gt; (Front) &lt;-    Left Eye&#x0A;                     &#x0A;       90° .   . 45°                     45° .   . 90°&#x0A;  135° .         . 0°                   0° .         . 135°&#x0A;  180° .         . 315°            315° .         . 180°&#x0A;     225° .   . 270°                  270° .   . 225°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="45" />
                                                    <Choice value="90" />
                                                    <Choice value="135" />
                                                    <Choice value="180" />
                                                    <Choice value="225" />
                                                    <Choice value="270" />
                                                    <Choice value="315" />
                                                </Parameter>
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="5" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="154" y="48">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 0, 0])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <color>#ff0000</color>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                                                    <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                                                </Box>
                                                                <Box name="Eye LED" id="2" localization="8" tooltip="Set the intensity of one LED of robot&apos;s eyes." x="329" y="39">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_color(self, p):
        """Fade the eye Led you have chosen to the color you have chosen with the duration you have chosen!"""
        aEyeNums = self.processAngle()
        if self.getParameter("Side") == "Left":
            nEyeNum = aEyeNums[0]
        else:
            nEyeNum = aEyeNums[1]
        sName = "FaceLed"+self.getParameter("Side")+str(nEyeNum)
        id = self.leds.post.fadeRGB(sName, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box

    def processAngle(self):
        n = int( self.getParameter("Angle (degrees)") )
        return [(45 - n) % 360 / 45] * 2]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="LED color." id="2" />
                                                                    <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                                        <Choice value="Left" />
                                                                        <Choice value="Right" />
                                                                    </Parameter>
                                                                    <Parameter name="Angle (degrees)" inherits_from_parent="1" content_type="3" value="0" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s eye. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Eye   -&gt; (Front) &lt;-    Left Eye&#x0A;                     &#x0A;       90° .   . 45°                     45° .   . 90°&#x0A;  135° .         . 0°                   0° .         . 135°&#x0A;  180° .         . 315°            315° .         . 180°&#x0A;     225° .   . 270°                  270° .   . 225°" id="5">
                                                                        <Choice value="0" />
                                                                        <Choice value="45" />
                                                                        <Choice value="90" />
                                                                        <Choice value="135" />
                                                                        <Choice value="180" />
                                                                        <Choice value="225" />
                                                                        <Choice value="270" />
                                                                        <Choice value="315" />
                                                                    </Parameter>
                                                                    <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="6" />
                                                                </Box>
                                                                <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="16" indexofoutput="3" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="2" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="ball (1)" id="7" localization="8" tooltip="" x="613" y="581">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="y_ax" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram scale="84.0896">
                                                                <Box name="ball" id="2" localization="8" tooltip="" x="708" y="650">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import time
        import vision_definitions
        self.mem=ALProxy("ALMemory")
        self.sam=ALProxy("GenericVideoModule")
        self.vid=ALProxy("ALVideoDevice")
        self.y=[0,0]
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.vid.setParameter(0,2,255)
        self.vid.setParameter(1,2,255)
        self.sam.registerToVideoDevice(vision_definitions.k960p, vision_definitions.kBGRColorSpace)
        ans=self.sam.redBall(156,200,150,180,255,230)
        self.sam.unRegisterFromVideoDevice()
        if (ans==-1):
            self.log("find no ball")
            self.noball()
        else:
            self.y=self.mem.getData("njuredBall")
            self.y_ax(self.y)
            #self.log(self.y)
            #self.onStopped(ans)
    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Output name="noball" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="y_ax" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="714" y="373">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="HeadMove (1)" id="17" localization="8" tooltip="Enter tooltip here" x="983" y="275">
                                                                    <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="Problem" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="74.9154">
                                                                                    <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="13">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="-0.0902951" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="20.9158" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="13">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="0.788627" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="-11.5162" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.lock = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):
        if self.lock == False:
            self.lock = True
            self.bMustStop = False
            while not self.bMustStop:
                self.counter += 1

                if self.counter == 1:
                    self.output1()
                if self.counter == 2:
                    self.output2()
                if self.counter == 3:
                    self.output3()
                if self.counter == 4:
                    self.output4()
                    self.counter = 0
                time.sleep(5)
        pass

    def onInput_onStop(self):
        self.lock = False
        self.onUnload()

        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                    </Box>
                                                                                    <Box name="Animation (1)" id="7" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="638" y="812">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-0.0902951" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="20.9158" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation (2)" id="8" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="774" y="821">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="13">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="0.788627" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="-11.5162" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Comment" id="3" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1105" y="592">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("left right")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>
                                                                                                <![CDATA[left right]]>
</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                    </Box>
                                                                                    <Box name="Animation (3)" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="793" y="568">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="39.9004" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="2.54646" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Animation (4)" id="6" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="803" y="683">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                            <ActuatorList model="Nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="-36.5654" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="2.54646" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="17" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="17" indexofinput="3" outputowner="2" indexofoutput="6" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="13" indexofoutput="4" />
                                            <Link inputowner="16" indexofinput="2" outputowner="3" indexofoutput="5" />
                                            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="16" indexofoutput="3" />
                                            <Link inputowner="13" indexofinput="2" outputowner="15" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="6" />
                                            <Link inputowner="2" indexofinput="3" outputowner="9" indexofoutput="8" />
                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="7" indexofinput="2" outputowner="9" indexofoutput="5" />
                                            <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="9" indexofinput="4" outputowner="7" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Move To (3)" id="19" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="594" y="61">
                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,-0.4,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)
        self.motion.moveTo(0,0,-0.4,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,-0.4,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)
        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                            <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                            <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                            <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                            <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                            <Resource name="Legs" type="Lock" timeout="0" />
                        </Box>
                        <Box name="FindAndAdjust (1)" id="15" localization="8" tooltip="Enter description here" x="977" y="86">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="findmarker_Select Camera_onUseTopCamera" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                            <Input name="LandmarkDetected" type="0" type_size="1" nature="4" stm_value_name="LandmarkDetected" inner="1" tooltip="LandmarkDetected desc" id="3" />
                            <Output name="beat" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="position adj" id="9" localization="8" tooltip="" x="545" y="336">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        import almath
        import time
        #self.onStopped() #activate the output of the box

        #while(True):
#        self.angleToFlag = self.memory.getData("Device/SubDeviceList/HeadYaw/Position/Sensor/Value")
        self.angleToFlag = p / almath.PI * 180
        self.logger.info(self.angleToFlag)
        p = p+1.485
        if(self.angleToFlag>-135 and self.angleToFlag<-108):
            self.left20()
        elif (self.angleToFlag>-108 and self.angleToFlag<-90):
            self.left10(p)
        elif (self.angleToFlag>-90 and self.angleToFlag<-80):
            if p<0.5 and p>-0.5:
                self.onStopped(p)
            elif p<1.0 and p>-1.0:
                self.motion.moveTo(0, 0, p)
                self.onStopped()
            elif p<3.0 and p>-3.0:
                self.motion.moveTo(0, 0, p)
                self.motion.moveTo(0,0.04*p,0)
                self.onStopped()
            elif p<-3.0 or p>3.0:
                self.motion.moveTo(0, 0, p)
                self.motion.moveTo(0.0,0.04*p,0)
                self.onStopped()
        elif (self.angleToFlag>-80 and self.angleToFlag<-50):
            self.right10()
        elif (self.angleToFlag>-50 and self.angleToFlag<-10):
            self.right30()
        elif (self.angleToFlag>-10 and self.angleToFlag<0):
            self.right60()
        else:
            self.turn()

#        if (self.angleToFlag>-118 and self.angleToFlag<-78) or (self.angleToFlag>50 and self.angleToFlag<60):
#            self.left10()
#        elif (self.angleToFlag>-78 and self.angleToFlag<-60):
#            self.onStopped()
#        elif (self.angleToFlag>-60 and self.angleToFlag<-50) or (self.angleToFlag>78 and self.angleToFlag<118):
#            self.right10()
#        elif (self.angleToFlag>-50 and self.angleToFlag<-10):
#            self.right30()
#        elif (self.angleToFlag>-10 and self.angleToFlag<0):
#            self.right60()
#        elif (self.angleToFlag>0 and self.angleToFlag<10):
#            self.left60()
#        elif (self.angleToFlag>10 and self.angleToFlag<50):
#            self.left30()
#        else:
#            self.stopRight()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="right30" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="left10" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Output name="right60" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                <Output name="right10" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" />
                                                <Output name="turn" type="1" type_size="1" nature="1" inner="0" tooltip="" id="9" />
                                                <Output name="left20" type="1" type_size="1" nature="1" inner="0" tooltip="" id="10" />
                                            </Box>
                                            <Box name="Adjust&amp;Search" id="2" localization="8" tooltip="Enter description here" x="767" y="426">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="right10" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Input name="right30" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Input name="right60" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Input name="left10" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Input name="turn" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Input name="left20" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="Beat" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" />
                                                <Output name="o_naomarker" type="0" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                <Output name="o_right10" type="1" type_size="1" nature="1" inner="0" tooltip="" id="10" />
                                                <Output name="o_right30" type="1" type_size="1" nature="1" inner="0" tooltip="" id="11" />
                                                <Output name="o_right60" type="1" type_size="1" nature="1" inner="0" tooltip="" id="12" />
                                                <Output name="o_left10" type="1" type_size="1" nature="1" inner="0" tooltip="" id="13" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Wait (2)" id="18" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="482" y="120">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="move right30" id="6" localization="8" tooltip="" x="285" y="115">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="797" y="327">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("move left around 30 degrees")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>
                                                                                                <![CDATA[move left around 30 degrees]]>
</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                    </Box>
                                                                                    <Box name="search" id="15" localization="8" tooltip="" x="739" y="110">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                                            <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                                            <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="948" y="135">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.1, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                                            <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                                            <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                                            <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                                            <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.075" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                                            <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                                            <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                                        </Box>
                                                                                                        <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                                            <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="94.3874">
                                                                                                                            <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                                                <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                                                <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                                                <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                                            <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                                            <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="74.9154">
                                                                                                                            <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="653" y="241">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-0.0902951" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="20.9158" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="642" y="361">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="0.788627" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-11.5162" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="680" y="480">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="39.9004" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="-36.5654" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                                <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                                <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                                                <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                                                <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                                                <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                                            </Box>
                                                                                                                            <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="1024" y="301">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="651" y="61">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                                            <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                                            <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="793" y="252">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.3012)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                                            <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                                            <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="724" y="584">
                                                                                                            <bitmap>media/images/box/loop.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                                        </Box>
                                                                                                        <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To (3)" id="22" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="192" y="84">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(-0.15,0,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (4)" id="3" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="364" y="135">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,-0.15,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (5)" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="544" y="165">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,0.785,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                                                    <Link inputowner="22" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move right60" id="7" localization="8" tooltip="" x="286" y="230">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="902" y="311">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("move left around 30 degrees")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>
                                                                                                <![CDATA[move left around 30 degrees]]>
</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                    </Box>
                                                                                    <Box name="search" id="15" localization="8" tooltip="" x="753" y="120">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                                            <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                                            <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="950" y="133">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.1, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                                            <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                                            <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                                            <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                                            <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.075" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                                            <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                                            <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                                        </Box>
                                                                                                        <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                                            <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="94.3874">
                                                                                                                            <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                                                <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                                                <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                                                <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                                            <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                                            <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="74.9154">
                                                                                                                            <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="653" y="241">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-0.0902951" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="20.9158" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="642" y="361">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="0.788627" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-11.5162" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="680" y="480">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="39.9004" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="-36.5654" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                                <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                                <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                                                <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                                                <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                                                <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                                            </Box>
                                                                                                                            <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="1024" y="301">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="651" y="61">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                                            <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                                            <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="793" y="252">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.3012)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                                            <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                                            <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="724" y="584">
                                                                                                            <bitmap>media/images/box/loop.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                                        </Box>
                                                                                                        <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To (3)" id="22" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="179" y="135">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(-0.15,0,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (4)" id="3" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="364" y="137">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0.0,-0.20,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (5)" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="529" y="161">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,0.838,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="6" />
                                                                                    <Link inputowner="22" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move right10" id="8" localization="8" tooltip="" x="279" y="1">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1065" y="332">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("move left around 30 degrees")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>
                                                                                                <![CDATA[move left around 30 degrees]]>
</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                    </Box>
                                                                                    <Box name="search" id="15" localization="8" tooltip="" x="786" y="115">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                                            <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                                            <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="944" y="142">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.1, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                                            <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                                            <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                                            <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                                            <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.075" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                                            <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                                            <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                                        </Box>
                                                                                                        <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                                            <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="94.3874">
                                                                                                                            <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                                                <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                                                <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                                                <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                                            <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                                            <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="74.9154">
                                                                                                                            <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="653" y="241">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-0.0902951" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="20.9158" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="642" y="361">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="0.788627" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-11.5162" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="680" y="480">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="39.9004" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="-36.5654" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                                <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                                <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                                                <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                                                <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                                                <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                                            </Box>
                                                                                                                            <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="1024" y="301">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="651" y="61">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                                            <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                                            <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="793" y="252">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.3012)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                                            <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                                            <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="724" y="584">
                                                                                                            <bitmap>media/images/box/loop.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                                        </Box>
                                                                                                        <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To (3)" id="22" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="216" y="104">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(-0.2,0,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (4)" id="3" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="381" y="115">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,-0.05,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (5)" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="555" y="131">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,0.26,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="22" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move left10" id="10" localization="8" tooltip="" x="289" y="351">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="84.0896">
                                                                                    <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1012" y="317">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("move left around 30 degrees")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>
                                                                                                <![CDATA[move left around 30 degrees]]>
</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                    </Box>
                                                                                    <Box name="search" id="15" localization="8" tooltip="" x="930" y="104">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                                            <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                                            <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="777" y="104">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.1, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                                            <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                                            <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                                            <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                                            <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.075" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                                            <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                                            <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                                        </Box>
                                                                                                        <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                                            <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="94.3874">
                                                                                                                            <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                                                <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                                                <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                                                <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                                            <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                                            <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="74.9154">
                                                                                                                            <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-0.0902951" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="20.9158" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="0.788627" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-11.5162" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="39.9004" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="-36.5654" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                                <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                                <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                                                <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                                                <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                                                <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                                            </Box>
                                                                                                                            <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="837" y="461">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="575" y="63">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                                            <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                                            <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="778" y="243">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.3012)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                                            <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                                            <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="445" y="414">
                                                                                                            <bitmap>media/images/box/loop.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                                        </Box>
                                                                                                        <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To (3)" id="22" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="129" y="64">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(-0.10,0,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (4)" id="3" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="396" y="65">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0.15,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (5)" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="666" y="127">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,-0.471,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                                                    <Link inputowner="22" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="turn" id="1" localization="8" tooltip="" x="287" y="475">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="84.0896">
                                                                                    <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1553" y="647">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>
                                                                                                <![CDATA[]]>
</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                    </Box>
                                                                                    <Box name="search" id="15" localization="8" tooltip="" x="1062" y="150">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                                            <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                                            <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="745" y="62">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.1, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                                            <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                                            <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                                            <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                                            <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.075" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                                            <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                                            <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                                        </Box>
                                                                                                        <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                                            <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="94.3874">
                                                                                                                            <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                                                <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                                                <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                                                <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                                            <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                                            <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="74.9154">
                                                                                                                            <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-0.0902951" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="20.9158" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="0.788627" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-11.5162" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="39.9004" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="-36.5654" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                                <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                                <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                                                <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                                                <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                                                <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                                            </Box>
                                                                                                                            <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="837" y="461">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="575" y="63">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                                            <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                                            <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="778" y="243">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.3012)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                                            <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                                            <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="445" y="414">
                                                                                                            <bitmap>media/images/box/loop.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                                        </Box>
                                                                                                        <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Wait" id="18" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="600" y="153">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Move To (4)" id="22" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="89" y="245">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0.0,-0.4,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (5)" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="228" y="257">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0.20,0,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (6)" id="7" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="385" y="274">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,0.872,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (7)" id="8" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="810" y="314">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,0.872,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                                                    <Link inputowner="22" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="22" indexofoutput="6" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="6" />
                                                                                    <Link inputowner="18" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                                    <Link inputowner="18" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                    <Link inputowner="18" indexofinput="2" outputowner="7" indexofoutput="6" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="18" indexofoutput="4" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="8" indexofoutput="5" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="8" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="findmarker (1)" id="3" localization="8" tooltip="Enter description here" x="625" y="196">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="Select Camera_onUseTopCamera" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                                    <Output name="headYaw_yaw" type="0" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="headYaw" id="8" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="305" y="249">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        import time
        import math
        import cv2
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.1
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(3.0)
        CamPos = self.motionProxy.getPosition("CameraBottom",2,True)
        dx = CamPos[2]/math.tan(CamPos[4])
        #self.log("z:"+str(CamPos[2])+" pitch:"+str(CamPos[4])+" yaw:"+str(CamPos[5]))
        #self.log("dx:"+str(dx))
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_adjust(self,p):
        self.log("yaw: "+str(p[0]))
        #angleHead = self.motionProxy.getAngles("Head",True)
        angle = p[0]+p[1]
        if abs(p[0])>0.03:
            if angle > 2.0 or angle < -2.0:
                self.log("BADYAW:"+str(angle))
                self.yaw(angle)
            else:
                self.names  = ["HeadYaw", "HeadPitch"]
                self.angles  = [p[0], 0]
                self.fractionMaxSpeed  = 0.1
                self.motionProxy.changeAngles(self.names, self.angles, self.fractionMaxSpeed)
                self.log("adjust fini")
                self.onStopped()
        #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        else:
            self.log("YAW:"+str(p[1]))
            self.yaw(p[1])
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="adjust" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                                        <Output name="yaw" type="0" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Take Picture" id="10" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="664" y="262">
                                                                                        <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"
        #self.recordFolder = "/home/nao/"
    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = ALProxy( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
            self.log("capture succeded")
        else:
            self.log("capture failed")
        self.bIsRunning = False
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                                                            <Choice value="160 x 120" />
                                                                                            <Choice value="320 x 240" />
                                                                                            <Choice value="640 x 480" />
                                                                                            <Choice value="1280 x 960" />
                                                                                        </Parameter>
                                                                                        <Parameter name="File Name" inherits_from_parent="0" content_type="3" value="image1" default_value="image" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                                                        <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                                                            <Choice value="Top" />
                                                                                            <Choice value="Bottom" />
                                                                                        </Parameter>
                                                                                    </Box>
                                                                                    <Box name="Select Camera" id="11" localization="8" tooltip="Change the currently used camera." x="81" y="224">
                                                                                        <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.kCameraSelectID = 18
        self.cameraModule = ALProxy( "ALVideoDevice" )

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 1 )
        self.onReady()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                        <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                        <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                                                        <Resource name="Camera setting" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="DetectFlagYaw" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="636" y="602">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        self.CameraProxy = ALProxy("ALVideoDevice")
        self.g_count=0
        self.final=[0,0]
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.log("1")
        import time
        import cv2
        import numpy as np
        angleHead = self.motionProxy.getAngles("Head",True)
        img = cv2.imread('/home/nao/recordings/cameras/image1.jpg')
        hsv=cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
        lower_yellow=np.array([21,100,70])
        upper_yellow=np.array([30,230,230])
        mask=cv2.inRange(hsv,lower_yellow,upper_yellow)
        res=cv2.bitwise_and(img,img,mask=mask)
        median=cv2.medianBlur(res,7)
        gray = cv2.cvtColor(median,cv2.COLOR_BGR2GRAY)
        edges = cv2.Canny(gray,200,300)
        lines = None
        lines = cv2.HoughLines(edges,1,np.pi/180,40)
        #self.log("2")
        #print lines
        if lines != None:
            lines1=np.array(filter(lambda x:x[1]<1,lines[0]))
            lines2=np.array(filter(lambda x:x[0]>20,lines1))
            lines3=np.array(filter(lambda x:x[0]<1240,lines2))
            if len(lines3) != 0:
                a=lines3[0][0]
                self.log(str(a))
                lines3.sort(axis=0)
                out = np.median(lines3,axis=0)
                rho = out[0]
                theta = out[1]
                b = np.sin(theta)
                a = np.cos(theta)
                ratio = np.tan(theta)
                x0 = rho/a
                self.log("rho:"+str(rho)+"theta:"+str(theta)+"cos:"+str(a))
                xsum = 0
                ysum = 0
                count = 0
                for i in range(200,720):
                    x=int(x0-ratio*i)
                    if gray[i,x] > 0:
                        xsum+=x
                        ysum+=i
                        count+=1

                if count > 0:
                    xsum/=count
                    ysum/=count
                    self.log("pixel:"+str(xsum))
                    self.final[0] = (1-xsum/640.0)*0.532
                    self.final[1] = angleHead[0]
                    self.log("output:"+str(self.final[0])+" HeadYaw:"+str(self.final[1]))
                    self.onStopped(self.final) #activate the output of the box

                else:
                    self.log("BUG detected")
                    self.NoMarker()
            else:
                self.log("median BUG detected")
                self.g_count += 1
                if self.g_count ==2:
                    self.g_count = 5
                    self.HeadMove()
                if self.g_count ==25:
                    self.log("find bar error")
                    self.g_count = 0
                    self.MoveBody()
                self.log(str(self.g_count))
                self.NoMarker()
        else:
            self.log("No object detected")
            self.g_count += 1
            if self.g_count ==2:
                self.g_count = 5
                self.HeadMove()
            if self.g_count ==20:
                self.log("find bar error")
                self.g_count = 0
                self.MoveBody()
            self.log(str(self.g_count))
            self.NoMarker()
            pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="NoMarker" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="HeadMove" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="MoveBody" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                                                    </Box>
                                                                                    <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="485" y="242">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Move Toward" id="2" localization="8" tooltip="Make the robot move in the direction you set in parameters.&#x0A;&#x0A;!!Warning!! the robot will not stop moving by himself. You need to either set x, y and theta to 0 or stop the box to stop him.&#x0A;&#x0A;Note: You can set the period of move direction update in parameters." x="439" y="601">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):


    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        import threading
        self.motion = ALProxy("ALMotion")
        self.x = 0
        self.y = 0
        self.theta = 0
        self.ptask = qi.PeriodicTask()
        self.lock = threading.RLock()

    def onUnload(self):
        with self.lock:
            self.ptask.stop()
            self.x = 0
            self.y = 0
            self.theta = 0
            self.motion.moveToward(0, 0, 0)
            self.motion.waitUntilMoveIsFinished()

    def onInput_onStop(self):
        with self.lock:
            self.onUnload()
            self.onStopped()

    def onInput_onStart(self):
        with self.lock:
            period = self.getParameter("Period of direction update (s)")
            us_period = int(period*1000000)

            self.ptask.compensateCallbackTime(True)
            self.ptask.setCallback(self.updateMovement)
            self.ptask.setUsPeriod(us_period)
            self.ptask.start(True)

    def moveFailed(self):
        self.onUnload()
        self.onMoveFailed()

    def updateMovement(self):
        import math
        with self.lock:
            enableArms = self.getParameter("Arms movement enabled")
            self.motion.setMoveArmsEnabled(enableArms, enableArms)
            x = self.getParameter("X")
            y = self.getParameter("Y")
            theta = self.getParameter("Theta")
            period = self.getParameter("Period of direction update (s)")
            epsilon = 0.0001
            dx = math.fabs(x - self.x)
            dy = math.fabs(y - self.y)
            dt = math.fabs(theta - self.theta)

            # Update moveToward parameters
            if(dx > epsilon or dy > epsilon or dt > epsilon):
                self.x=x
                self.y=y
                self.theta=theta
                self.motion.moveToward(self.x, self.y, self.theta)

            # Check if the move has been canceled
            if (not self.motion.moveIsActive()):
                self.moveFailed()

            us_period = int(period*1000000)
            self.ptask.setUsPeriod(us_period)]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the box behavior is stopped." id="4" />
                                                                                        <Output name="onMoveFailed" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the motion move task is canceled." id="5" />
                                                                                        <Parameter name="X" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.2" min="-1" max="1" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                                        <Parameter name="Y" inherits_from_parent="0" content_type="2" value="0.2" default_value="0" min="-1" max="1" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                                        <Parameter name="Theta" inherits_from_parent="0" content_type="2" value="1" default_value="0" min="-1" max="1" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                                        <Parameter name="Period of direction update (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="1" tooltip="" id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="180" y="419">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0.2" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (1)" id="5" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="321" y="415">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (2)" id="7" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="450" y="421">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="-90" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="HeadMid" id="9" localization="8" tooltip="" x="248" y="121">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        import time
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.1
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(3.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Box name="HeadMove (1)" id="12" localization="8" tooltip="Enter tooltip here" x="944" y="635">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="find" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="66" y="236">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
                #time.sleep(10.0)
            if self.counter == 2:
                self.output2()
                #time.sleep(10.0)
            if self.counter == 3:
                self.output3()
                #time.sleep(1.5)
            if self.counter == 4:
                self.output4()
                time.sleep(3.0)
            if self.counter == 5:
                self.output5()
                #time.sleep(10.0)
            if self.counter == 6:
                self.output6()
                #time.sleep(1.5)
            if self.counter == 7:
                self.output7()
                #time.sleep(10.0)
            if self.counter == 8:
                self.output8()
                self.counter = 0
                time.sleep(3.0)
            time.sleep(10.0)
            if self.counter2 == 2:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                            <Output name="output5" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                                                                            <Output name="output6" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                                                                            <Output name="output7" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                                                                            <Output name="output8" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                                                                        </Box>
                                                                                                        <Box name="Counter-find" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1170" y="205">
                                                                                                            <bitmap>media/images/box/loop.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="15" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                                        </Box>
                                                                                                        <Box name="headYawL" id="8" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="547" y="2">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [-0.6, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="headYawM" id="9" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="608" y="344">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.02
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(10.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="headYawR" id="10" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="623" y="500">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0.6, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="headYawM (1)" id="11" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="564" y="799">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.02
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(10.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="headYawL (1)" id="12" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="712" y="84">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [-1.2, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="headYawR (1)" id="13" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="729" y="632">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [1.2, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="headYawL (2)" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="756" y="210">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [-1.8, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="headYawR (2)" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="744" y="762">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [1.8, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="8" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="12" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="12" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="10" />
                                                                                                        <Link inputowner="13" indexofinput="2" outputowner="5" indexofoutput="11" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="12" />
                                                                                                        <Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="13" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="8" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="10" indexofoutput="3" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="8" indexofoutput="5" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="3" outputowner="8" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="7" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="12" indexofinput="2" outputowner="1" indexofoutput="6" />
                                                                                    <Link inputowner="12" indexofinput="3" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="5" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move left20" id="2" localization="8" tooltip="" x="290" y="587">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="84.0896">
                                                                                    <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1012" y="317">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("move left around 30 degrees")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>
                                                                                                <![CDATA[move left around 30 degrees]]>
</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                    </Box>
                                                                                    <Box name="search" id="15" localization="8" tooltip="" x="930" y="104">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                                            <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                                            <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="777" y="104">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.1, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                                            <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                                            <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                                            <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                                            <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.075" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                                            <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                                            <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                                        </Box>
                                                                                                        <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                                            <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="94.3874">
                                                                                                                            <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                                                <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                                                <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                                                <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                                            <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                                            <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="74.9154">
                                                                                                                            <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-0.0902951" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="20.9158" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="0.788627" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-11.5162" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="39.9004" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="-36.5654" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                                <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                                <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                                                <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                                                <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                                                <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                                            </Box>
                                                                                                                            <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="837" y="461">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="575" y="63">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                                            <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                                            <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="778" y="243">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.3012)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                                            <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                                            <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="445" y="414">
                                                                                                            <bitmap>media/images/box/loop.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                                        </Box>
                                                                                                        <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To (3)" id="7" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="140" y="276">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(-0.1,0,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (4)" id="3" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="374" y="256">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0.22,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (5)" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="647" y="318">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,-0.471,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="18" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="18" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="9" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="7" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="findmarker" id="1" localization="8" tooltip="Enter description here" x="115" y="339">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Select Camera_onUseTopCamera" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Output name="headYaw_yaw" type="0" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="headYaw" id="8" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="305" y="249">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        import time
        import math
        import cv2
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.1
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(3.0)
        CamPos = self.motionProxy.getPosition("CameraBottom",2,True)
        dx = CamPos[2]/math.tan(CamPos[4])
        #self.log("z:"+str(CamPos[2])+" pitch:"+str(CamPos[4])+" yaw:"+str(CamPos[5]))
        #self.log("dx:"+str(dx))
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_adjust(self,p):
        self.log("yaw: "+str(p[0]))
        #angleHead = self.motionProxy.getAngles("Head",True)
        angle = p[0]+p[1]
        if abs(p[0])>0.03:
            if angle > 2.0 or angle < -2.0:
                self.log("BADYAW:"+str(angle))
                self.yaw(angle)
            else:
                self.names  = ["HeadYaw", "HeadPitch"]
                self.angles  = [p[0], 0]
                self.fractionMaxSpeed  = 0.1
                self.motionProxy.changeAngles(self.names, self.angles, self.fractionMaxSpeed)
                self.log("adjust fini")
                self.onStopped()
        #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        else:
            self.log("YAW:"+str(p[1]))
            self.yaw(p[1])
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="adjust" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                    <Output name="yaw" type="0" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Take Picture" id="10" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="664" y="262">
                                                                    <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"
        #self.recordFolder = "/home/nao/"
    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = ALProxy( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
            self.log("capture succeded")
        else:
            self.log("capture failed")
        self.bIsRunning = False
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                                        <Choice value="160 x 120" />
                                                                        <Choice value="320 x 240" />
                                                                        <Choice value="640 x 480" />
                                                                        <Choice value="1280 x 960" />
                                                                    </Parameter>
                                                                    <Parameter name="File Name" inherits_from_parent="0" content_type="3" value="image1" default_value="image" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                                    <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                                        <Choice value="Top" />
                                                                        <Choice value="Bottom" />
                                                                    </Parameter>
                                                                </Box>
                                                                <Box name="Select Camera" id="11" localization="8" tooltip="Change the currently used camera." x="81" y="224">
                                                                    <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.kCameraSelectID = 18
        self.cameraModule = ALProxy( "ALVideoDevice" )

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 1 )
        self.onReady()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                    <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                    <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                                    <Resource name="Camera setting" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="DetectFlagYaw" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="639" y="596">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        self.CameraProxy = ALProxy("ALVideoDevice")
        self.g_count=0
        self.final=[0,0]
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.log("1")
        import time
        import cv2
        import numpy as np
        angleHead = self.motionProxy.getAngles("Head",True)
        img = cv2.imread('/home/nao/recordings/cameras/image1.jpg')
        hsv=cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
        lower_yellow=np.array([21,100,70])
        upper_yellow=np.array([30,230,230])
        mask=cv2.inRange(hsv,lower_yellow,upper_yellow)
        res=cv2.bitwise_and(img,img,mask=mask)
        median=cv2.medianBlur(res,7)
        gray = cv2.cvtColor(median,cv2.COLOR_BGR2GRAY)
        edges = cv2.Canny(gray,200,300)
        lines = None
        lines = cv2.HoughLines(edges,1,np.pi/180,40)
        #self.log("2")
        #print lines
        if lines != None:
            lines1=np.array(filter(lambda x:x[1]<1,lines[0]))
            lines2=np.array(filter(lambda x:x[0]>20,lines1))
            lines3=np.array(filter(lambda x:x[0]<1240,lines2))
            if len(lines3) != 0:
                a=lines3[0][0]
                self.log(str(a))
                lines3.sort(axis=0)
                out = np.median(lines3,axis=0)
                rho = out[0]
                theta = out[1]
                b = np.sin(theta)
                a = np.cos(theta)
                ratio = np.tan(theta)
                x0 = rho/a
                self.log("rho:"+str(rho)+"theta:"+str(theta)+"cos:"+str(a))
                xsum = 0
                ysum = 0
                count = 0
                for i in range(200,720):
                    x=int(x0-ratio*i)
                    if gray[i,x] > 0:
                        xsum+=x
                        ysum+=i
                        count+=1

                if count > 0:
                    xsum/=count
                    ysum/=count
                    self.log("pixel:"+str(xsum))
                    self.final[0] = (1-xsum/640.0)*0.532
                    self.final[1] = angleHead[0]
                    self.log("output:"+str(self.final[0])+" HeadYaw:"+str(self.final[1]))
                    self.onStopped(self.final) #activate the output of the box

                else:
                    self.log("BUG detected")
                    self.NoMarker()
            else:
                self.log("median BUG detected")
                self.g_count += 1
                if self.g_count ==2:
                    self.g_count = 5
                    self.HeadMove()
                if self.g_count ==25:
                    self.log("find bar error")
                    self.g_count = 0
                    self.MoveBody()
                self.log(str(self.g_count))
                self.NoMarker()
        else:
            self.log("No object detected")
            self.g_count += 1
            if self.g_count ==2:
                self.g_count = 5
                self.HeadMove()
            if self.g_count ==20:
                self.log("find bar error")
                self.g_count = 0
                self.MoveBody()
            self.log(str(self.g_count))
            self.NoMarker()
            pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="NoMarker" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="HeadMove" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Output name="MoveBody" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="485" y="242">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Move Toward" id="2" localization="8" tooltip="Make the robot move in the direction you set in parameters.&#x0A;&#x0A;!!Warning!! the robot will not stop moving by himself. You need to either set x, y and theta to 0 or stop the box to stop him.&#x0A;&#x0A;Note: You can set the period of move direction update in parameters." x="439" y="601">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):


    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        import threading
        self.motion = ALProxy("ALMotion")
        self.x = 0
        self.y = 0
        self.theta = 0
        self.ptask = qi.PeriodicTask()
        self.lock = threading.RLock()

    def onUnload(self):
        with self.lock:
            self.ptask.stop()
            self.x = 0
            self.y = 0
            self.theta = 0
            self.motion.moveToward(0, 0, 0)
            self.motion.waitUntilMoveIsFinished()

    def onInput_onStop(self):
        with self.lock:
            self.onUnload()
            self.onStopped()

    def onInput_onStart(self):
        with self.lock:
            period = self.getParameter("Period of direction update (s)")
            us_period = int(period*1000000)

            self.ptask.compensateCallbackTime(True)
            self.ptask.setCallback(self.updateMovement)
            self.ptask.setUsPeriod(us_period)
            self.ptask.start(True)

    def moveFailed(self):
        self.onUnload()
        self.onMoveFailed()

    def updateMovement(self):
        import math
        with self.lock:
            enableArms = self.getParameter("Arms movement enabled")
            self.motion.setMoveArmsEnabled(enableArms, enableArms)
            x = self.getParameter("X")
            y = self.getParameter("Y")
            theta = self.getParameter("Theta")
            period = self.getParameter("Period of direction update (s)")
            epsilon = 0.0001
            dx = math.fabs(x - self.x)
            dy = math.fabs(y - self.y)
            dt = math.fabs(theta - self.theta)

            # Update moveToward parameters
            if(dx > epsilon or dy > epsilon or dt > epsilon):
                self.x=x
                self.y=y
                self.theta=theta
                self.motion.moveToward(self.x, self.y, self.theta)

            # Check if the move has been canceled
            if (not self.motion.moveIsActive()):
                self.moveFailed()

            us_period = int(period*1000000)
            self.ptask.setUsPeriod(us_period)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the box behavior is stopped." id="4" />
                                                                    <Output name="onMoveFailed" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the motion move task is canceled." id="5" />
                                                                    <Parameter name="X" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.2" min="-1" max="1" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Y" inherits_from_parent="0" content_type="2" value="0.2" default_value="0" min="-1" max="1" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta" inherits_from_parent="0" content_type="2" value="1" default_value="0" min="-1" max="1" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Period of direction update (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="1" tooltip="" id="9" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Move To" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="180" y="419">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0.2" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Move To (1)" id="5" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="321" y="415">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Move To (2)" id="7" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="450" y="421">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="-90" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="HeadMid" id="9" localization="8" tooltip="" x="248" y="121">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        import time
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.1
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(3.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="HeadMove (1)" id="12" localization="8" tooltip="Enter tooltip here" x="944" y="635">
                                                                    <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                    <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Output name="find" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="74.9154">
                                                                                    <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="66" y="236">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
                #time.sleep(10.0)
            if self.counter == 2:
                self.output2()
                #time.sleep(10.0)
            if self.counter == 3:
                self.output3()
                #time.sleep(1.5)
            if self.counter == 4:
                self.output4()
                time.sleep(3.0)
            if self.counter == 5:
                self.output5()
                #time.sleep(10.0)
            if self.counter == 6:
                self.output6()
                #time.sleep(1.5)
            if self.counter == 7:
                self.output7()
                #time.sleep(10.0)
            if self.counter == 8:
                self.output8()
                self.counter = 0
                time.sleep(3.0)
            time.sleep(10.0)
            if self.counter2 == 2:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                        <Output name="output5" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                                                        <Output name="output6" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                                                        <Output name="output7" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                                                        <Output name="output8" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                                                    </Box>
                                                                                    <Box name="Counter-find" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1170" y="205">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="15" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="headYawL" id="8" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="547" y="2">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [-0.6, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="headYawM" id="9" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="608" y="344">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.02
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(10.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="headYawR" id="10" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="623" y="500">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0.6, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="headYawM (1)" id="11" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="564" y="799">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.02
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(10.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="headYawL (1)" id="12" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="712" y="84">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [-1.2, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="headYawR (1)" id="13" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="729" y="632">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [1.2, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="headYawL (2)" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="756" y="210">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [-1.8, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="headYawR (2)" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="744" y="762">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [1.8, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="8" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                    <Link inputowner="12" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                    <Link inputowner="12" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="10" />
                                                                                    <Link inputowner="13" indexofinput="2" outputowner="5" indexofoutput="11" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="12" />
                                                                                    <Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="13" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="8" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="10" indexofoutput="3" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="8" indexofoutput="6" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="7" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="1" indexofoutput="6" />
                                                                <Link inputowner="12" indexofinput="3" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="headYawM" id="3" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="279" y="413">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.1
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(1.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="headYawM (1)" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="1019" y="384">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.1
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(1.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="naomark" id="20" localization="8" tooltip="Enter description here" x="185" y="64">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Input name="LandmarkDetected" type="0" type_size="1" nature="4" stm_value_name="LandmarkDetected" inner="1" tooltip="LandmarkDetected desc" id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="NoNaoMark" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="findNaoMark" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="373" y="227">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if len(p) != 0 :
            #self.Value.append(p)
            markInfoArray = p[1]
            for markInfo in markInfoArray:
                moreInfo = markInfo[0]
                self.Value.append(moreInfo)
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="TrackNaoMark" id="4" localization="8" tooltip="Enter tooltip here" x="527" y="218">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!= None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            #p= [balls[0][1],balls[0][2]]
            p=[balls[1],balls[2]]
            self.Angles(p)
            #self.log(str(balls[1]))
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                </Box>
                                                                <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="186" y="261">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                    <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                </Box>
                                                                <Link inputowner="10" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="adjust_s (1)" id="6" localization="8" tooltip="" x="854" y="55">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


    def onLoad(self):
        #put initialization code here
        self.motion=ALProxy("ALMotion")

        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        #self.onStopped() #activate the output of the box
        self.motion.setMoveArmsEnabled(False,False)

        self.q = p +1.4835
        self.logger.info("p:"+str(p))
        self.logger.info("q:"+str(self.q))
        if self.q<0.5/180*3.14 and self.q>-0.5/180*3.14:
            self.onStopped()
        elif self.q<1.0/180*3.14 and self.q>-1.0/180*3.14:
            self.motion.moveTo(0, 0, self.q)
            self.onStopped()
        elif self.q<2.0/180*3.14 and self.q>-2.0/180*3.14:
            self.motion.moveTo(0, 0, self.q)
            self.motion.moveTo(0,0.04*self.q,0)
            self.onStopped()
        elif self.q<-2.0/180*3.14 or self.q>2.0/180*3.14:
            self.motion.moveTo(0, 0, self.q)
            self.motion.moveTo(0.0,0.04*self.q,0)
            self.retry1()
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Output name="retry" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="retry1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="4" outputowner="9" indexofoutput="7" />
                                            <Link inputowner="2" indexofinput="2" outputowner="9" indexofoutput="8" />
                                            <Link inputowner="9" indexofinput="2" outputowner="2" indexofoutput="9" />
                                            <Link inputowner="2" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="6" outputowner="9" indexofoutput="9" />
                                            <Link inputowner="2" indexofinput="5" outputowner="9" indexofoutput="6" />
                                            <Link inputowner="9" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="9" />
                                            <Link inputowner="20" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="6" indexofoutput="6" />
                                            <Link inputowner="2" indexofinput="7" outputowner="9" indexofoutput="10" />
                                            <Link inputowner="0" indexofinput="4" outputowner="9" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="FindAndAdjust (2)" id="17" localization="8" tooltip="Enter description here" x="1227" y="274">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="findmarker_Select Camera_onUseTopCamera" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                            <Input name="LandmarkDetected" type="0" type_size="1" nature="4" stm_value_name="LandmarkDetected" inner="1" tooltip="LandmarkDetected desc" id="3" />
                            <Output name="beat" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="position adj" id="9" localization="8" tooltip="" x="545" y="336">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        import almath
        import time
        #self.onStopped() #activate the output of the box

        #while(True):
#        self.angleToFlag = self.memory.getData("Device/SubDeviceList/HeadYaw/Position/Sensor/Value")
        self.angleToFlag = p / almath.PI * 180
        self.logger.info(self.angleToFlag)
        p = p+1.485
        if(self.angleToFlag>-135 and self.angleToFlag<-108):
            self.left20()
        elif (self.angleToFlag>-108 and self.angleToFlag<-90):
            self.left10(p)
        elif (self.angleToFlag>-90 and self.angleToFlag<-80):
            if p<0.5 and p>-0.5:
                self.onStopped(p)
            elif p<1.0 and p>-1.0:
                self.motion.moveTo(0, 0, p)
                self.onStopped()
            elif p<3.0 and p>-3.0:
                self.motion.moveTo(0, 0, p)
                self.motion.moveTo(0,0.04*p,0)
                self.onStopped()
            elif p<-3.0 or p>3.0:
                self.motion.moveTo(0, 0, p)
                self.motion.moveTo(0.0,0.04*p,0)
                self.onStopped()
        elif (self.angleToFlag>-80 and self.angleToFlag<-50):
            self.right10()
        elif (self.angleToFlag>-50 and self.angleToFlag<-10):
            self.right30()
        elif (self.angleToFlag>-10 and self.angleToFlag<0):
            self.right60()
        else:
            self.turn()

#        if (self.angleToFlag>-118 and self.angleToFlag<-78) or (self.angleToFlag>50 and self.angleToFlag<60):
#            self.left10()
#        elif (self.angleToFlag>-78 and self.angleToFlag<-60):
#            self.onStopped()
#        elif (self.angleToFlag>-60 and self.angleToFlag<-50) or (self.angleToFlag>78 and self.angleToFlag<118):
#            self.right10()
#        elif (self.angleToFlag>-50 and self.angleToFlag<-10):
#            self.right30()
#        elif (self.angleToFlag>-10 and self.angleToFlag<0):
#            self.right60()
#        elif (self.angleToFlag>0 and self.angleToFlag<10):
#            self.left60()
#        elif (self.angleToFlag>10 and self.angleToFlag<50):
#            self.left30()
#        else:
#            self.stopRight()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="right30" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="left10" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Output name="right60" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                <Output name="right10" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" />
                                                <Output name="turn" type="1" type_size="1" nature="1" inner="0" tooltip="" id="9" />
                                                <Output name="left20" type="1" type_size="1" nature="1" inner="0" tooltip="" id="10" />
                                            </Box>
                                            <Box name="Adjust&amp;Search" id="2" localization="8" tooltip="Enter description here" x="767" y="426">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="right10" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Input name="right30" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Input name="right60" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Input name="left10" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Input name="turn" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Input name="left20" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="Beat" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" />
                                                <Output name="o_naomarker" type="0" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                <Output name="o_right10" type="1" type_size="1" nature="1" inner="0" tooltip="" id="10" />
                                                <Output name="o_right30" type="1" type_size="1" nature="1" inner="0" tooltip="" id="11" />
                                                <Output name="o_right60" type="1" type_size="1" nature="1" inner="0" tooltip="" id="12" />
                                                <Output name="o_left10" type="1" type_size="1" nature="1" inner="0" tooltip="" id="13" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Wait (2)" id="18" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="482" y="120">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="move right30" id="6" localization="8" tooltip="" x="285" y="115">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="797" y="327">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("move left around 30 degrees")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>
                                                                                                <![CDATA[move left around 30 degrees]]>
</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                    </Box>
                                                                                    <Box name="search" id="15" localization="8" tooltip="" x="739" y="110">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                                            <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                                            <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="948" y="135">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.1, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                                            <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                                            <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                                            <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                                            <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.075" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                                            <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                                            <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                                        </Box>
                                                                                                        <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                                            <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="94.3874">
                                                                                                                            <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                                                <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                                                <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                                                <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                                            <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                                            <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="74.9154">
                                                                                                                            <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="653" y="241">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-0.0902951" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="20.9158" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="642" y="361">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="0.788627" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-11.5162" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="680" y="480">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="39.9004" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="-36.5654" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                                <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                                <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                                                <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                                                <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                                                <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                                            </Box>
                                                                                                                            <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="1024" y="301">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="651" y="61">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                                            <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                                            <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="793" y="252">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.3012)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                                            <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                                            <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="724" y="584">
                                                                                                            <bitmap>media/images/box/loop.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                                        </Box>
                                                                                                        <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To (3)" id="22" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="192" y="84">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(-0.15,0,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (4)" id="3" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="364" y="135">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,-0.15,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (5)" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="544" y="165">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,0.785,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                                                    <Link inputowner="22" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move right60" id="7" localization="8" tooltip="" x="286" y="230">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="902" y="311">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("move left around 30 degrees")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>
                                                                                                <![CDATA[move left around 30 degrees]]>
</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                    </Box>
                                                                                    <Box name="search" id="15" localization="8" tooltip="" x="753" y="120">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                                            <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                                            <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="950" y="133">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.1, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                                            <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                                            <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                                            <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                                            <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.075" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                                            <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                                            <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                                        </Box>
                                                                                                        <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                                            <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="94.3874">
                                                                                                                            <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                                                <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                                                <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                                                <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                                            <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                                            <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="74.9154">
                                                                                                                            <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="653" y="241">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-0.0902951" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="20.9158" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="642" y="361">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="0.788627" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-11.5162" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="680" y="480">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="39.9004" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="-36.5654" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                                <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                                <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                                                <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                                                <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                                                <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                                            </Box>
                                                                                                                            <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="1024" y="301">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="651" y="61">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                                            <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                                            <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="793" y="252">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.3012)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                                            <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                                            <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="724" y="584">
                                                                                                            <bitmap>media/images/box/loop.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                                        </Box>
                                                                                                        <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To (3)" id="22" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="179" y="135">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(-0.15,0,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (4)" id="3" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="364" y="137">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0.0,-0.20,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (5)" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="529" y="161">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,0.837,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="6" />
                                                                                    <Link inputowner="22" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move right10" id="8" localization="8" tooltip="" x="279" y="1">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1065" y="332">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("move left around 30 degrees")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>
                                                                                                <![CDATA[move left around 30 degrees]]>
</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                    </Box>
                                                                                    <Box name="search" id="15" localization="8" tooltip="" x="786" y="115">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                                            <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                                            <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="944" y="142">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.1, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                                            <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                                            <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                                            <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                                            <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.075" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                                            <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                                            <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                                        </Box>
                                                                                                        <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                                            <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="94.3874">
                                                                                                                            <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                                                <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                                                <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                                                <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                                            <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                                            <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="74.9154">
                                                                                                                            <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="653" y="241">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-0.0902951" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="20.9158" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="642" y="361">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="0.788627" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-11.5162" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="680" y="480">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="39.9004" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="-36.5654" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                                <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                                <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                                                <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                                                <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                                                <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                                            </Box>
                                                                                                                            <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="1024" y="301">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="651" y="61">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                                            <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                                            <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="793" y="252">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.3012)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                                            <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                                            <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="724" y="584">
                                                                                                            <bitmap>media/images/box/loop.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                                        </Box>
                                                                                                        <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To (3)" id="22" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="216" y="104">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(-0.2,0,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (4)" id="3" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="381" y="115">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,-0.05,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (5)" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="555" y="131">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,0.26,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="22" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move left10" id="10" localization="8" tooltip="" x="289" y="351">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="84.0896">
                                                                                    <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1012" y="317">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("move left around 30 degrees")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>
                                                                                                <![CDATA[move left around 30 degrees]]>
</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                    </Box>
                                                                                    <Box name="search" id="15" localization="8" tooltip="" x="930" y="104">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                                            <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                                            <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="777" y="104">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.1, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                                            <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                                            <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                                            <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                                            <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.075" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                                            <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                                            <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                                        </Box>
                                                                                                        <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                                            <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="94.3874">
                                                                                                                            <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                                                <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                                                <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                                                <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                                            <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                                            <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="74.9154">
                                                                                                                            <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-0.0902951" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="20.9158" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="0.788627" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-11.5162" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="39.9004" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="-36.5654" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                                <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                                <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                                                <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                                                <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                                                <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                                            </Box>
                                                                                                                            <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="837" y="461">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="575" y="63">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                                            <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                                            <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="778" y="243">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.3012)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                                            <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                                            <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="445" y="414">
                                                                                                            <bitmap>media/images/box/loop.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                                        </Box>
                                                                                                        <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To (3)" id="22" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="129" y="64">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(-0.10,0,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (4)" id="3" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="396" y="65">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0.15,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (5)" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="666" y="127">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,-0.471,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                                                    <Link inputowner="22" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="22" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="turn" id="1" localization="8" tooltip="" x="287" y="475">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="84.0896">
                                                                                    <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1553" y="647">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>
                                                                                                <![CDATA[]]>
</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                    </Box>
                                                                                    <Box name="search" id="15" localization="8" tooltip="" x="1062" y="150">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                                            <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                                            <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="745" y="62">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.1, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                                            <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                                            <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                                            <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                                            <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.075" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                                            <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                                            <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                                        </Box>
                                                                                                        <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                                            <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="94.3874">
                                                                                                                            <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                                                <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                                                <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                                                <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                                            <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                                            <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="74.9154">
                                                                                                                            <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-0.0902951" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="20.9158" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="0.788627" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-11.5162" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="39.9004" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="-36.5654" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                                <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                                <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                                                <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                                                <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                                                <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                                            </Box>
                                                                                                                            <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="837" y="461">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="575" y="63">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                                            <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                                            <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="778" y="243">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.3012)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                                            <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                                            <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="445" y="414">
                                                                                                            <bitmap>media/images/box/loop.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                                        </Box>
                                                                                                        <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Wait" id="18" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="600" y="153">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Move To (4)" id="22" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="89" y="245">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0.0,-0.4,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (5)" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="228" y="257">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0.20,0,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (6)" id="7" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="385" y="274">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,0.872,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (7)" id="8" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="810" y="314">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,0.872,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                                                    <Link inputowner="22" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="22" indexofoutput="6" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="6" />
                                                                                    <Link inputowner="18" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                                    <Link inputowner="18" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                    <Link inputowner="18" indexofinput="2" outputowner="7" indexofoutput="6" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="18" indexofoutput="4" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="8" indexofoutput="5" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="8" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="findmarker (1)" id="3" localization="8" tooltip="Enter description here" x="625" y="196">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="Select Camera_onUseTopCamera" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                                    <Output name="headYaw_yaw" type="0" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="headYaw" id="8" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="305" y="249">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        import time
        import math
        import cv2
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.1
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(3.0)
        CamPos = self.motionProxy.getPosition("CameraBottom",2,True)
        dx = CamPos[2]/math.tan(CamPos[4])
        #self.log("z:"+str(CamPos[2])+" pitch:"+str(CamPos[4])+" yaw:"+str(CamPos[5]))
        #self.log("dx:"+str(dx))
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_adjust(self,p):
        self.log("yaw: "+str(p[0]))
        #angleHead = self.motionProxy.getAngles("Head",True)
        angle = p[0]+p[1]
        if abs(p[0])>0.03:
            if angle > 2.0 or angle < -2.0:
                self.log("BADYAW:"+str(angle))
                self.yaw(angle)
            else:
                self.names  = ["HeadYaw", "HeadPitch"]
                self.angles  = [p[0], 0]
                self.fractionMaxSpeed  = 0.1
                self.motionProxy.changeAngles(self.names, self.angles, self.fractionMaxSpeed)
                self.log("adjust fini")
                self.onStopped()
        #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        else:
            self.log("YAW:"+str(p[1]))
            self.yaw(p[1])
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="adjust" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                                        <Output name="yaw" type="0" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Take Picture" id="10" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="664" y="262">
                                                                                        <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"
        #self.recordFolder = "/home/nao/"
    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = ALProxy( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
            self.log("capture succeded")
        else:
            self.log("capture failed")
        self.bIsRunning = False
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                                                            <Choice value="160 x 120" />
                                                                                            <Choice value="320 x 240" />
                                                                                            <Choice value="640 x 480" />
                                                                                            <Choice value="1280 x 960" />
                                                                                        </Parameter>
                                                                                        <Parameter name="File Name" inherits_from_parent="0" content_type="3" value="image1" default_value="image" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                                                        <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                                                            <Choice value="Top" />
                                                                                            <Choice value="Bottom" />
                                                                                        </Parameter>
                                                                                    </Box>
                                                                                    <Box name="Select Camera" id="11" localization="8" tooltip="Change the currently used camera." x="81" y="224">
                                                                                        <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.kCameraSelectID = 18
        self.cameraModule = ALProxy( "ALVideoDevice" )

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 1 )
        self.onReady()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                        <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                        <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                                                        <Resource name="Camera setting" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="DetectFlagYaw" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="636" y="602">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        self.CameraProxy = ALProxy("ALVideoDevice")
        self.g_count=0
        self.final=[0,0]
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.log("1")
        import time
        import cv2
        import numpy as np
        angleHead = self.motionProxy.getAngles("Head",True)
        img = cv2.imread('/home/nao/recordings/cameras/image1.jpg')
        hsv=cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
        lower_yellow=np.array([21,100,70])
        upper_yellow=np.array([30,230,230])
        mask=cv2.inRange(hsv,lower_yellow,upper_yellow)
        res=cv2.bitwise_and(img,img,mask=mask)
        median=cv2.medianBlur(res,7)
        gray = cv2.cvtColor(median,cv2.COLOR_BGR2GRAY)
        edges = cv2.Canny(gray,200,300)
        lines = None
        lines = cv2.HoughLines(edges,1,np.pi/180,40)
        #self.log("2")
        #print lines
        if lines != None:
            lines1=np.array(filter(lambda x:x[1]<1,lines[0]))
            lines2=np.array(filter(lambda x:x[0]>20,lines1))
            lines3=np.array(filter(lambda x:x[0]<1240,lines2))
            if len(lines3) != 0:
                a=lines3[0][0]
                self.log(str(a))
                lines3.sort(axis=0)
                out = np.median(lines3,axis=0)
                rho = out[0]
                theta = out[1]
                b = np.sin(theta)
                a = np.cos(theta)
                ratio = np.tan(theta)
                x0 = rho/a
                self.log("rho:"+str(rho)+"theta:"+str(theta)+"cos:"+str(a))
                xsum = 0
                ysum = 0
                count = 0
                for i in range(200,720):
                    x=int(x0-ratio*i)
                    if gray[i,x] > 0:
                        xsum+=x
                        ysum+=i
                        count+=1

                if count > 0:
                    xsum/=count
                    ysum/=count
                    self.log("pixel:"+str(xsum))
                    self.final[0] = (1-xsum/640.0)*0.532
                    self.final[1] = angleHead[0]
                    self.log("output:"+str(self.final[0])+" HeadYaw:"+str(self.final[1]))
                    self.onStopped(self.final) #activate the output of the box

                else:
                    self.log("BUG detected")
                    self.NoMarker()
            else:
                self.log("median BUG detected")
                self.g_count += 1
                if self.g_count ==2:
                    self.g_count = 5
                    self.HeadMove()
                if self.g_count ==25:
                    self.log("find bar error")
                    self.g_count = 0
                    self.MoveBody()
                self.log(str(self.g_count))
                self.NoMarker()
        else:
            self.log("No object detected")
            self.g_count += 1
            if self.g_count ==2:
                self.g_count = 5
                self.HeadMove()
            if self.g_count ==20:
                self.log("find bar error")
                self.g_count = 0
                self.MoveBody()
            self.log(str(self.g_count))
            self.NoMarker()
            pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="NoMarker" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="HeadMove" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="MoveBody" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                                                    </Box>
                                                                                    <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="485" y="242">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Move Toward" id="2" localization="8" tooltip="Make the robot move in the direction you set in parameters.&#x0A;&#x0A;!!Warning!! the robot will not stop moving by himself. You need to either set x, y and theta to 0 or stop the box to stop him.&#x0A;&#x0A;Note: You can set the period of move direction update in parameters." x="439" y="601">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):


    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        import threading
        self.motion = ALProxy("ALMotion")
        self.x = 0
        self.y = 0
        self.theta = 0
        self.ptask = qi.PeriodicTask()
        self.lock = threading.RLock()

    def onUnload(self):
        with self.lock:
            self.ptask.stop()
            self.x = 0
            self.y = 0
            self.theta = 0
            self.motion.moveToward(0, 0, 0)
            self.motion.waitUntilMoveIsFinished()

    def onInput_onStop(self):
        with self.lock:
            self.onUnload()
            self.onStopped()

    def onInput_onStart(self):
        with self.lock:
            period = self.getParameter("Period of direction update (s)")
            us_period = int(period*1000000)

            self.ptask.compensateCallbackTime(True)
            self.ptask.setCallback(self.updateMovement)
            self.ptask.setUsPeriod(us_period)
            self.ptask.start(True)

    def moveFailed(self):
        self.onUnload()
        self.onMoveFailed()

    def updateMovement(self):
        import math
        with self.lock:
            enableArms = self.getParameter("Arms movement enabled")
            self.motion.setMoveArmsEnabled(enableArms, enableArms)
            x = self.getParameter("X")
            y = self.getParameter("Y")
            theta = self.getParameter("Theta")
            period = self.getParameter("Period of direction update (s)")
            epsilon = 0.0001
            dx = math.fabs(x - self.x)
            dy = math.fabs(y - self.y)
            dt = math.fabs(theta - self.theta)

            # Update moveToward parameters
            if(dx > epsilon or dy > epsilon or dt > epsilon):
                self.x=x
                self.y=y
                self.theta=theta
                self.motion.moveToward(self.x, self.y, self.theta)

            # Check if the move has been canceled
            if (not self.motion.moveIsActive()):
                self.moveFailed()

            us_period = int(period*1000000)
            self.ptask.setUsPeriod(us_period)]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the box behavior is stopped." id="4" />
                                                                                        <Output name="onMoveFailed" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the motion move task is canceled." id="5" />
                                                                                        <Parameter name="X" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.2" min="-1" max="1" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                                        <Parameter name="Y" inherits_from_parent="0" content_type="2" value="0.2" default_value="0" min="-1" max="1" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                                        <Parameter name="Theta" inherits_from_parent="0" content_type="2" value="1" default_value="0" min="-1" max="1" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                                        <Parameter name="Period of direction update (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="1" tooltip="" id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="180" y="419">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0.2" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (1)" id="5" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="321" y="415">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (2)" id="7" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="450" y="421">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="-90" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="HeadMid" id="9" localization="8" tooltip="" x="248" y="121">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        import time
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.1
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(3.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                    </Box>
                                                                                    <Box name="HeadMove (1)" id="12" localization="8" tooltip="Enter tooltip here" x="944" y="635">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="find" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram scale="74.9154">
                                                                                                        <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="66" y="236">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
                #time.sleep(10.0)
            if self.counter == 2:
                self.output2()
                #time.sleep(10.0)
            if self.counter == 3:
                self.output3()
                #time.sleep(1.5)
            if self.counter == 4:
                self.output4()
                time.sleep(3.0)
            if self.counter == 5:
                self.output5()
                #time.sleep(10.0)
            if self.counter == 6:
                self.output6()
                #time.sleep(1.5)
            if self.counter == 7:
                self.output7()
                #time.sleep(10.0)
            if self.counter == 8:
                self.output8()
                self.counter = 0
                time.sleep(3.0)
            time.sleep(10.0)
            if self.counter2 == 2:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                            <Output name="output5" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                                                                            <Output name="output6" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                                                                            <Output name="output7" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                                                                            <Output name="output8" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                                                                        </Box>
                                                                                                        <Box name="Counter-find" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1170" y="205">
                                                                                                            <bitmap>media/images/box/loop.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="15" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                                        </Box>
                                                                                                        <Box name="headYawL" id="8" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="547" y="2">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [-0.6, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="headYawM" id="9" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="608" y="344">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.02
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(10.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="headYawR" id="10" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="623" y="500">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0.6, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="headYawM (1)" id="11" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="564" y="799">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.02
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(10.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="headYawL (1)" id="12" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="712" y="84">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [-1.2, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="headYawR (1)" id="13" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="729" y="632">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [1.2, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="headYawL (2)" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="756" y="210">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [-1.8, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="headYawR (2)" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="744" y="762">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [1.8, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="8" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                        <Link inputowner="12" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                        <Link inputowner="12" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="10" />
                                                                                                        <Link inputowner="13" indexofinput="2" outputowner="5" indexofoutput="11" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="12" />
                                                                                                        <Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="13" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="8" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="10" indexofoutput="3" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="8" indexofoutput="5" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="3" outputowner="8" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="7" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="12" indexofinput="2" outputowner="1" indexofoutput="6" />
                                                                                    <Link inputowner="12" indexofinput="3" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="5" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="move left20" id="2" localization="8" tooltip="" x="290" y="587">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="84.0896">
                                                                                    <Box name="Comment" id="6" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="1012" y="317">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("move left around 30 degrees")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>
                                                                                                <![CDATA[move left around 30 degrees]]>
</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                    </Box>
                                                                                    <Box name="search" id="15" localization="8" tooltip="" x="930" y="104">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="166" y="446">
                                                                                                            <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        self.log("we are in the soccer frame")
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                                                            <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Walk2Ball" id="1" localization="8" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. Then when the ball is close enough, trigger a shoot." x="777" y="104">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time
import motion
import math


# restrict a value between limits
# value: number to be sure is in the limits
# domain[0] = minimal value
# domain[1] = maximal value
def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

# linear interpolation of a value between 2 domains
def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

# polynomial interpolation of a value between 2 domains
def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow((value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo)
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO


    def onLoad(self):
        self.nStepFrequency = self.getParameter("step frequency")
        self.minForwardSpeed = self.getParameter("min forward speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.navigation = ALProxy('ALNavigation')
        self.navigation._removeSensor('Sonar')

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)
        self.navigation._addSensor('Sonar')
        self.onInput_onStop()

    def stopWalking(self):
        #~ self.motion.stopMove()
        self.motion.moveToward(0.0, 0.0, 0.0)
        while self.motion.moveIsActive():
            time.sleep(0.05)
        pass

    def getTargetInfo(self, imgYaw, imgPitch):

        # Find out the camera position
        aCamPos = self.motion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)

        # Apply an offset to the height of the robot because it is erroneous
        aCamPos[2] -= 0.01

        # Remove the radius of the ball from the height (since we will see its center)
        aCamPos[2] -= self.memory.getData("Soccer/Diameter") / 2.0

        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)

        return (dx, imgYaw + aCamPos[5], imgPitch + aCamPos[4])



    def onInput_onStart(self, p):

        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])

        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [self.minForwardSpeed, self.nForwardSpeed], distance, 0.3)

        # Compute a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        theta = alpha * yaw

        if distance > 0.8 and abs(yaw) < 0.20:
            self.motion.moveToward(0.85, 0.0, theta)

#        elif distance > 0.5 or abs(yaw) > 0.12:
#            self.motion.moveToward(speed, 0.0, theta)
#            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        elif distance > self.getParameter("Shoot distance") or abs(yaw) > 0.12:
            self.motion.moveToward(0.1, 0.0, theta)
            self.log("Nao is moving:" + str(speed) + ', Distance: ' + str(distance))
        else:
            self.stopWalking()
            self.Shoot()

    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Shoot" type="1" type_size="1" nature="1" inner="0" tooltip="Nao decided he was close enough to the ball to shoot." id="5" />
                                                                                                            <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                                                                                            <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                                                                                            <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                                                                            <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.075" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="9" />
                                                                                                            <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.9" default_value="0.6" min="0" max="1" tooltip="" id="10" />
                                                                                                            <Parameter name="min forward speed" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="" id="11" />
                                                                                                        </Box>
                                                                                                        <Box name="BallDetection" id="10" localization="8" tooltip="Setup the ball detection algorithm" x="327" y="153">
                                                                                                            <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onSetup(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Input name="redBallDetected" type="0" type_size="1" nature="4" stm_value_name="redBallDetected" inner="1" tooltip="redBallDetected desc" id="4" />
                                                                                                            <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                            <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                                            <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="94.3874">
                                                                                                                            <Box name="TrackBall" id="3" localization="8" tooltip="Enter tooltip here" x="560" y="331">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = [balls[1][0],balls[1][1]]
            #~ self.log(p)
            self.Angles(p)
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                                                <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                                                <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="2" localization="8" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." x="398" y="14">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="268" y="170">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if p != None :
            self.Value.append(p)
        self.onStart(2)]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                                                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                                                                                <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="9" localization="8" tooltip="Send a signal with a predefined period." x="89" y="212">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="562" y="232">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                                                                            </Box>
                                                                                                                            <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="584" y="85">
                                                                                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning and self.getParameter("Trigger timerOutput if cancelled")):
            self.timerOutput()]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="6" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="0" indexofinput="8" outputowner="3" indexofoutput="5" />
                                                                                                                            <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="5" />
                                                                                                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="HeadMove" id="9" localization="8" tooltip="Enter tooltip here" x="615" y="263">
                                                                                                            <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                            <Timeline enable="0">
                                                                                                                <BehaviorLayer name="behavior_layer1">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                                        <Diagram scale="74.9154">
                                                                                                                            <Box name="Animation" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="785" y="367">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-0.0902951" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="20.9158" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="787" y="462">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="14">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="0.788627" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="14" value="-11.5162" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="786" y="563">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="39.9004" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Animation" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="789" y="660">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                                                                                                                <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="15">
                                                                                                                                    <ActuatorList model="Nao">
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="-36.5654" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                                            <Key frame="15" value="2.54646" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="129" y="324">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
            if self.counter == 2:
                self.output2()
            if self.counter == 3:
                self.output3()
            if self.counter == 4:
                self.output4()
                self.counter = 0
            time.sleep(3)
            if self.counter2 == 4:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                                <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                                                <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                                                                <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                                                <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                                                                <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                                                            </Box>
                                                                                                                            <Box name="HeadTrack" id="6" localization="8" tooltip="Enter tooltip here" x="544" y="71">
                                                                                                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motion = ALProxy("ALMotion")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, angles):
        if angles:
            angleHead = self.motion.getAngles("Head",True)

            if angleHead[0] < -0.7 and angles[0] < 0:
                angles[0] = 0
            if  angleHead[0] > 0.7 and angles[0] > 0:
                angles[0] = 0
            if angleHead[1] > 0.25 and angles[1] > 0:
                angles[1] = 0
            self.motion.changeAngles("Head", [x * 0.5 for x in angles],0.1)
        #self.log(angleHead)

        #We block the head rotation because nao can see the color of his shoulder.
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                                                            <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Move To" id="13" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="837" y="461">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-1.6" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="OnlyOnce" id="5" localization="8" tooltip="send a specific value only one time&#x0A;*** ref box in: ./2_wip/usefull/usefull.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="575" y="63">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# OnlyOnce
#~ Author : Alexandre Mazel
#~ Date : 17/12/2010
#~ Version : 1.0

import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        self.nNbrTimesOutputted = 0;
        self.nNbrMaxOutputting = 1; # change it it would want to output more than once

    def onUnload(self):
        pass

    def onInput_onSendValue(self, p):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        if( self.nNbrTimesOutputted < self.nNbrMaxOutputting  ):
            self.nNbrTimesOutputted += 1;
            self.output_SendValue( p );
        self.mutex.unlock();

    def onInput_onReset(self):
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
        self.nNbrTimesOutputted = 0;
        self.mutex.unlock();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSendValue" type="0" type_size="1" nature="1" inner="0" tooltip="Value to send only one time" id="2" />
                                                                                                            <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="next time value enter it will be outputted" id="3" />
                                                                                                            <Output name="output_SendValue" type="0" type_size="1" nature="2" inner="0" tooltip="value outputted" id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Move To (1)" id="3" localization="8" tooltip="Make NAO move to a configured point relative to its current location." x="778" y="243">
                                                                                                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        if (self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.moveTo(0.0, 0.0, 0.0)
        else:
            self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if(self.getParameter("Secure moveTo (Stop if obstacle)") == True):
            self.navigation.setSecurityDistance(self.getParameter("Security Distance (m)"))
            self.navigation.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        else:
            self.motion.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="5" />
                                                                                                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="6" />
                                                                                                            <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="7" />
                                                                                                            <Parameter name="Secure moveTo (Stop if obstacle)" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                                                                                            <Parameter name="Security Distance (m)" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0" max="2.5" tooltip="" id="9" />
                                                                                                            <Resource name="Legs" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="Insert Data" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="120" y="317">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0.3012)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                                                            <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                                            <Parameter name="key" inherits_from_parent="0" content_type="3" value="Soccer/Diameter" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Counter" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="445" y="414">
                                                                                                            <bitmap>media/images/box/loop.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="6" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                                        </Box>
                                                                                                        <Box name="switch camera" id="8" localization="8" tooltip="" x="210" y="59">
                                                                                                            <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ) # "ALVideoDevice"

    def onLoad(self):
        self.flag = True

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        if self.flag:
            self.cameraModule.setParam( self.kCameraSelectID, 1 )
            self.flag = False
        else:
            self.cameraModule.setParam( self.kCameraSelectID, 0 )
            self.flag = True
        self.output_Finished()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="output_Finished" type="1" type_size="1" nature="2" inner="0" tooltip="指令盒行为结束时，送出信号。" id="3" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="6" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="10" indexofoutput="8" />
                                                                                                        <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Move To (3)" id="7" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="140" y="276">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(-0.1,0,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (4)" id="3" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="374" y="256">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0.22,0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Move To (5)" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="647" y="318">
                                                                                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,-0.471,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)

        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                                        <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                                                                                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                                                                                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                                                                                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                                        <Resource name="Legs" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="18" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="18" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="9" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="7" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="findmarker" id="1" localization="8" tooltip="Enter description here" x="115" y="339">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Select Camera_onUseTopCamera" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Output name="headYaw_yaw" type="0" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="headYaw" id="8" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="305" y="249">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        import time
        import math
        import cv2
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.1
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(3.0)
        CamPos = self.motionProxy.getPosition("CameraBottom",2,True)
        dx = CamPos[2]/math.tan(CamPos[4])
        #self.log("z:"+str(CamPos[2])+" pitch:"+str(CamPos[4])+" yaw:"+str(CamPos[5]))
        #self.log("dx:"+str(dx))
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_adjust(self,p):
        self.log("yaw: "+str(p[0]))
        #angleHead = self.motionProxy.getAngles("Head",True)
        angle = p[0]+p[1]
        if abs(p[0])>0.03:
            if angle > 2.0 or angle < -2.0:
                self.log("BADYAW:"+str(angle))
                self.yaw(angle)
            else:
                self.names  = ["HeadYaw", "HeadPitch"]
                self.angles  = [p[0], 0]
                self.fractionMaxSpeed  = 0.1
                self.motionProxy.changeAngles(self.names, self.angles, self.fractionMaxSpeed)
                self.log("adjust fini")
                self.onStopped()
        #self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        else:
            self.log("YAW:"+str(p[1]))
            self.yaw(p[1])
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="adjust" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                    <Output name="yaw" type="0" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Take Picture" id="10" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="664" y="262">
                                                                    <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"
        #self.recordFolder = "/home/nao/"
    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = ALProxy( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
            self.log("capture succeded")
        else:
            self.log("capture failed")
        self.bIsRunning = False
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                                        <Choice value="160 x 120" />
                                                                        <Choice value="320 x 240" />
                                                                        <Choice value="640 x 480" />
                                                                        <Choice value="1280 x 960" />
                                                                    </Parameter>
                                                                    <Parameter name="File Name" inherits_from_parent="0" content_type="3" value="image1" default_value="image" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                                    <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                                        <Choice value="Top" />
                                                                        <Choice value="Bottom" />
                                                                    </Parameter>
                                                                </Box>
                                                                <Box name="Select Camera" id="11" localization="8" tooltip="Change the currently used camera." x="81" y="224">
                                                                    <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.kCameraSelectID = 18
        self.cameraModule = ALProxy( "ALVideoDevice" )

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 1 )
        self.onReady()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                                    <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                                    <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                                    <Resource name="Camera setting" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="DetectFlagYaw" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="639" y="596">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        self.CameraProxy = ALProxy("ALVideoDevice")
        self.g_count=0
        self.final=[0,0]
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.log("1")
        import time
        import cv2
        import numpy as np
        angleHead = self.motionProxy.getAngles("Head",True)
        img = cv2.imread('/home/nao/recordings/cameras/image1.jpg')
        hsv=cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
        lower_yellow=np.array([21,100,70])
        upper_yellow=np.array([30,230,230])
        mask=cv2.inRange(hsv,lower_yellow,upper_yellow)
        res=cv2.bitwise_and(img,img,mask=mask)
        median=cv2.medianBlur(res,7)
        gray = cv2.cvtColor(median,cv2.COLOR_BGR2GRAY)
        edges = cv2.Canny(gray,200,300)
        lines = None
        lines = cv2.HoughLines(edges,1,np.pi/180,40)
        #self.log("2")
        #print lines
        if lines != None:
            lines1=np.array(filter(lambda x:x[1]<1,lines[0]))
            lines2=np.array(filter(lambda x:x[0]>20,lines1))
            lines3=np.array(filter(lambda x:x[0]<1240,lines2))
            if len(lines3) != 0:
                a=lines3[0][0]
                self.log(str(a))
                lines3.sort(axis=0)
                out = np.median(lines3,axis=0)
                rho = out[0]
                theta = out[1]
                b = np.sin(theta)
                a = np.cos(theta)
                ratio = np.tan(theta)
                x0 = rho/a
                self.log("rho:"+str(rho)+"theta:"+str(theta)+"cos:"+str(a))
                xsum = 0
                ysum = 0
                count = 0
                for i in range(200,720):
                    x=int(x0-ratio*i)
                    if gray[i,x] > 0:
                        xsum+=x
                        ysum+=i
                        count+=1

                if count > 0:
                    xsum/=count
                    ysum/=count
                    self.log("pixel:"+str(xsum))
                    self.final[0] = (1-xsum/640.0)*0.532
                    self.final[1] = angleHead[0]
                    self.log("output:"+str(self.final[0])+" HeadYaw:"+str(self.final[1]))
                    self.onStopped(self.final) #activate the output of the box

                else:
                    self.log("BUG detected")
                    self.NoMarker()
            else:
                self.log("median BUG detected")
                self.g_count += 1
                if self.g_count ==2:
                    self.g_count = 5
                    self.HeadMove()
                if self.g_count ==25:
                    self.log("find bar error")
                    self.g_count = 0
                    self.MoveBody()
                self.log(str(self.g_count))
                self.NoMarker()
        else:
            self.log("No object detected")
            self.g_count += 1
            if self.g_count ==2:
                self.g_count = 5
                self.HeadMove()
            if self.g_count ==20:
                self.log("find bar error")
                self.g_count = 0
                self.MoveBody()
            self.log(str(self.g_count))
            self.NoMarker()
            pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="NoMarker" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="HeadMove" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Output name="MoveBody" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="485" y="242">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Move Toward" id="2" localization="8" tooltip="Make the robot move in the direction you set in parameters.&#x0A;&#x0A;!!Warning!! the robot will not stop moving by himself. You need to either set x, y and theta to 0 or stop the box to stop him.&#x0A;&#x0A;Note: You can set the period of move direction update in parameters." x="439" y="601">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):


    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        import threading
        self.motion = ALProxy("ALMotion")
        self.x = 0
        self.y = 0
        self.theta = 0
        self.ptask = qi.PeriodicTask()
        self.lock = threading.RLock()

    def onUnload(self):
        with self.lock:
            self.ptask.stop()
            self.x = 0
            self.y = 0
            self.theta = 0
            self.motion.moveToward(0, 0, 0)
            self.motion.waitUntilMoveIsFinished()

    def onInput_onStop(self):
        with self.lock:
            self.onUnload()
            self.onStopped()

    def onInput_onStart(self):
        with self.lock:
            period = self.getParameter("Period of direction update (s)")
            us_period = int(period*1000000)

            self.ptask.compensateCallbackTime(True)
            self.ptask.setCallback(self.updateMovement)
            self.ptask.setUsPeriod(us_period)
            self.ptask.start(True)

    def moveFailed(self):
        self.onUnload()
        self.onMoveFailed()

    def updateMovement(self):
        import math
        with self.lock:
            enableArms = self.getParameter("Arms movement enabled")
            self.motion.setMoveArmsEnabled(enableArms, enableArms)
            x = self.getParameter("X")
            y = self.getParameter("Y")
            theta = self.getParameter("Theta")
            period = self.getParameter("Period of direction update (s)")
            epsilon = 0.0001
            dx = math.fabs(x - self.x)
            dy = math.fabs(y - self.y)
            dt = math.fabs(theta - self.theta)

            # Update moveToward parameters
            if(dx > epsilon or dy > epsilon or dt > epsilon):
                self.x=x
                self.y=y
                self.theta=theta
                self.motion.moveToward(self.x, self.y, self.theta)

            # Check if the move has been canceled
            if (not self.motion.moveIsActive()):
                self.moveFailed()

            us_period = int(period*1000000)
            self.ptask.setUsPeriod(us_period)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the box behavior is stopped." id="4" />
                                                                    <Output name="onMoveFailed" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the motion move task is canceled." id="5" />
                                                                    <Parameter name="X" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.2" min="-1" max="1" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Y" inherits_from_parent="0" content_type="2" value="0.2" default_value="0" min="-1" max="1" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta" inherits_from_parent="0" content_type="2" value="1" default_value="0" min="-1" max="1" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Period of direction update (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="1" tooltip="" id="9" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Move To" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="180" y="419">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0.2" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Move To (1)" id="5" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="321" y="415">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Move To (2)" id="7" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="450" y="421">
                                                                    <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                                                                    <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                                                                    <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                                                    <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                                                    <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="-90" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                                                    <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                                                                    <Resource name="Legs" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="HeadMid" id="9" localization="8" tooltip="" x="248" y="121">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        import time
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.1
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(3.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                </Box>
                                                                <Box name="HeadMove (1)" id="12" localization="8" tooltip="Enter tooltip here" x="944" y="635">
                                                                    <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="Search" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="Track" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                    <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Output name="find" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram scale="74.9154">
                                                                                    <Box name="Counter" id="5" localization="8" tooltip="Enter tooltip here" x="66" y="236">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bMustStop = False
        self.counter = 0
        self.counter2 = 0
        pass

    def onUnload(self):
        self.bMustStop = True
        pass

    def onInput_onStart(self):

        self.counter2 = 0
        self.bMustStop = False
        while not self.bMustStop:
            self.counter += 1
            self.counter2 += 1

            if self.counter == 1:
                self.output1()
                #time.sleep(10.0)
            if self.counter == 2:
                self.output2()
                #time.sleep(10.0)
            if self.counter == 3:
                self.output3()
                #time.sleep(1.5)
            if self.counter == 4:
                self.output4()
                time.sleep(3.0)
            if self.counter == 5:
                self.output5()
                #time.sleep(10.0)
            if self.counter == 6:
                self.output6()
                #time.sleep(1.5)
            if self.counter == 7:
                self.output7()
                #time.sleep(10.0)
            if self.counter == 8:
                self.output8()
                self.counter = 0
                time.sleep(3.0)
            time.sleep(10.0)
            if self.counter2 == 2:
                self.counter2 = 0
                self.Problem()
        pass

    def onInput_onStop(self):
        self.onUnload()

        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="Problem" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="output3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Output name="output4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                        <Output name="output5" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                                                        <Output name="output6" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                                                        <Output name="output7" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                                                        <Output name="output8" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                                                    </Box>
                                                                                    <Box name="Counter-find" id="7" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="1170" y="205">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="15" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="headYawL" id="8" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="547" y="2">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [-0.6, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="headYawM" id="9" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="608" y="344">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.02
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(10.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="headYawR" id="10" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="623" y="500">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0.6, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="headYawM (1)" id="11" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="564" y="799">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.02
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(10.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="headYawL (1)" id="12" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="712" y="84">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [-1.2, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="headYawR (1)" id="13" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="729" y="632">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [1.2, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="headYawL (2)" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="756" y="210">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [-1.8, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="headYawR (2)" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="744" y="762">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.motionProxy.setStiffnesses("Head", 1.0)
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [1.8, 0]
        self.fractionMaxSpeed  = 0.015
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(8.0)
        #self.motionProxy.setStiffnesses("Head", 0.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="8" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                                    <Link inputowner="12" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                    <Link inputowner="12" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="9" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="10" />
                                                                                    <Link inputowner="13" indexofinput="2" outputowner="5" indexofoutput="11" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="12" />
                                                                                    <Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="13" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="8" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="10" indexofoutput="3" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="8" indexofoutput="6" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="7" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="1" indexofoutput="6" />
                                                                <Link inputowner="12" indexofinput="3" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="headYawM" id="3" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="279" y="413">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.1
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(1.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="headYawM (1)" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="1019" y="384">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.names  = ["HeadYaw", "HeadPitch"]
        self.angles  = [0, 0]
        self.fractionMaxSpeed  = 0.1
        self.motionProxy.setAngles(self.names, self.angles, self.fractionMaxSpeed)
        time.sleep(1.0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="naomark" id="20" localization="8" tooltip="Enter description here" x="185" y="64">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Input name="LandmarkDetected" type="0" type_size="1" nature="4" stm_value_name="LandmarkDetected" inner="1" tooltip="LandmarkDetected desc" id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="NoNaoMark" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="findNaoMark" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="373" y="227">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Value=[]

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            try :
                self.signalsReceived(self.Value.pop())
            except :
                self.signalsReceived(None)
            self.Value=[]


    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self,p):
        if len(p) != 0 :
            #self.Value.append(p)
            markInfoArray = p[1]
            for markInfo in markInfoArray:
                moreInfo = markInfo[0]
                self.Value.append(moreInfo)
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal2" type="0" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="2" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="TrackNaoMark" id="4" localization="8" tooltip="Enter tooltip here" x="527" y="218">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):
        if balls!= None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            #p= [balls[0][1],balls[0][2]]
            p=[balls[1],balls[2]]
            self.Angles(p)
            #self.log(str(balls[1]))
        else:
            if not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                </Box>
                                                                <Box name="Timer" id="1" localization="8" tooltip="Send a signal with a predefined period." x="186" y="261">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                    <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" />
                                                                </Box>
                                                                <Link inputowner="10" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="adjust_s (1)" id="6" localization="8" tooltip="" x="854" y="55">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


    def onLoad(self):
        #put initialization code here
        self.motion=ALProxy("ALMotion")

        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        #self.onStopped() #activate the output of the box
        self.motion.setMoveArmsEnabled(False,False)

        self.q = p +1.4835
        self.logger.info("p:"+str(p))
        self.logger.info("q:"+str(self.q))
        if self.q<0.5/180*3.14 and self.q>-0.5/180*3.14:
            self.onStopped()
        elif self.q<1.0/180*3.14 and self.q>-1.0/180*3.14:
            self.motion.moveTo(0, 0, self.q)
            self.onStopped()
        elif self.q<2.0/180*3.14 and self.q>-2.0/180*3.14:
            self.motion.moveTo(0, 0, self.q)
            self.motion.moveTo(0,0.04*self.q,0)
            self.onStopped()
        elif self.q<-2.0/180*3.14 or self.q>2.0/180*3.14:
            self.motion.moveTo(0, 0, self.q)
            self.motion.moveTo(0.0,0.04*self.q,0)
            self.retry1()
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Output name="retry" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="retry1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="4" outputowner="9" indexofoutput="7" />
                                            <Link inputowner="2" indexofinput="2" outputowner="9" indexofoutput="8" />
                                            <Link inputowner="9" indexofinput="2" outputowner="2" indexofoutput="9" />
                                            <Link inputowner="2" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="6" outputowner="9" indexofoutput="9" />
                                            <Link inputowner="2" indexofinput="5" outputowner="9" indexofoutput="6" />
                                            <Link inputowner="9" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="9" />
                                            <Link inputowner="20" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="6" indexofoutput="6" />
                                            <Link inputowner="2" indexofinput="7" outputowner="9" indexofoutput="10" />
                                            <Link inputowner="0" indexofinput="4" outputowner="9" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Move To" id="8" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="1304" y="467">
                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,-0.4,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)
        self.motion.moveTo(0,0,-0.4,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)
        self.motion.moveTo(0,0,-0.4,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)
        self.motion.moveTo(0,0,-0.4,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(-0.1,0.0,0.0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)
        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                            <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                            <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                            <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                            <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                            <Resource name="Legs" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Move To (4)" id="18" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="970" y="718">
                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(0,0,-0.4,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)
        self.motion.moveTo(0,0,-0.4,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)
        self.motion.moveTo(0,0,-0.4,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)
        self.motion.moveTo(0,0,-0.4,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)
        self.motion.setMoveArmsEnabled(False,False)
        self.motion.moveTo(-0.1,0.0,0.0,[["MaxStepX",0.02],["StepHeight",0.01], ["MaxStepFrequency", 0.0]])
        time.sleep(1)
        self.output()
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                            <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                            <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="7" />
                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="8" />
                            <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="9" />
                            <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables natural motion of the arms." id="10" />
                            <Resource name="Legs" type="Lock" timeout="0" />
                        </Box>
                        <Link inputowner="3" indexofinput="2" outputowner="21" indexofoutput="5" />
                        <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                        <Link inputowner="27" indexofinput="2" outputowner="4" indexofoutput="4" />
                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="7" />
                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="8" />
                        <Link inputowner="11" indexofinput="2" outputowner="27" indexofoutput="5" />
                        <Link inputowner="13" indexofinput="2" outputowner="26" indexofoutput="5" />
                        <Link inputowner="1" indexofinput="2" outputowner="13" indexofoutput="4" />
                        <Link inputowner="14" indexofinput="2" outputowner="7" indexofoutput="5" />
                        <Link inputowner="5" indexofinput="2" outputowner="14" indexofoutput="4" />
                        <Link inputowner="12" indexofinput="2" outputowner="1" indexofoutput="4" />
                        <Link inputowner="19" indexofinput="2" outputowner="11" indexofoutput="4" />
                        <Link inputowner="16" indexofinput="2" outputowner="19" indexofoutput="4" />
                        <Link inputowner="16" indexofinput="2" outputowner="19" indexofoutput="6" />
                        <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="4" />
                        <Link inputowner="26" indexofinput="2" outputowner="15" indexofoutput="4" />
                        <Link inputowner="17" indexofinput="2" outputowner="12" indexofoutput="4" />
                        <Link inputowner="7" indexofinput="2" outputowner="17" indexofoutput="4" />
                        <Link inputowner="8" indexofinput="2" outputowner="5" indexofoutput="4" />
                        <Link inputowner="12" indexofinput="2" outputowner="8" indexofoutput="4" />
                        <Link inputowner="12" indexofinput="2" outputowner="8" indexofoutput="6" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
